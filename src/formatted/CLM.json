{
    "files": [
        {
            "id": "98c4d17d-de51-43c2-87ed-f49ae07c4bc0", 
            "name": "view", 
            "source": "function doGet(e) {
  GLOBAL.Util.infoLog("Entering doGet()..." + e.parameter);
  
  var evaluated = getMainPage("Result of every activity will be displayed here...");
  evaluated.setSandboxMode(HtmlService.SandboxMode.IFRAME);
  
  return evaluated;

}


//-----------------------------------------------
// show the index view
//-----------------------------------------------
function getMainPage(content){
  GLOBAL.Util.infoLog("Entering getMainPage()...");

  var t = HtmlService.createTemplateFromFile('main-page'); //.setSandboxMode(HtmlService.SandboxMode.EMULATED);
  
  // Prepare Menu items in accordance with login user
  t.menuitems = GLOBAL.Security.createMenuItems();  //TODO: transfer the login user authority late
  
  // Prepare different data for displaying
  //---------- COMMON --------------
  t.branches = Model.getBranches();
  t.status = GLOBAL.Constants.STATUS;
  //t.message = MESSAGETXT;
  t.rs = GLOBAL.Util.getLocalString();  // resource string  //TODO: create a button which can change this
  
  //---------- ORDER & STOCK ---------
  // should be a two-dimensional array. 
  //t.items = {}; //Model.prepareItems();

  //t.itemTypes = {};  //Model.getItemTypes();
  //GLOBAL.Util.debugLog("[getMainPage] *** retrieved itemTypes ***");
  //GLOBAL.Util.displayObject(t.itemTypes);
  
  return t.evaluate();
}

//#######################################################################################
//                               Server side process functions
//#######################################################################################
//-----------------------------------------------
// Order and Orderlog function
//-----------------------------------------------
//--------- Prepare order form ------------------
function processPrepareOrder() {
  return Order.prepareOrder();
}

//--------- When place an Order ------------------
function processPlaceOrder(params) {
  return Order.placeOrder(params);
}

//--------- When display Order Log form ---------
function processOrderLog() {
  return Order.getLatestOrder();
}

//--------- Update order information (From OrderLog form) ---------
function processUpdateOrder(orderID, params) {
  return Order.updateOrder(orderID, params);
}

//-----------------------------------------------
// Purchase and Purchaselog function
//-----------------------------------------------
//--------- Aggregate the orders to create purchase list ---------
function processQueryPurchase(start, end) {
  var purchase = Purchase.queryPurchase(start, end);
  return Purchase.createResults(purchase);
}

//--------- Aggregate the orders to create purchase list
function processSetToPurchased(purchaseID) {
  return Purchase.setToPurchased(purchaseID);
}

//--------- When display Purchase Log form
function processPurchaseLog() {
  GLOBAL.Util.debugLog("entering processPurchaseLog...");
  return Purchase.getPurchases();
}

//--------- Add purchase datail in PurchaseLog form
// when this purchase has not been done yet ---------
function processDisplayPurchaseDetail(purchaseId, statusId) {
  GLOBAL.Util.debugLog("entering processDisplayPurchaseDetail..." + purchaseId + ":" + statusId);
  return Purchase.displayPurchaseDetail(purchaseId, statusId);
}

//--------- When update purchase detail in PurchaseLog form
function processUpdatePurchaseDetail(purchaseId, params) {
  GLOBAL.Util.debugLog("entering processUpdatePurchaseDetail..." + purchaseId + ":" + params);
  return Purchase.updatePurchaseDetail(purchaseId, params);
}

//-----------------------------------------------
// Stock List, in and out
//-----------------------------------------------
//--------- When init a Stock List
function processStockList() {
  return Stock.initStockList(); 
}

//--------- When prepare a Stock in/out form
function processPrepareStock(content) {
  return Stock.prepareStock(content);  //content for in & out toggle
}

//--------- Query the stock data
function processQueryStock(params) {
  return Stock.queryStock(params);
}

//--------- Save the stock in/out data
function processSaveStock(params) {
  return Stock.saveStock(params);
}

//--------- after stock in / out some items, the items info
// should be refreshed and displayed
function processRefreshStockItems() {
  return Stock.refreshItems();
}

//--------- When display Latest purchase list in Distribute form
function processDistributeList() {
  return Distribute.getList();
}

//-----------------------------------------------
// Distribute
//-----------------------------------------------
//--------- When display Distribute detail
function processDistributeDetail(purchaseId, statusId) {
  return Distribute.queryDistDataByPurchaseID(purchaseId, statusId);
}

//--------- Update the distribute data after item be delivered
function processConfirmDistribute(purchaseID, status, comment) {
  return Distribute.confirmDistribute(purchaseID, status, comment);
}

//-----------------------------------------------
// Item Management
//-----------------------------------------------
//--------- Init the item management
function processItemMgr() {
  return Itemmgr.initItemMgr();
}

//--------- Upload the item file ---------
function processFormItemFile(form) {
  return Itemmgr.uploadItemFile(form);
}

//--------- Query the item data ---------
function processQueryItem(param) {
  return Itemmgr.queryItem(param);
}

//-----------------------------------------------
// Supplier Management
//-----------------------------------------------
//--------- Query the supper data ---------
function processQuerySupplier(param) {
  return Suppmgr.querySupplier(param);
}

//--------- Upload the supplier file ---------
function processFormSupplierFile(form) {
  return Suppmgr.uploadSupplierFile(form);
}

//-----------------------------------------------
// Administration
//-----------------------------------------------
//--------- Init Admin form ---------
function processInitAdminList() {
  return Admin.initializeAdminList();
}

//--------- Add a User ---------
function processAddUser(param) {
  return Admin.addUser(param);
}

//--------- Add a Branch ---------
function processAddBranch(param) {
  return Admin.addBranch(param);
}

", 
            "type": "server_js"
        }, 
        {
            "id": "5cf9755a-bc87-4222-874b-36b610f65c2d", 
            "name": "base-js", 
            "source": "var GLOBAL={};
GLOBAL.namespace=function(str){
	var arr=str.split("."), o=GLOBAL;
	for (var i=(arr[0]=="GLOBAL")? 1:0; i<arr.length; i++){
		o[arr[i]] = o[arr[i]] || {};
		o=o[arr[i]];
	}
};

/*============================================================*/
//Lang Relative
/*============================================================*/
GLOBAL.namespace("Lang");
GLOBAL.Lang.trim=function(ostr){
    if (typeof(ostr) !== "string") return ostr;
	return ostr.replace(/^\s+|\s+$/g,"");
};

GLOBAL.Lang.isNumber=function(s){
	return !isNaN(s);
};

GLOBAL.Lang.extend=function(subClass, superClass) {
	var F=function(){};
	F.prototype=superClass.prototype;
	subClass.prototype=new F();
	subClass.prototype.constructor=subClass;
	subClass.superclass=superClass.prototype;
	if(superClass.prototype.constructor==Object.prototype.constructor) {
		superClass.prototype.constructor=superClass;
	}
};

/*============================================================*/
//Database Relative
/*============================================================*/

/*============================================================*/
//Other base function
/*============================================================*/
//----------------------------------------------------
// Add format function for String object
// Usage: String.format("from {0} to {1}", "A", "B") -> from A to B
//----------------------------------------------------
String.format = function(src){
    if (arguments.length == 0) return null;
    var args = Array.prototype.slice.call(arguments, 1);
    return src.replace(/\{(\d+)\}/g, function(m, i){
        return args[i];
    });
};

function LogicException(message) {
   this.message = message;
   this.name = "LogicException";
}

function BusinessException(message) {
   this.message = message;
   this.name = "BusinessException";
}

//----------------------------------------------------
//----------------------------------------------------
//compare two purchase data by purchase date of each data
function createComparison (propertyName, asce) {  //asce: true, false(=desc)
  return function (object1, object2) {
    var value1 = object1[propertyName];
    var value2 = object2[propertyName];
    
    if (value1 > value2) {
      return asce?1:-1;
    }else if (value1 < value2) {
      return asce?-1:1;
    }else{
      return 0;
    }
  };
}

//----------------------------------------------------
//----------------------------------------------------
function getContent(filename) {
  return HtmlService.createTemplateFromFile(filename).getRawContent();
}", 
            "type": "server_js"
        }, 
        {
            "id": "0c0a54a7-d297-47f5-9688-3df5acd31d87", 
            "name": "base-css", 
            "source": "<style type="text/css">
    
/* CSS reset */
/*
body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, form, fieldset, input, textarea, p, blockquote, th, td {margin:0;padding:0;}
*/
table {border-collapse:collapse;border-spacing:0;}
img {border:0;}
address, caption, cite, code, dfn, em, strong, th, var {font-style:normal;font-weight:normal;}
ol, ul {list-style:none;}
caption, th {text-align:left;}
/*h1, h2, h3, h4, h5, h6 {font-size:100%;font-weight:normal;}*/
q:before, q:after {content:'';}
abbr, acronym {border:0;}

/* FONT */
/*.df {font-family:helvetica,arial,simsun,sans-serif !important;}*/
.df {font-family:"Helvetica Neue", Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', Arial,sans-serif !important;}

/* 文字排版 characters layout */
.f10 {font-size:10px;}
.f11 {font-size:11px;}
.f12 {font-size:12px;}
.f13 {font-size:13px;}
.f14 {font-size:14px;}
.f16 {font-size:16px;}
.f18 {font-size:18px;}
.f20 {font-size:20px;}
.f36 {font-size:36px;}
.fb {font-weight:bold;}
.fi {font-style:italic;}
.fn {font-weight:normal;}
.t2 {text-indent:2em;}
.lh150 {line-height:150%;}
.lh180 {line-height:180%;}
.lh200 {line-height:200%;}
.unl {text-decoration:underline;}
.no_unl {text-decoration:none;}

/* 定位 positioning */
.tl {text-align:left;}
.tc {text-align:center;}
.tr {text-align:right;}
.bc {margin-left:auto;margin-right:auto;} /* usually come with width setting, e.g., w100 or w200 */
.fl {float:left;display:inline;}
.fr {float:right;display:inline;}
.cb {clear:both;}
.cl {clear:left;}
.cr {clear:right;}

/*The problem happens when a floated element is within a container box, 
that element does not automatically force the container’s height adjust to the floated element. 
When an element is floated, its parent no longer contains it because the float is removed from the flow. 
You can use 2 methods to fix it:
{clear: both;}
clearfix
Once you understand what is happening, use the method below to “clearfix” it. */
.clearfix:after{content:".";display:block;height:0;clear:both;visibility:hidden}
.clearfix{*+height:1%;}
/*.clearfix:after {content:".";display:block;height:0;clear:both;visibility:hidden;}
.clearfix {display:inline-block}
html[xmlns] .clearfix {display:block;}
* html .clearfix{height:1%}*/

.vm {vertical-align:middle;}
.vt {vertical-align: top;}
.pr {position:relative;}
.pa {position:absolute;}
.abs-right {position:absolute;right:0;}
.hidden {visibility:hidden;}
.inblock {display:inline-block;}
.none {display:none;}

/* 长度高度 length and height */
.w10 {width:10px;}
.w20 {width:20px;}
.w30 {width:30px;}
.w40 {width:40px;}
.w50 {width:50px;}
.w60 {width:60px;}
.w70 {width:70px;}
.w80 {width:80px;}
.w90 {width:90px;}
.w100 {width:100px;}
.w180 {width:180px;}
.w200 {width:200px;}
.w250 {width:250px;}
.w300 {width:300px;}
.w400 {width:400px;}
.w500 {width:500px;}
.w600 {width:600px;}
.w700 {width:700px;}
.w800 {width:800px;}
.w {width:100%;}
.h50 {height:50px;}
.h80 {height:80px;}
.h100 {height:100px;}
.h200 {height:200px;}
.h {height:100%;}

/* 边距 margin & padding */
.m0 {margin:0px;}
.m5 {margin:5px;}
.m10 {margin:10px;}
.m15 {margin:15px;}
.m30 {margin:30px;}

.mt5 {margin-top:5px;}
.mt10 {margin-top:10px;}
.mt15 {margin-top:15px;}
.mt20 {margin-top:20px;}
.mt30 {margin-top:30px;}
.mt50 {margin-top:50px;}
.mt100 {margin-top:100px;}

.mb5 {margin-bottom:5px;}
.mb10 {margin-bottom:10px;}
.mb15 {margin-bottom:15px;}
.mb20 {margin-bottom:20px;}
.mb30 {margin-bottom:30px;}
.mb50 {margin-bottom:50px;}
.mb100 {margin-bottom:100px;}

.ml5 {margin-left:5px;}
.ml10 {margin-left:10px;}
.ml15 {margin-left:15px;}
.ml20 {margin-left:20px;}
.ml30 {margin-left:30px;}
.ml50 {margin-left:50px;}
.ml100 {margin-left:100px;}

.mr5 {margin-right:5px;}
.mr10 {margin-right:10px;}
.mr15 {margin-right:15px;}
.mr20 {margin-right:20px;}
.mr30 {margin-right:30px;}
.mr50 {margin-right:50px;}
.mr100 {margin-right:100px;}

.p0 {padding:5px;}
.p5 {padding:5px;}
.p10 {padding:10px;}
.p15 {padding:15px;}
.p30 {padding:30px;}

.pt5 {padding-top:5px;}
.pt10 {padding-top:10px;}
.pt15 {padding-top:15px;}
.pt20 {padding-top:20px;}
.pt30 {padding-top:30px;}
.pt50 {padding-top:50px;}
.pt100 {padding-top:100px;}

.pb5 {padding-bottom:5px;}
.pb10 {padding-bottom:10px;}
.pb15 {padding-bottom:15px;}
.pb20 {padding-bottom:20px;}
.pb30 {padding-bottom:30px;}
.pb50 {padding-bottom:50px;}
.pb100 {padding-bottom:100px;}

.pl5 {padding-left:5px;}
.pl10 {padding-left:10px;}
.pl15 {padding-left:15px;}
.pl20 {padding-left:20px;}
.pl30 {padding-left:30px;}
.pl50 {padding-left:50px;}
.pl100 {padding-left:100px;}

.pr5 {padding-right:5px;}
.pr10 {padding-right:10px;}
.pr15 {padding-right:15px;}
.pr20 {padding-right:20px;}
.pr30 {padding-right:30px;}
.pr50 {padding-right:50px;}
.pr100 {padding-right:100px;}

/* border */
.b0 {border:0px;}


</style>", 
            "type": "html"
        }, 
        {
            "id": "d5bf10f6-155d-4d95-b5f4-6b2be781660f", 
            "name": "common-css", 
            "source": "<style type="text/css">
    
/*body {font-family:Verdana,Arial !important;font-size: 10px;}*/
/* background */
body {
  /*background-color:#eceff1;*/
  background-image: url("https://drive.google.com/uc?id=0B2GrL44-u3KubmluX1JOT1ZmU3M");
}
/*-------------------------*/
/* LOGO, CONTAINER, FOOTER */
/*-------------------------*/
.header {
  /*background-color:#4285F4;*/
  color:#283593;min-width:1024px;padding:5px;height:50px;
}
.header1 {
	background-image: -webkit-gradient(linear, 0 0, 0 100%, color-stop(0.5, #000), to(#ddd));
	background-image: -webkit-linear-gradient(#000 50%, #ddd);
	background-image: -moz-linear-gradient(#000 50%, #ddd);
	background-image: -o-linear-gradient(#000 50%, #ddd);
	background-image: linear-gradient(#000 50%, #ddd);
}
.container {
  /*background-color:#eceff1;*/
  min-height:650px;min-width:1100px;overflow:hidden;
}

.footer {
  background-color:#4285F4;color:#fff;font-size:1.2em;text-align:center;min-width:1024px;
}

/*---------------------------------------*/
/* SIDE BAR, including MENU, COMMON-INFO */
/*---------------------------------------*/
.sidebar {width:250px;height:100%;min-height:550px;margin-top:10px;}

.commonInfo {border:0px solid #000;text-align:right;color:#FFDDAA;padding:20px;} 
.commonInfo li {list-style:none;margin-top:5px;} 

#menu {
    /*font-family: Arial;*/
    font-size: 14px;
    /*width: 500px;*/
    overflow: hidden;
}

#menu, #menu ul {
    list-style-type: none;
    background: #5677fc;
    margin: 0;
    padding: 0;
}

#menu li {
    float: left;
}

#menu li a {
    display: block;
    padding: 10px 15px;
    color: #eed;
    text-decoration: none;
    border-right: 1px solid #FFF;
}
#menu li a:hover {
    background: #3f51b5;
    color:#fff;
}

#menu li ul li {
    font-size:12px;
    background-color:#fff;
    width:200px;
    float: none;
}

#menu li ul li a {
    border-top: 1px solid #FFF;
    background-color:#e7e9fd;
    color:#000;
}

#menu li ul {
    display: none;
    position: absolute;
}

#menu li:hover ul{
    display: block;
}

#menu li > a:after { content: ' ▼'; } 

#menu li > a:only-child:after { content: ''; }   
  
/*---------------------------------------------------*/
/* CONTENT, including TITLE, INPUT-AREA, OUTPUT-AREA */
/*---------------------------------------------------*/
.content {min-height:550px;
   margin-top:5px;
   width:98%;
   /*background-color: #eceff1;*/
   border:1px solid #eee;
   padding: 5px;
}
.content-title {
    display : none;
    font-weight:bold;
    font-size:1.2em;
    margin: 5px 0px;
    padding:1px 5px;
    color: #fff;
    /*border-left: 2px solid #f70;*/
    border-radius:1px;
    background-color: #5677fc;
}

.input-area, .output-area {
    /*border-top: 2px solid #f70;*/
    /*margin-bottom:10px;*/
    /*margin-top:10px;*/
    /*padding:5px;*/
}

.area-title {
   font-size:1em;
   font-weight:bold;
   margin:10px 0px;
   border-bottom: 1px solid #628cbb;
}

.item-select-cell {
    background-color:#b2ebf2;
    border:0px solid #333366;
    width:200px;
    min-height:70px;padding:0.2em;
    border-radius:.4em;   
}

.item-select-cell .cell-td-1 {
  width: 140px;
}

.item-select-cell .cell-td-2 {
  width: 60px;
}

.item-select-cell table tr td {
  padding:5px;
}

/*---------------------------------------------------*/
/* MESSAGE                                           */
/*---------------------------------------------------*/
.msg_info, .msg_success, .msg_warning, .msg_error {
    border: 1px solid #ccc;
    margin: 10px 0px;
    padding:15px 10px 15px 50px;
    background-repeat: no-repeat;
    background-position: 10px center;
    -moz-border-radius:2px;
    -webkit-border-radius:2px;
    border-radius:2px;
    font-size: 0.8em;
}
.msg_info {
    color: #00529B;
    background-color: #BDE5F8;
    background-image: url('https://drive.google.com/uc?id=0B8kalvI6sCsuRDR6VHN1OGw1LTA');
}
.msg_success {
    color: #4F8A10;
    background-color: #DFF2BF;
    background-image: url('https://drive.google.com/uc?id=0B8kalvI6sCsuRGNoVUVzb0xiQU0');
}
.msg_warning {
    color: #9F6000;
    background-color: #FEEFB3;
    background-image: url('https://drive.google.com/uc?id=0B8kalvI6sCsuVFNtUHhEWkVzQjg');
}
.msg_error {
    color: #D8000C;
    background-color: #FFBABA;
    background-image: url('https://drive.google.com/uc?id=0B8kalvI6sCsuOVZiZlpZaHlkY00');
}
/*-------------------------------*/
/* jQuery UI style customization */
/*-------------------------------*/
/*.ui-menu {width: 160px; z-index: 2;}
.ui-accordion {width:160px;z-index:2;padding: 0.1em 0.1em;}
.ui-accordion-content {padding: 0.5em 2.2em;}
order, #itemmgr .ui-tabs {width: 100%; overflow:hidden;} */
.ui-widget {
  font-family:"Helvetica Neue", Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', Arial,sans-serif;
}
/*.ui-button {font-size:14px} #607d8b*/
.ui-button-text {
  font-size: 14px;
  background-color: #5677fc;
  color:#FFF;
  cursor:pointer;
}

/* --------- datepicker ------- */
.ui-datepicker {
  font-size: 12px;
}

/* --------- dialog --------- */
.no-close .ui-dialog-titlebar-close {
  display: none;
}

.ui-dialog .ui-dialog-buttonpane {
  margin: 0px;
  padding: 0px;
}
.ui-dialog-title {
  background: transparent; 
  /*background-color: #5677fc;*/
  border: none;
  font-size:14px;
  color:#eee;
}

.error-dialog > .ui-dialog-titlebar {
  font-size:12px;
  background: #5677fc;
}

.info-dialog > .ui-dialog-titlebar {
  font-size:12px;
  background: #5677fc;
}


.error-dialog .ui-dialog-content {
  font-size:12px;
  font-weight:bold;
  color:red;
}

.info-dialog .ui-dialog-content {
  font-size:12px;
  color:#111;
}

/* --------- pure css styling dialog --------- */
#overlay {
  visibility: hidden;
  position: absolute;
  left: 0px;
  top: 0px;
  width:100%;
  height:100%;
  text-align:center;
  z-index: 1000;
}

#overlay div {
  width:300px;
  margin: 100px auto;
  background-color: #fff;
  border:1px solid #000;
  padding:15px;
  text-align:center;
}

/* --------- breadcrumbs --------- */
#breadcrumbs {
  /*background-color: #EDF5FA;*/
  padding: 5px;
  font-size: 14px;
  color: #777;
}
#breadcrumbs a {
  color: #5677FC;
  font-weight: bold;
}

/* --------- Table --------- */
table {
  font-size:12px;
}

table .table-input {
  width:60px;
  font-size:1em;
}

table .selected-row {
  background-color: #DFF2BF;
}

table .table-button {
  background-color: #607D8B;
  width:100px;
  font-size:1em;
  color:#FFF;
}

table .dataTable tbody td{
  padding:0px;
  font-size:1em;
}

table .ui-state-default {
  border:0px;
  background:#5677fc;
  font-size: 1.1em;
  color: #eee;
}

.ui-datepicker-header {
  background:#5677fc;
  color: #eee;
}

.tabs-min {
    background: transparent; 
    border: none; 
} 
.tabs-min .ui-widget-header { 
    background: transparent; 
    border: none; 
    border-bottom: 1px solid #c0c0c0; 
    -moz-border-radius: 0px; 
    -webkit-border-radius: 0px; 
    border-radius: 0px; 
} 
.tabs-min .ui-tabs-nav .ui-state-default { 
    background: transparent; 
    border: none; 
} 
.tabs-min .ui-tabs-nav .ui-state-active { 
    background: transparent url(img/uiTabsArrow.png) no-repeat bottom center; 
    border: none; 
} 
.tabs-min .ui-tabs-nav .ui-state-default a { 
    font-size: 14px;
    color: #b0b0b0; 
} 
.tabs-min .ui-tabs-nav .ui-state-active a { 
    font-size: 14px;
    font-weight: bold;
    color: #017CDC; 
}

/*-------------------------------*/
/* Common control                */
/*-------------------------------*/
h1 {
  margin:5px;
}

h2 {
  font-size:1.4em;font-weight:normal;margin:5px 0;
}

h3 {
  font-size:1.2em;font-weight:normal;margin:5px;
}

fieldset {
  margin: 1em 0;
  /*padding: 1em;*/
  border: 1px solid #ccc;
  background: #f8fafa;
}

fieldset legend {
  font-weight: bold;
  font-size: 18px;
  color: #303F9F;
}

fieldset label {
  margin:5px;
  display: block;
}

fieldset input:focus {
  border: 2px solid #353;
  /*background: #fcc;*/
}


fieldset button {
  margin: 0.4em 0em;
  min-width: 100px;
}

fieldset div label {
  display: inline-block;
  width: 200px;
}

.styled-select select {
   background: transparent;
   width: 268px;
   padding: 5px;
   font-size: 14px;
   line-height: 1;
   border: 0;
   border-radius: 0;
   height: 34px;
   -webkit-appearance: none;
}

.styled-select {
   width: 240px;
   height: 34px;
   overflow: hidden;
   background: url('https://drive.google.com/uc?id=0B8kalvI6sCsuN0M3Qk4wOFptMGs') no-repeat right #ddd;
   border: 1px solid #ccc;
}

i {
  cursor:pointer;
}
</style>", 
            "type": "html"
        }, 
        {
            "id": "d38c7cb1-99da-4beb-bfb3-730e6d28ce6b", 
            "name": "main-page", 
            "source": "<!DOCTYPE html>
<html>
<head>  
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  
  <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/smoothness/jquery-ui.css" />
  <!--link rel="stylesheet" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css"-->   
  <link rel="stylesheet" href="//cdn.datatables.net/1.9.4/css/jquery.dataTables.css" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

  <title>Cloud Logistics Manager - Cloud Information System</title>                        
  <!--link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" /-->
  
  <?!= getContent("common-css") ?>
  <?!= getContent("base-css") ?>

  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
  <script src="//ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js"></script>
  <!--script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script-->
  
  <?!= getContent("common-js") ?>
  <?!= getContent("init-js") ?>
  <?!= getContent("order-ui-js") ?>
  <?!= getContent("purchase-ui-js") ?>
  <?!= getContent("stock-ui-js") ?>
  <?!= getContent("distribute-ui-js") ?>
  <?!= getContent("management-ui-js") ?>
  <?!= getContent("admin-ui-js") ?>
  
</head>
  
<body class="df">

<div id="logo" class="header bc">
  <!--h1><?=rs.common.sysTitle?></h1-->
  <!--img style="height:50px;" src='https://drive.google.com/uc?id=0B2GrL44-u3KuUzlKMDFYMFFNYXM' alt='Company'/-->
  <img style="height:50px;" src='https://drive.google.com/uc?id=0B2GrL44-u3KuM1h0WE5ZX055SEk' alt='Company'/>
</div> <!-- logo -->

<div id="container" class="container bc">
<input type="hidden" name="branches" value="<?=JSON.stringify(branches)?>" />
<input type="hidden" name="status" value="<?=JSON.stringify(status)?>" />
<input type="hidden" name="message" value="<?=JSON.stringify(rs)?>" />
<input type="hidden" name="menuitems" value="<?=JSON.stringify(menuitems)?>" />

<!--====================== MENU ====================================== -->
<ul id="menu">
</ul>

<div id="content" class="content bc">
<!--====================== MESSAGE BOX          ====================== -->
<!--div id="ok-dialog" title="">
  <div id="ok-dialog-message"></div>
</div-->
<div id="confirm-dialog" title="<?=rs.common.confirmDialogTitle?>:">
  <div id="confirm-dialog-message"></div>
</div>
<div id="info-dialog" title="<?=rs.common.infoDialogTitle?>:">
</div>
<div id="dialog">
</div>

<!-- pure css dialog -->
<div id="overlay"><div></div></div>

<!--====================== Navigator ================================= -->
<div id="breadcrumbs">
</div>

<!--====================== HOME FORM ================================= -->
<div id="home" class="content-form">
  <div class="content-title"><h2 style="display:inline"><?=rs.home.formTitle?></h2>&nbsp;&nbsp;<span style="font-size:14px;font-weight:normal">ver.001</span></div>
  <div id="home-message"></div>
  <div id="ds-order"></div>
  <div id="ds-purchase"></div>
  <div id="ds-stock"></div>
  <div id="ds-distribute"></div>
</div> <!-- home div -->

<!--====================== ORDER FORM ================================ -->
<div id="order">
 <div class="content-title"><h2><?=rs.order.formTitle?></h2></div>
 
 <div id="order-input-area" class="input-area">
   <fieldset>
     <legend><?=rs.order.inputTitle?></legend>
     <div id="order-tabs" class="f12 tabs-min" >
     </div> <!-- order-tabs -->
     <button id="order-add-sbitems" onclick="addOrderSBItems()"><?=rs.order.addSBItemTitle?></button>
   </fieldset>
 </div> <!-- order-input-area -->
 
 <div id="order-output-area" class="output-area">
   <fieldset>
     <legend><?=rs.order.outputTitle?></legend>
     <p class="msg_warning"><?=rs.order.info01?></p>
     <table id="order-sbitem-list" class="display">
     </table>
     <button id="order-submit" onclick="submitSaveOrder()"><?=rs.order.placeOrderTitle?></button>
   </fieldset>
 </div>

</div> <!-- order div -->


<!--===================== ORDER LOG FORM ============================= -->
<div id="orderlog" class="content-form">

  <div class="content-title"><h2><?=rs.orderlog.formTitle?></h2></div>

  <div class="input-area">
    <fieldset>
      <legend><?=rs.orderlog.inputTitle?> <em>[No.<span id="orderlog-order-id"></span>]</em></legend>
      <div><label><?=rs.business.Branch?>:</label><span id="orderlog-order-branch"></span></div>
      <div><label><?=rs.business.PlacedDate?>:</label><span id="orderlog-order-placedate"></span></div>
      <div><label><?=rs.business.Status?>:</label><span id="orderlog-order-status"></span></div>
    </fieldset>
  </div>
  
  <div class="output-area">
    <fieldset>
      <legend><?=rs.orderlog.outputTitle?></legend>
      <table id="order-log-list"></table>
      <button id="order-log-submit" class="btn btn-success" onclick="submitSaveOrderLog()"><?=rs.orderlog.updateOrderTitle?></button>
    </fieldset>
  </div>
</div> <!-- order div -->

<!--====================== PURCHASE FORM ============================= -->
<div id="purchase" class="content-form">
  <div class="content-title"><h2><?=rs.purchase.formTitle?></h2></div>
  
  <div id="purchase-input-area" class="input-area">
    <fieldset>
      <legend><?=rs.purchase.inputTitle?> </legend>
      <div>
        <label for="purchase-query-from"><?=rs.business.StartDate?> (YYYY/MM/DD):</label>
        <input type='text' id='purchase-query-from' value='' />
      </div>
      <div>
        <label for="purchase-query-to"><?=rs.business.EndDate?> (YYYY/MM/DD):</label>
        <input type='text' id='purchase-query-to' value='' />
      </div>
      <button id='query-purchase' class="btn" onclick="queryPurchase()"><?=rs.common.queryBtnTitle?></button>
      <button id='reset-query-Purchase' class="btn" onclick="clearQueryPurchase()"><?=rs.common.clearBtnTitle?></button>
    </fieldset>
  </div>
  
  <div id="purchase-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.purchase.outputTitle?></legend>
    
      <input type="hidden" id="purchase-purchaseid" value="" />
      <p id="all-in-stock-msg" class="msg_info">
        <?=rs.purchase.info01?>
      </p>
      <button id='set-to-purchased' class="btn mb10" onclick="setToPurchased()"><?=rs.purchase.setPurchasedTitle?></button>
      <table id="purchase-list" class="display"></table>
    </fieldset>
  </div>
</div> <!-- purchase div -->

<!--====================== PURCHASE LOG FORM ========================= -->
<div id="purchaselog" class="content-form">
  <div class="content-title"><h2><?=rs.purchaselog.formTitle?></h2></div>
  <div id="purchaselog-input-area" class="input-area">
    <fieldset>
      <legend><?=rs.purchaselog.inputTitle?></legend>
      <table id="purchase-log-list"></table>
    </fieldset>
  </div>
  
  <div id="purchaselog-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.purchaselog.outputTitle?></legend>
      <input type="hidden" id="purchase-log-id" value="" />
      <table id="purchase-detail-list" class="display"></table>
      <button id='update-purchased' class="btn" onclick="updatePurchaseDetail()"><?=rs.purchaselog.purchaseAllTitle?></button>
    </fieldset>
  </div>
</div> <!-- purchase log div -->

<!--====================== STOCK LIST FORM ============================= -->
<div id="stocklist" class="content-form">
  <div class="content-title"><h2><?=rs.stock.formTitle?></h2></div>
  <div id="stocklist-input-area" class="input-area">
    <fieldset>
      <legend><?=rs.stock.inputTitle?></legend>
      <div class="msg_info"><?=rs.common.querymsg002?></div>
      <div>
        <label for="stock-item-type"><?=rs.business.ItemType?>:</label>
        <select id='stock-item-type'>
          <option value="-1"></option>
        </select>
      </div>
      <button id='query-stock' class="btn" onclick="queryStock()"><?=rs.common.queryBtnTitle?></button>
      <!--button id='reset-query-stock' onclick="clearQueryStock()">Clear</button-->
    </fieldset>
  </div>
  <div id="stocklist-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.stock.outputTitle?></legend>
      <table id="stock-list" class="display">
      </table>
    </fieldset>
  </div>  
</div> <!-- stock div -->

<!--====================== STOCK IN/OUT FORM ========================= -->
<div id="stock" class="content-form">
  <div id="stock-form-title" class="content-title"><h2><?=rs.stockin.formTitle?></h2></div>

  <div id="stock-input-area" class="input-area">
    <fieldset>
      <legend><?=rs.stockin.inputTitle?></legend>
      <div id="stock-tabs" class="f12 tabs-min"></div>
      <button id="stock-in-item" class="btn none" onclick="addStockInItem()"><?=rs.stockin.btnTitle?></button>
      <button id="stock-out-item" class="btn none" onclick="addStockOutItem()"><?=rs.stockout.btnTitle?></button>
    </fieldset>
  </div>
  <div id="stock-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.stockin.inputTitle?></legend>
      <p class="msg_warning"><span id="stock-message"></span></p>
      <table id="stock-item-list">
      </table>
      <button id="stock-items-submit" class="btn btn-success" onclick="submitSaveStock()"><?=rs.stockin.confBtnTitle?></button>
    </fieldset>
  </div>
</div> <!-- stock div -->

<!--====================== DISTRIBUTE FORM =========================== -->
<div id="distribute" class="content-form">
  <div class="content-title"><h2><?=rs.distribute.formTitle?></h2></div>
  <div id="distribute-input-area" class="input-area">
    <fieldset>
      <legend><?=rs.distribute.inputTitle?></legend>
      <table id="distribute-list"></table>
    </fieldset>
  </div>
  <div id="distribute-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.distribute.outputTitle?>&nbsp;[No.<span id="distribute-purchase-id"></span>]</legend>
      <p class="msg_info"><?=rs.distribute.info01?></p>
      <table id="distribute-detail" class="display"></table>
      <button id="distribute-submit" class="btn none" onclick="submitConfirmDistribute()"><?=rs.distribute.confBtnTitle?></button>
    </fieldset>
  </div>
  
</div> <!-- distribution div -->

<!--====================== ITEM MANAGEMENT FORM ====================== -->
<div id="itemmgr">
  <div class="content-title"><h2><?=rs.itemmgr.formTitle?></h2></div>
  <div id="itemmgr-tabs" class="f14 tabs-min">
    <ul>
      <li><a href="#itemmgr-tabs-1"><?=rs.itemmgr.tabTitle1?></a></li>
      <li><a href="#itemmgr-tabs-2"><?=rs.itemmgr.tabTitle2?></a></li>
    </ul>
    
    <div id="itemmgr-tabs-1" class="input-area"> 
      <input type='hidden' name='view' value='itemmgr' />
      
      <fieldset>
        <legend><?=rs.itemmgr.inputTitle1?></legend>
        <p class="msg_info"><?=rs.common.querymsg002?></p>
        <div>
          <label for="select-item-type" class="inblock"><?=rs.business.ItemType?>:</label>
            <select id='select-item-type'>
            </select>
        </div>
        <button id='queryItems' class="btn" onclick="submitQueryItems()"><?=rs.common.queryBtnTitle?></button>
        <!--button id='clearQueryItems' class="btn" onclick="clearQueryItems()">Clear</button-->
      </fieldset>
      
    </div>
    <div id="itemmgr-tabs-2" class="input-area"> 
      <fieldset>
        <legend><?=rs.itemmgr.inputTitle2?></legend>
        <p id='upload-status' class="msg_info"><?=rs.itemmgr.info01?></p>
        <form id='uploadItemFileForm'>
          <input type='file' id='itemFile' name='itemFile' accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
          <button id='uploadItemFile' class="btn" onclick="google.script.run.withSuccessHandler(onSuccessItemFile).processFormItemFile(this.parentNode)"><?=rs.common.uploadBtnTitle?></button>
        </form>
      </fieldset>
    </div>
    <div style="display: block;height: 0px;clear: both;visibility: hidden;"></div> <!-- hack for IE6 -->
  </div> <!-- itemmgr-tabs -->
  
  <div id="itemmgr-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.itemmgr.outputTitle?></legend>
      <table id="itemmgr-item-list" class="display"></table>
    </fieldset>
  </div>
</div> <!-- item management div -->

<!--====================== SUPPLIER MANAGEMENT FORM ================== -->
<div id="suppmgt">
  <div class="content-title"><h2><?=rs.suppmgr.formTitle?></h2></div>
  <div id="suppmgr-tabs" class="f14 tabs-min">
    <ul>
      <li><a href="#suppmgr-tabs-1"><?=rs.suppmgr.tabTitle1?></a></li>
      <li><a href="#suppmgr-tabs-2"><?=rs.suppmgr.tabTitle2?></a></li>
    </ul>
    
    <div id="suppmgr-tabs-1" class="input-area"> 
      <input type='hidden' name='view' value='suppmgr' />
      <fieldset>
        <legend><?=rs.suppmgr.inputTitle1?></legend>
        
        <div> 
          <label for="suppname"><?=rs.suppmgr.suppname?>:</label> 
          <input type="text" name="suppname" id="suppname" /> 
        </div> 
        
        <div> 
          <label for="suppemail"><?=rs.business.Email?>:</label> 
          <input type="text" name="suppemail" id="suppemail" /> 
        </div> 
        
        <div> 
          <label for="supptel"><?=rs.business.TelNo?>:</label> 
          <input type="text" name="supptel" id="supptel" /> 
        </div> 
        
        <div> 
          <label for="suppfax"><?=rs.business.FaxNo?>:</label> 
          <input type="text" name="suppfax" id="suppfax" /> 
        </div> 
        
        <button id='querySuppliers' class="btn" onclick="submitQuerySuppliers()"><?=rs.common.queryBtnTitle?></button>
        <button id='clearQuerySuppliers' class="btn" onclick="clearQuerySuppliers()"><?=rs.common.clearBtnTitle?></button>
      </fieldset>
    </div>
    <div id="suppmgr-tabs-2"  class="input-area"> 
      <fieldset>
        <legend><?=rs.suppmgr.inputTitle2?></legend>
        <form id='uploadSupplierFileForm'>
          <p id='upload-supplier-status' class="msg_info"><?=rs.suppmgr.info01?></p>
          <input type='file' id= 'supplierFile' name='supplierFile' accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
          <button id='uploadSupplierFile' class="btn" onclick="google.script.run.withSuccessHandler(onSuccessSupplierFile).processFormSupplierFile(this.parentNode)"><?=rs.common.uploadBtnTitle?></button>
        </form>
      </fieldset>
    </div>
    <div style="display: block;height: 0px;clear: both;visibility: hidden;"></div> <!-- hack for IE6 -->
  </div> <!-- suppmgr-tabs -->
  <div id="suppmgr-output-area" class="output-area">
    <fieldset>
      <legend><?=rs.suppmgr.outputTitle?></legend>
      <table id="suppmgr-supplier-list" class="display"></table>
    </fieldset>
  </div>
</div> <!-- supplier management div -->

<!--============================= ADMIN FORM ========================= -->
<div id="admin">
  <div class="content-title"><h2><?=rs.admin.formTitle?></h2></div>
  <div id="admin-tabs" class="f14 tabs-min" >
    <ul>
      <li><a href="#admin-tabs-1"><?=rs.admin.tabTitle1?></a></li>
      <li><a href="#admin-tabs-2"><?=rs.admin.tabTitle2?></a></li>
    </ul>
    
    <div id="admin-tabs-1" class="input-area"> 
      <fieldset>
        <legend><?=rs.admin.inputTitle1?></legend>
        <div> 
          <label for="userlastname"><?=rs.business.PersonLName?>:</label> 
          <input type="text" name="userlastname" id="userlastname" /> *
        </div> 
        
        <div> 
          <label for="userfirstname"><?=rs.business.PersonFName?>:</label> 
          <input type="text" name="userfirstname" id="userfirstname" /> *
        </div> 

        <div> 
          <label for="useremail"><?=rs.business.Email?>:</label> 
          <input type="text" name="useremail" id="useremail" /> *
        </div> 

        <div> 
          <label for="select-user-branch"><?=rs.business.Branch?>:</label> 
          <select id='select-user-branch'>
            <option value="-1"></option>
          <?for (var i=0;i<branches.length;i++) { ?>
              <option value="<?=branches[i].id?>"><?=branches[i].name?></option>
          <? } ?>
          </select> *
        </div> 
       
        <button id='updateUser' class="btn btn-success" onclick="submitAddUser()"><?=rs.common.addBtnTitle?></button>
        <button id='clearUpdateUser' class="btn btn-success" onclick="clearUpdateUser()"><?=rs.common.clearBtnTitle?></button>
      </fieldset>

      <fieldset>
        <legend><?=rs.admin.outputTitle1?></legend>
        <table id="admin-user-list" class="display"></table>
      </fieldset>
       
    </div>
    <div id="admin-tabs-2"> 
      <fieldset>
        <legend><?=rs.admin.inputTitle2?></legend>
        <div> 
          <label for="branchname"><?=rs.business.Branch?>:</label> 
          <input type="text" name="branchname" id="branchname" /> 
        </div> 
        <div> 
          <label for="branchaddress"><?=rs.business.Address?>:</label> 
          <input type="text" name="branchaddress" id="branchaddress" /> 
        </div> 
        <div> 
          <label for="branchtel"><?=rs.business.TelNo?>:</label> 
          <input type="text" name="branchtel" id="branchtel" /> 
        </div> 
        <div> 
          <label for="branchfax"><?=rs.business.FaxNo?>:</label> 
          <input type="text" name="branchfax" id="branchfax" /> 
        </div> 
        <div> 
          <label for="branchemail"><?=rs.business.Email?>:</label> 
          <input type="text" name="branchemail" id="branchemail" /> 
        </div> 
        <div> 
          <label for="branchcontact"><?=rs.business.Contact?>:</label> 
          <input type="text" name="branchcontact" id="branchcontact" /> 
        </div> 
       
        <button id='updateBranch' class="btn" onclick="submitAddBranch()"><?=rs.common.addBtnTitle?></button>
        <button id='clearUpdateBranch' class="btn" onclick="clearUpdateBranch()"><?=rs.common.clearBtnTitle?></button>
      </fieldset>

      <fieldset>
        <legend><?=rs.admin.outputTitle2?></legend>
        <table id="admin-branch-list" class="display"></table>
      </fieldset>
           
    </div>
    
  </div> <!-- admin-tabs -->
  
</div> <!-- admin div -->

</div> <!-- content-->

<div style="font:0px/0px sans-serif;clear:both;display:block"></div><!--here-->
</div> <!-- container-->

<div id="footer" class="footer bc">
<p>Cloud Information System</p>
</div>  

<!--====================== JAVASCRIPT CODE      ====================== -->

  <script language="javascript" type="text/jscript">
  <!--  
  //log("Entering define variables...");
  //Global variabes
  var handle = {};
  
  var MESSAGETXT = JSON.parse($("input[name='message']").first().val());
  var STATUS = JSON.parse($("input[name='status']").first().val());
  var menuitems = JSON.parse($("input[name='menuitems']").first().val());
  
  //====================== ON START FUNCTION =================================
  $(document).ready(function(){
    log("Entering ready...");
    
    // Initial menu etc.,
    initLayout();
    
    // Assign handle function to each menu item
    initHandle();
    
    //Hide all content page at the begining
    hideAllContent();

    // initialize all controls
    initControls();
    
    // and other init functions
    initFunctions();
    
    // Display the home page
    displayHomePage("Welcome to Cloud Logistics System! ");
    
  });

  //====================== COMMON FUNCTION =================================

  
  -->
  </script>
</body>
  
</html>", 
            "type": "html"
        }, 
        {
            "id": "e5ccfc92-15bd-4e33-ab93-169ee7972b1e", 
            "name": "global-constants", 
            "source": "//Constants Relative
GLOBAL.namespace("Constants");

GLOBAL.Constants.APP_URL = 'https://script.google.com/macros/s/AKfycby9qc2P6sXqd3WWrUEJE8vcApg9LTrvYX4VMQGNebw/dev';

GLOBAL.Constants.REC_ACTIVE = 0;
GLOBAL.Constants.REC_EXPIRED = 1;

GLOBAL.Constants.LOG_FORMAT = "[INFO] USER:[%s] => %s";
GLOBAL.Constants.ERR_LOG_FORMAT = "[ERROR] USER:[%s] => %s";

GLOBAL.Constants.RET_OK = 0;
GLOBAL.Constants.RET_ERR = -1;


//---------- STATUS DEFINITION -------------
// Order's status
GLOBAL.Constants.STATUS = {};
GLOBAL.Constants.STATUS.NEW = {title:"New", value:0};
GLOBAL.Constants.STATUS.IN_PROGRESS =  {title:"In Progress", value:1};
GLOBAL.Constants.STATUS.PURCHASED = {title:"Purchased", value:2};
GLOBAL.Constants.STATUS.DELIVERED = {title:"Delivered", value:3};
GLOBAL.Constants.STATUS.NONE = {title:"", value:-1};
GLOBAL.Constants.STATUS.ALL = {title:"All", value:99};


//---------- TABLE TYPE -------------
GLOBAL.Constants.ITEM_TYPE = "Item";
GLOBAL.Constants.ITEMTYPE_TYPE = "ItemType";
GLOBAL.Constants.ORDER_TYPE = "Order";
GLOBAL.Constants.ORDER_DETAIL_TYPE = "OrderDetail";
GLOBAL.Constants.AGG_ORDER_TYPE = "AggregatedOrder";
GLOBAL.Constants.DISTRIBUTE_TYPE = "DistributeDetail";
GLOBAL.Constants.DISTRMASTER_TYPE = "DistrMaster";
GLOBAL.Constants.PURCHASE_TYPE = "Purchase";
GLOBAL.Constants.PD_TYPE = "PurchaseDetail";
GLOBAL.Constants.BRANCH_TYPE = "Branch";
GLOBAL.Constants.ITEM_SUPPLIER_TYPE = "ItemSupplier";
GLOBAL.Constants.SUPPLIER_TYPE = "Supplier";
GLOBAL.Constants.STAFF_TYPE = "Staff";
GLOBAL.Constants.BRANCH_STAFF_TYPE = "BranchStaff";


GLOBAL.Constants.STOCK_IN = 0;
GLOBAL.Constants.STOCK_OUT = 1;
//GLOBAL.Constants.STOCK_DIRECTION = new Array("IN", "OUT");  // Internationalized


//---------- OTHERS --------------------------
GLOBAL.Constants.CURRENCY_SYMBOL = "£";
GLOBAL.Constants.TIME_FMT = "yyyy/MM/dd";
", 
            "type": "server_js"
        }, 
        {
            "id": "44472d19-b728-444e-9bb0-6232dd32039d", 
            "name": "global-util", 
            "source": "//Constants Relative
GLOBAL.namespace("Util");

GLOBAL.Util.debugLog = function(msg) {
  Logger.log("[DEBUG]" + msg);
}

GLOBAL.Util.infoLog = function(msg) {
  Logger.log(GLOBAL.Constants.LOG_FORMAT,GLOBAL.Util.getCurrentUser(), msg);
}

GLOBAL.Util.errorLog = function(msg) {
  Logger.log(GLOBAL.Constants.ERR_LOG_FORMAT,GLOBAL.Util.getCurrentUser(), msg);
}

GLOBAL.Util.getCurrentTime = function(){
  var currentTime = new Date();
  return currentTime.getTime();
}

GLOBAL.Util.getCurrentUser = function() {
  return Session.getActiveUser().getEmail();
  //return "SongXin";
}

GLOBAL.Util.getCurrentTimeString = function(){
  var currentTime = new Date();
  return JSON.stringify(currentTime);
}

GLOBAL.Util.getCurrentUserEmail = function() {
  return Session.getActiveUser().getEmail();
}

//string must not be null, empty, or just space or LR/CR etc.
GLOBAL.Util.isValidString = function(str) {

  if (!str) return false;
  if (str === undefined) return false;
  
  if (str.replace(/(^s*)|(s*$)/g, "").length ==0) 
  { 
    return false; 
  } 
  return true;
}

//whether a object is {} or null.
GLOBAL.Util.isEmpty = function(obj) {

  for (var name in obj) {
    return false;
  }
  return true;
}


GLOBAL.Util.showPara = function (obj) {
  
  for (var item in obj) {
    if (item == "funcName") continue;
    GLOBAL.Util.debugLog("["+obj.funcName+"] -------- parameter ["+item+"] is --------");
    GLOBAL.Util.displayObject(obj[item]);
    
  }
  
}
//----------------------------------------------------
// INPUT: Object that needs to be displayed
// OUTPUT: Key-Value list
//----------------------------------------------------
GLOBAL.Util.displayObject = function (obj) {

  var type = GLOBAL.Util.toType(obj);
  
  GLOBAL.Util.debugLog("---------------   START   ---------------");
  GLOBAL.Util.debugLog("-->type is " + type + "");
  GLOBAL.Util.debugLog("-->content is " + JSON.stringify(obj) + "");
  GLOBAL.Util.debugLog("---------------   End     ---------------");

}

GLOBAL.Util.toType = function(obj) {
  return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  //return Object.prototype.toString.call(obj);
}
//----------------------------------------------------
// INPUT: Date as MillSec
// OUTPUT: String of that Date with format
//----------------------------------------------------
GLOBAL.Util.formatDateByTime = function(time, fmt) {
  
  if (time == 0 || time == null || time === undefined || isNaN(time)) {
    return "";
  }
  
  //GLOBAL.Util.debugLog("formatDateByTime: " + time + " with " + fmt);
  
  var dd = new Date(time);
  
  var o = {
    "M+" : dd.getMonth()+1, //month
    "d+" : dd.getDate(),    //day
    "h+" : dd.getHours(),   //hour
    "m+" : dd.getMinutes(), //minute
    "s+" : dd.getSeconds(), //second
    "q+" : Math.floor((dd.getMonth()+3)/3),  //quarter
    "S" : dd.getMilliseconds() //millisecond
  }
  
  if(/(y+)/.test(fmt)){
    fmt=fmt.replace(RegExp.$1,(dd.getFullYear()+"").substr(4 - RegExp.$1.length));
  }
  
  for(var k in o) {
    if(new RegExp("("+ k +")").test(fmt)) {
      fmt = fmt.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] : ("00"+ o[k]).substr((""+ o[k]).length));
    }
  }
  
  return fmt;
}


/*
GLOBAL.Util.convert_old = function(fileId) {
  GLOBAL.Util.authorize();
  var key = "AIzaSyDBKvH3jYGl_SROPhd0TFdD27ZwrcDaWo0"; // <-- developer key, usually get it from https://code.google.com/apis/console
  var params = {method:"post"
                ,oAuthServiceName: "drive"
                ,oAuthUseToken: "always"
                //,contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
               };
  
  var uploadRequest = UrlFetchApp.fetch("https://www.googleapis.com/drive/v2/files/"+fileId+"/copy?convert=true&key="+key, params);
  GLOBAL.Util.debugLog("uploadRequest has been fetched! " + uploadRequest.getContentText());
  var uploadResponse = Utilities.jsonParse(uploadRequest.getContentText());
  return DocsList.getFileById(uploadResponse.id);
}

GLOBAL.Util.authorize = function() {
  var oauthConfig = UrlFetchApp.addOAuthService("drive");
  var scope = "https://www.googleapis.com/auth/drive";
  oauthConfig.setConsumerKey("anonymous");
  oauthConfig.setConsumerSecret("anonymous");
  oauthConfig.setRequestTokenUrl("https://www.google.com/accounts/OAuthGetRequestToken?scope="+scope);
  oauthConfig.setAuthorizationUrl("https://accounts.google.com/OAuthAuthorizeToken");    
  oauthConfig.setAccessTokenUrl("https://www.google.com/accounts/OAuthGetAccessToken");  
}
*/
/**
 * Convert from Excel data to Spreadsheet
 * @param {Blob} excelFile the excel blob data.
 * @param {String} filename file name on uploading drive
 * @return {Spreadsheet} spreadsheet instance.
 **/
/*GLOBAL.Util.convert2Spreadsheet = function (excelFile, filename) {

  var key = "AIzaSyDBKvH3jYGl_SROPhd0TFdD27ZwrcDaWo0"; // <-- developer key, usually get it from https://code.google.com/apis/console
  var oauthConfig = UrlFetchApp.addOAuthService('drive');
  
  //Create oauth config for drive api
  var scope = 'https://www.googleapis.com/auth/drive';
  oauthConfig.setConsumerKey('anonymous');
  oauthConfig.setConsumerSecret('anonymous');
  oauthConfig.setRequestTokenUrl('https://www.google.com/accounts/OAuthGetRequestToken?scope='+scope);
  oauthConfig.setAuthorizationUrl('https://accounts.google.com/OAuthAuthorizeToken');    
  oauthConfig.setAccessTokenUrl('https://www.google.com/accounts/OAuthGetAccessToken');  
  
  var uploadParams = {
    method:'post',
    oAuthServiceName: 'drive',
    oAuthUseToken: 'always',
    contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    contentLength: excelFile.getBytes().length,
    payload: excelFile.getBytes()
  };
  
  //insert to root folder of google drive, and convert to Sheets
  var uploadResponse = UrlFetchApp.fetch('https://www.googleapis.com/upload/drive/v2/files/?uploadType=media&convert=true&key='+key, uploadParams);
    
  //this response body format is json , and it has file id. Please see https://developers.google.com/drive/v2/reference/files#resource
  var fileDataResponse = JSON.parse(uploadResponse.getContentText());
 
  //Update filename
  var updateParams = {
    method:'put',
    oAuthServiceName: 'drive',
    oAuthUseToken: 'always',
    contentType: 'application/json',
    payload: JSON.stringify({ title: filename })
  };
  
  UrlFetchApp.fetch('https://www.googleapis.com/drive/v2/files/'+fileDataResponse.id+'?key='+key, updateParams);
  
  return SpreadsheetApp.openById(fileDataResponse.id);
};*/

GLOBAL.Util.getFnName = function(callee){
  var _callee = callee.toString().replace(/[\s\?]*/g,""),
  comb = _callee.length >= 50 ? 50 :_callee.length;
  _callee = _callee.substring(0,comb);
  var name = _callee.match(/^function([^\(]+?)\(/);
  if(name && name[1]){
    return name[1];
  }
  var caller = callee.caller,
  _caller = caller.toString().replace(/[\s\?]*/g,"");
  var last = _caller.indexOf(_callee),
  str = _caller.substring(last-30,last);
  name = str.match(/var([^\=]+?)\=/);
  if(name && name[1]){
    return name[1];
  }
  return "anonymous"
};

GLOBAL.Util.getStatusTitleByValue = function(statusId) {
  if (statusId == NaN || statusId == null || statusId == undefined) return "";
  for (var s in GLOBAL.Constants.STATUS) {
    if (statusId == GLOBAL.Constants.STATUS[s].value) {
      return GLOBAL.Constants.STATUS[s].title;
      break;
    }
  }
  return "";
};

GLOBAL.Util.getLocalString = function() {
  return MESSAGETXT_EN;
}

GLOBAL.Util.trimString = function(str,L) {
    var result = '',
        strlen = str.length, // 字符串长度
        chrlen = str.replace(/[^\x00-\xff]/g,'**').length; // 字节长度

    if(chrlen<=L){return str;}
    
    for(var i=0,j=0;i<strlen;i++){
        var chr = str.charAt(i);
        if(/[\x00-\xff]/.test(chr)){
            j++; // ascii码为0-255，一个字符就是一个字节的长度
        }else{
            j+=2; // ascii码为0-255以外，一个字符就是两个字节的长度
        }
        if(j<=L){ // 当加上当前字符以后，如果总字节长度小于等于L，则将当前字符真实的+在result后
            result += chr;
        }else{ // 反之则说明result已经是不拆分字符的情况下最接近L的值了，直接返回
            return result + "...";
        }
    }
}
", 
            "type": "server_js"
        }, 
        {
            "id": "24afdaea-1d17-4ce2-b0a5-75960bd1c89a", 
            "name": "order", 
            "source": "/**
Order module containing all the definition 
and methods that are used by Order module (including order log)

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-03-04
**/

//============== Server End Code ========================//
var Order = {                    //create a namespace

  prepareOrder : function() {
    var result = {};
  // should be a two-dimensional array. 
    result.items = Model.prepareItems();
    result.itemTypes = Model.getItemTypes();
      
    return result;
  },
//--------------------------------------------------
// save the items from the basket as order record
// 2015/05/18 adding cust_itemID from uploaded file 
//--------------------------------------------------
  placeOrder : function (params) {
  
    GLOBAL.Util.infoLog("Entering Order#placeOrder()...");
    GLOBAL.Util.showPara({
      funcName:"Order#placeOrder",
      params:params
    });
    
    //create a order
    var branchID = GLOBAL.Security.getCurrentBranchByLogin(GLOBAL.Util.getCurrentUser()).branchID;
    var currentTime = GLOBAL.Util.getCurrentTime();
    
    var lock = LockService.getPublicLock();
    lock.waitLock(30000);
    
    try{
      //branchID, deliveryDate, placeStaffID
      var order = Model.createOrder(branchID,"",GLOBAL.Security.getCurrentStaffID());
      var details = new Array();
      
      GLOBAL.Util.displayObject(order);
      
      //saving all details and making them belonging to this order
      for (var i=0;i<params.length;i++){
        //var itemID = parseInt(params[i].itemID);  // ID should be number, representing for the record_id of item table
        var itemID = parseInt(params[i].id);
        
        var item = Model.getItemByID(itemID);
        var detail = {};
        detail.detailID = i;
        detail.orderID = order.record_id;
        detail.item = item;
        detail.itemQty = params[i].qty;
        detail.itemPrice = Model.getSupplierInfoByItemID(itemID).guidePrice;
        detail.supplier = params[i].supplier;
        detail.valid = true;
        details.push(detail);
      }
      order.details = details;
      Model.updateOrder(order);
      
    }finally { // make sure it gets released even if we blow up
      lock.releaseLock();
    }
    
    //sending an email to the staff who place the order
    this.sendEmail();
    
    return order;
  },

/**
Update the order which data comes from OrderLog
 if there is no detail, still remain the order information

@method updateOrder
@param orderID {string} identify the order that will be updated 
@param params {Array} include the data that will be updated 
@return  {Object} order that has been updated
*/
  updateOrder : function (orderID, params) {
  
    GLOBAL.Util.infoLog("Entering Order#updateOrder()..." + orderID + ":" +params);
    GLOBAL.Util.displayObject(params);
    
    
    var currentTime = GLOBAL.Util.getCurrentTime();
    
    var lock = LockService.getPublicLock();

    lock.waitLock(30000);
    try{
      
      var condition = {record_id:orderID};
      var orders = Model.getOrdersByKey(condition);
      
      if (orders.length != 1) {
        var msg = "there is no or more than one orders with id " + orderID;
        GLOBAL.Util.errorLog(msg);
        throw new BusinessException(msg);
      }
      
      GLOBAL.Util.displayObject(orders);
      
      var details = orders[0].details;
      var hit = false;
      // updating the detail with params
      for (var idx=0,max=details.length; idx<max; idx++) {
        var detail = details[idx];
        hit = false;
        for (var idp=0; idp<params.length; idp++) {
          if (detail.item.record_id == params[idp].itemID) {
            detail.itemQty = params[idp].itemQty;
            hit = true;
            break;
          }
        }

        if (!hit) {
          //This detail has been deleted.
          detail.valid = false;
        }
      }
      
      //update the order
      Model.updateOrder(orders[0]);

    }finally { // make sure it gets released even if we blow up
      lock.releaseLock();
    }
    
    
    //sending an email to the staff who place the order
    this.sendEmail();
    
    return orders[0];
  },

//----------------------------------------------------
// Send an email to branch manager and purchase manager
//----------------------------------------------------
  sendEmail : function () {
    GLOBAL.Util.infoLog("Entering order#sendEmail()...");
    
    var subject = "Confirmation of Order";
    var message = "An order has been placed and sent to Purchasing Manager.";
    message += "<br /> You can find the latest order information in following url:";
    message += "<br /> " + GLOBAL.Constants.APP_URL + "?view=orderlog";
    
    //MailApp.sendEmail(GLOBAL.Util.getCurrentUserEmail(), subject, message);  
  },


//----------------------------------------------------
// get the latest order the current user placed and display it 
// in the orderlog view.
//----------------------------------------------------
  getLatestOrder : function() {
  
    GLOBAL.Util.infoLog("Entering order#getLatestOrder()...")
    
    var branchID = GLOBAL.Security.getCurrentBranchByLogin(GLOBAL.Util.getCurrentUser()).branchID;
    var branches = Model.getBranches();
    var itemTypes = Model.getItemTypes();
    
    var order = {};
    
    var latestOrder = Model.getLatestOrder(branchID);     
    GLOBAL.Util.debugLog("The id of the latest order is " + latestOrder.record_id);

    //Mapping the necessary information
    order.record_id = latestOrder.record_id;
    order.branchName = branches[branchID].name;
    order.placeDate = GLOBAL.Util.formatDateByTime(latestOrder.placeDate, "yyyy/MM/dd hh:mm:ss");
    order.statusID = latestOrder.statusID;
    order.statusText = GLOBAL.Util.getStatusTitleByValue(latestOrder.statusID);
    
    //setting detail information
    order.details = latestOrder.details;
    //GLOBAL.Util.debugLog("[getLatestOrder] before setting, the details are ");
    //GLOBAL.Util.displayObject(order.details);
    for(var idx=0,max=order.details.length;idx<max;idx++){
      var detail = order.details[idx];
      detail.itemType = itemTypes[detail.item.itemTypeCode];
      detail.description = detail.item.name + " " + detail.item.package;
    }
    //GLOBAL.Util.debugLog("[getLatestOrder] after setting, the details are ");
    //GLOBAL.Util.displayObject(order.details);
    
    //GLOBAL.Util.displayObject(order);
    return order;
  },
  
  end : function() {
    GLOBAL.Util.infoLog("Entering Order#end()...");
  }
  
};
", 
            "type": "server_js"
        }, 
        {
            "id": "daac610b-419d-4780-acac-2678850f7a2d", 
            "name": "global-data", 
            "source": "/**
Data module containing all the constant definition 
and methods that manipulating data via Scriptdb

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-02-03
**/
GLOBAL.namespace("Data");


/**
delete the whole database. maybe time-consuming if there are 
many data existed

@method GLOBAL.Data.deleteAll
@return {null}
**/
GLOBAL.Data.deleteAll = function() {
  
};

/**
save item into database.  

@method GLOBAL.Data.saveDataItem
@param type {String} the type of data you want to save
@param [content] {Object} A map containing the content that you want to save
@example
   1. create an object that contains the contents;
   2. GLOBAL.Data.saveDataItem("data type", contents)
@return {Object} The object that just has been saved
**/
GLOBAL.Data.saveDataItem = function(type, content) {
  
  GLOBAL.Util.infoLog("Entering saveDataItem. type:" + type);
  
  var data = {};
  data.collection = type;
  data.data = content;
  
  // to set record_id, get the count of this type of data
  var count = GLOBAL.Data.getCount(type);
  
  data.data.record_id = count;
  // set other necessary information
  data.data.activeFlg = GLOBAL.Constants.REC_ACTIVE;
  data.data.modifiedPerson = GLOBAL.Util.getCurrentUser();
  data.data.modifiedDate = GLOBAL.Util.getCurrentTime();
  
  // store the data
  var res = GLOBAL.Data.insert(data);
  
  if (res.code == GLOBAL.Constants.RET_OK) {
    return res.data;
  } else {
    var msg = "There is an error occurred when insert data" + res.message;
    GLOBAL.Util.errorLog(msg);
    throw new LogicException(msg);    
  }
};

/**
update item into database.  
@method GLOBAL.Data.updateDataItem
@param obj {Object} the object that want to be updated
@example
@return Map the item that just be updated
**/
GLOBAL.Data.updateDataItem = function(obj, query) {
  GLOBAL.Util.infoLog("Entering updateDataItem: ...");
  GLOBAL.Util.showPara({
    funcName:"updateDataItem",
    "obj":obj,
    "query":query
  });
  
  var upd = {};
  upd.collection = obj.type;
  upd.id = obj.id;
  
  if (!query && obj.hasOwnProperty("record_id")) {  // record_id is the common key for all tables
    upd.query = {"record_id" : obj.record_id};
  }else if (query) {
    upd.query = query;
  }
  upd.data = obj;
  
  var res = GLOBAL.Data.update(upd);
  if (res.code == GLOBAL.Constants.RET_OK) {
    return res.data;
  } else {
    var msg = "There is an error occurred when update data: " + res.message;
    GLOBAL.Util.errorLog(msg);
    throw new LogicException(msg);    
  }
  
}

/**
retrieve data from database by condition.  

@method GLOBAL.Data.getDataItems
@param [condition] {Object} A map containing the content that you want to save
@example
@return [results] {Array} An array the item depend on the condition
**/
GLOBAL.Data.getDataItems = function(condition) {
  //GLOBAL.Util.infoLog("Entering GLOBAL.Data.getDataItems:" + condition.type);
  
  //add ACTIVE flag
  condition.activeFlg = GLOBAL.Constants.REC_ACTIVE;
  
  return GLOBAL.Data.getAllDataItems(condition);  
}

// "condition" includes following:
//   => type:         represents the table/collection which should be feteched
//   => record_id:    have to be sure that is a number
//   => sort:         sort conditions, which should follow the "%s" parameter
//   => limit:        a number showing how many records should be retrieved 
// NOTE: only the real data will be returned (there is no status code or error message, etc.)
// If there is no data, just return null
GLOBAL.Data.getAllDataItems = function(condition) {
  GLOBAL.Util.infoLog("Entering GLOBAL.Data.getAllDataItems...");
  GLOBAL.Util.showPara({
    funcName:"getAllDataItems",
    "condition":condition
  });
  var results = new Array();
  
  var query = {};
  query.collection = condition.type;

  var queryString = {};
  var sort = {};
  var limit = 0;
  
  // Setting the query condition, which is attached after "&q="
  // as well as sort (after "&s=") and limit (after "&l=")
  for (var key in condition) {
    if (key == "type") continue;   // type has been already used as collection
    if (key == "record_id") {
      queryString[key] = parseInt(condition[key]);
      continue;
    }
    if (key == "sort") {
      sort = condition.sort;
      continue;
    }
    if (key == "limit") {
      limit = condition.limit;
      continue;
    }
    
    //otherwise, all attribues should be one of the query conditon
    queryString[key] = condition[key];
  }
  query.queryString = queryString;  
    
  // fetch data
  var records = GLOBAL.Data.fetchData(query, sort, limit);
  for (var idx in records.data) {
    results.push(records.data[idx]);
  }

  return results;  
}



/**
clear the data that is in the table (type is appointed).  

@method GLOBAL.Data.clearTableData
@param type {String} the type of data you want to save
@example
@return {ScriptDbResult} The object that just has been saved
**/
GLOBAL.Data.clearTableData = function(type) {
  
  GLOBAL.Util.infoLog("Entering clearTableData. type:" + type);
  
  var q = {};
  q.collection = type;
  q.data = null;
  
  //Since no other information, this action will delete all these type data
  GLOBAL.Data.update(q);

};

/**
initialising data for program.  

@method GLOBAL.Data.initializeData
@example
@return {ScriptDbResult} The object that just has been saved
**/
GLOBAL.Data.initializeData = function() {
  

};

GLOBAL.Data.checkRespCode = function (responseCode) {
  
  var code = "";
  var message = "";
  // Creating response object
  switch(responseCode){
    case 200:
      code = 0;
      message = "OK";
      break;
    case 201:
      code = 0;
      message = "Object created.";
      break;
    case 400:
      code = -1;
      message = "Something wrong in query string or request text.";
      break;
    case 401:
      code = -1;
      message = "No user credentials could be found or the credentials found are not authorized to perform the requested action.";
      break;
    case 403:
      code = -1;
      message = "The server is refusing access to a resource.";
      break;
    case 404:
      code = -1;
      message = "The resource being requested does not exist.";
      break;
    case 405:
      code = -1;
      message = "The HTTP method (e.g. GET or POST) is not supported for the resource being requested.";
      break;
    default:
      code = -1;
      message = "Unknown error.";
      break;
  }
  
  return {code:code, message:message};
  
}
", 
            "type": "server_js"
        }, 
        {
            "id": "271e5131-0ed5-4432-a02b-664f8c187838", 
            "name": "test-DATABASE", 
            "source": "function test_data_saveDataItem() {
  //Group information
  var order = {
    type: "Order",
    branchID: "1",
    placeDate: GLOBAL.Util.getCurrentTime(),
    preferredDate: GLOBAL.Util.getCurrentTime(),
    deliveryDate: GLOBAL.Util.getCurrentTime(),
    placeStaffID: "2",
    purchaseID: -1,
    statusID: 0
  }
  
  GLOBAL.Data.saveDataItem("Order", order);
}

function test_data_updateDataItem() {
  //Group information
  var order = {
    type: "OrderTest",
    branchID: "10",
    placeDate: GLOBAL.Util.getCurrentTime(),
    preferredDate: GLOBAL.Util.getCurrentTime(),
    deliveryDate: GLOBAL.Util.getCurrentTime(),
    placeStaffID: "10",
    purchaseID: -1,
    statusID: 0
  }
  
  var res = GLOBAL.Data.saveDataItem("OrderTest", order);
  GLOBAL.Util.displayObject(res);
  
  order.id = res.id;
  order.branchID = "12"
  GLOBAL.Data.updateDataItem(order);
}

function test_clearTableData() {
  var testItem1 = {column1:"0", column2:1};
  GLOBAL.Data.saveDataItem("testItem", testItem1);
  var testItem2 = {column1:"1", column2:32};
  GLOBAL.Data.saveDataItem("testItem", testItem2);
  
  GLOBAL.Data.clearTableData("testItem");
  
  GLOBAL.Data.getLastError();
}


function test_getLatestOrderDetail() {
  Order.getLatestOrderDetail();
}

function test_getPurchases() {
  Purchase.getPurchases();
}


//---------------------------------
// INSERTING TEST DATA 
//---------------------------------
function test_init_all_data() {
  test_insert_item_data();
  test_insert_item_supplier_data();
  test_insert_supplier_data();

  test_insert_branch_data();
  test_insert_staff_data();
  test_insert_branch_staff_data();
}

function test_insert_item_data() {
  
  var items = new Array();
  
  GLOBAL.Data.clearTableData(GLOBAL.Constants.ITEM_TYPE);
  // 0=frame, 1=platform
  items.push({name:"frame1", code:"FRM001", package:"13x13 inch", unit:"1", description:"Frame model 1", itemType:"0", stockPrice:7.85, stockQty:20, safetyQty:10, salePrice:22.33});
  items.push({name:"frame2", code:"FRM002", package:"14x15 inch", unit:"1", description:"Frame model 2", itemType:"0", stockPrice:18.85, stockQty:20, safetyQty:10, salePrice:22.33});
  
  items.push({name:"platform1", code:"PFM001", package:"20x25 inch", unit:"1", description:"Platform P001", itemType:"1", stockPrice:18.85, stockQty:20, safetyQty:10, salePrice:22.33});
  items.push({name:"platform2", code:"PFM002", package:"20x25 inch", unit:"1", description:"Platform P002", itemType:"1", stockPrice:19.85, stockQty:20, safetyQty:10, salePrice:32.00});
  
  items.push({name:"component1", code:"CPN001", package:"20x25 inch", unit:"1", description:"Component C001", itemType:"2", stockPrice:19.85, stockQty:20, safetyQty:10, salePrice:32.00});
  items.push({name:"component2", code:"CPN002", package:"20x25 inch", unit:"1", description:"Component C002", itemType:"2", stockPrice:19.85, stockQty:20, safetyQty:10, salePrice:32.00});
  
  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEM_TYPE, items[idx]);
  }
  
  //setting the item type
  GLOBAL.Data.clearTableData(GLOBAL.Constants.ITEMTYPE_TYPE);

  var itemtypes = new Array();
  itemtypes.push({itemTypeCode:"0", itemTypeName:"frame"});  
  itemtypes.push({itemTypeCode:"1", itemTypeName:"platform"});  
  itemtypes.push({itemTypeCode:"2", itemTypeName:"component"});  
  for (var idx=0; idx<itemtypes.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEMTYPE_TYPE, itemtypes[idx]);
  }
  
}

function test_insert_branch_data() {
  
  var items = new Array();
  GLOBAL.Data.clearTableData(GLOBAL.Constants.BRANCH_TYPE);
  
  items.push({name:"Birmingham",  telno:"03-1234-5678"});
  items.push({name:"Leicester",  telno:"03-1234-5678"});
  items.push({name:"Manchester",  telno:"03-1234-5678"});
  items.push({name:"Nottingham",  telno:"03-1234-5678"});
  items.push({name:"Coventry",  telno:"03-1234-5678"});
  items.push({name:"Warehouse",  telno:"03-1234-5678"});

  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.BRANCH_TYPE, items[idx]);
  }

}

function test_insert_staff_data() {
  
  var items = new Array();
  GLOBAL.Data.clearTableData(GLOBAL.Constants.STAFF_TYPE);
  
  items.push({loginName:"songxin1973@gmail.com", firstName:"Xin", lastName:"Song", email:"songxin1973@gmail.com",telno:"03-1234-5678"});
  items.push({loginName:"xin@cloud-i.co.uk", firstName:"User", lastName:"Admin", email:"xin@cloud-i.co.uk",telno:"03-1234-5678"});

  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.STAFF_TYPE, items[idx]);
  }

}

function test_insert_branch_staff_data() {
  
  var items = new Array();
  GLOBAL.Data.clearTableData(GLOBAL.Constants.BRANCH_STAFF_TYPE);
  
  items.push({staffID:0, branchID:0});
  items.push({staffID:1, branchID:4});

  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.BRANCH_STAFF_TYPE, items[idx]);
  }

}

function test_insert_item_supplier_data() {
  
  var items = new Array();
  
  GLOBAL.Data.clearTableData(GLOBAL.Constants.ITEM_SUPPLIER_TYPE);
  
  items.push({itemID:0, supplierID:0, guidePrice:18.85, priority:0});
  items.push({itemID:1, supplierID:0, guidePrice:20.1, priority:0});
  
  items.push({itemID:2, supplierID:1, guidePrice:17.96, priority:0});
  items.push({itemID:3, supplierID:1, guidePrice:5.33, priority:0});

  items.push({itemID:4, supplierID:2, guidePrice:76.48, priority:0});
  items.push({itemID:5, supplierID:3, guidePrice:72.43, priority:0});
  
  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEM_SUPPLIER_TYPE, items[idx]);
  }

}

function test_insert_supplier_data() {
  
  var items = new Array();
  
  GLOBAL.Data.clearTableData(GLOBAL.Constants.SUPPLIER_TYPE);
  
  items.push({name:"SupplierA", address:"Birmingham New Street", telno:"03-1234-5678", faxno:"03-1234-5678", email:"info@suplliera.com", contact:"Mr.Smith"});
  items.push({name:"SupplierB", address:"Coventry New Union", telno:"024-234-5678", faxno:"024-234-5678", email:"info@supllierb.com", contact:"Mr.Smith"});
  items.push({name:"SupplierC", address:"London Euston", telno:"05-7777-5454", faxno:"05-7777-5454", email:"info@supllierc.com", contact:"Mr.Smith"});
  items.push({name:"SupplierD", address:"Beijing China", telno:"06-2222-5566", faxno:"06-2222-5566", email:"info@supllierd.com", contact:"Mr.Smith"});

  
  for (var idx=0; idx<items.length; idx++) {
    GLOBAL.Data.saveDataItem(GLOBAL.Constants.SUPPLIER_TYPE, items[idx]);
  }

}


//======= FOR MongoDB ===========
function testUpdateSingleData() {  //With ID
  
  var res;
  var upd = {};
  
  var dataid = 19;
  
  upd.collection = "testItems";
  upd.data = {
    itemID : dataid,
    name : "item" + dataid,
    description:"item No." + dataid,
    activeFlg : 0
  };

  res = GLOBAL.Data.insert(upd);  
  
  upd.id = res.id;  //save the _id
  upd.data.description = "item No." + dataid + " changed";

  upd.data.details = {
    name : "details" + dataid,
    description : "desc " + dataid,
    price : 23.32
  };
  
  res = GLOBAL.Data.update(upd);
  GLOBAL.Util.displayObject(res);

}

function testUpdateSingleData02() { //without id
  
  var itemID = 19;
  var upd = {};
  upd.type = "testItems";
  upd.name = "item " + itemID + " (changed 3)";
  upd.desc = "desc of item " + itemID + " (changed 3)";
  var details = new Array();
  details.push({
    name : "details " + itemID  + " (changed 3)",
    description : "desc " + itemID + " (changed 3)",
    price : 23.33
  });
  details.push({
    name : "details2 " + itemID  + " (changed 3)",
    description : "desc2 " + itemID + " (changed 3)",
    price : 24.33
  });
  
  upd.details = details;
  var query = {itemID:itemID};
  
  var res = GLOBAL.Data.updateDataItem(upd, query);
  GLOBAL.Util.displayObject(res);
  
  //Check the data just updated
  var condition = {};
  condition.type = "testItems";
  condition.itemID = itemID;
  
  var res2 = GLOBAL.Data.getDataItems(condition);
  GLOBAL.Util.displayObject(res2[0]);
  
}
function testUpdateMultipleData01() {
  
  var res;
  var upd = {};
  
  var dataid = "19";
  
  upd.collection = "Items";
  upd.query = {"itemID":dataid}
  upd.data = {
    description2 : "item No."+dataid+" changed again!!"
  }
  
  res = GLOBAL.Data.update(upd);
  GLOBAL.Util.displayObject(res);

}

function testDeleteData() {
  
  var collection = "Items";
  var data = {
    itemID:"6",
    name:"item6",
    description:"item No.6"
  }
  
  var res2 = GLOBAL.Data.updateData({collection:collection, data:data});  
  
}

function testGetLastError() {
  
  GLOBAL.Data.getLastError();  
  
}


function testFind() {
  var res2 = GLOBAL.Data.find("Items", "54a57af4e4b09807429a46dd");  
  GLOBAL.Util.displayObject(res2.data);  
}

function testRemove() {
  var res2 = GLOBAL.Data.remove("Items", "54a57af4e4b09807429a46dd");  
  GLOBAL.Util.displayObject(res2);  
}

function testFetchData() {
  
  // Invalid parameter
  var query = null;
  var res1 = GLOBAL.Data.fetchData(query);
  GLOBAL.Util.debugLog("==================res1 is as follow:==================");
  GLOBAL.Util.displayObject(res1);

  // Whole collection
  query = {};
  query.collection = "Item";
  var res2 = GLOBAL.Data.fetchData(query);  
  //GLOBAL.Util.debugLog("The whole res2 contains " +res2.data.length + " records!");
  GLOBAL.Util.debugLog("==================res2 is as follow:==================");
  GLOBAL.Util.displayObject(res2.data[0]);
  
  // fetch as condition
  query = {};
  query.collection = "Item";
  query.queryString = {"record_id":{$in:[5]}};
  var res3 = GLOBAL.Data.fetchData(query);  
  //GLOBAL.Util.debugLog("The whole res3 contains " +res3.data.length + " records!");
  GLOBAL.Util.debugLog("==================res3 is as follow:==================");
  GLOBAL.Util.displayObject(res3.data);
   
}

function testGetCount() {
  
  var type = "Supplier";
  var res2 = GLOBAL.Data.getCount(type);  
  GLOBAL.Util.debugLog("[testGetCount]:There are " + res2 + " records of ["+type+"]!");
   
}

function testInsertSingleData() {
  
  var collection = "Items";
  var data = {
    itemID:"1",
    name:"item 1",
    description:"Item No.1",
    stock: "20",
    price: "23.34"
  }
  
  var res2 = GLOBAL.Data.insert({collection:collection, data:data});  
  
}", 
            "type": "server_js"
        }, 
        {
            "id": "680fe8a6-e271-4e22-8fb8-d4fc38fdaa7d", 
            "name": "global-security", 
            "source": "/**
Name: security
In this module, the information of organization including staff and branch, as well as priority will be set.
*/
//Constants Relative
GLOBAL.namespace("Security");

//========================= SETTING STAFF =============================
//Branch
//Staff

//========================= SETTING MENU ==============================

//==== DEPRECATED ====
GLOBAL.Security.initViewData = function() {
  
  //clearTableData("View");
  var views = new Array(  //flag: S-single; B-begin(level=0, but no </li> and one more <ui>); I-subitem; E-end(level=1, but one more </ui> and </li>) 
    {name:"Home", category:0, level:0, flag:"S", url:"index", para:"home", comment:""},
    
    {name:"Order", category:1, level:0, flag:"B", url:"/?view=order", para:"order", comment:""},
    {name:"Order's Log", category:1, level:1, flag:"E", url:"/?view=orderlog", para:"orderlog", comment:""},
    
    {name:"Purchasing", category:2, level:0, flag:"B", url:"/?view=purchase", para:"purchase", comment:""},
    {name:"Purchasing Log", category:2, level:1, flag:"E", url:"/?view=purchaselog", para:"purchaselog", comment:""},
    
    {name:"Stock", category:3, level:0, flag:"B", url:"/?view=stockList", para:"stocklist", comment:""},
    {name:"Stock IN", category:3, level:1, flag:"I", url:"/?view=stock&direction=0", para:"stockin", comment:""},
    {name:"Stock OUT", category:3, level:1, flag:"E", url:"/?view=stock&direction=1", para:"stockout", comment:""},

    {name:"Distributing", category:4, level:0, flag:"S", url:"/?view=distribute", para:"distribute", comment:""},

    {name:"Item Management", category:5,level:0, flag:"S", url:"/?view=itemMgt", para:"itemmgr", comment:""},
    
    {name:"Supplier Management", category:6,level:0, flag:"S", url:"/?view=supplierMgt", para:"suppmgt", comment:""},

    {name:"Admin", category:7,level:0, flag:"S", url:"/?view=admin", para:"admin", comment:""}
  );

  return views;
}

GLOBAL.Security.createMenuItems = function() {
  GLOBAL.Util.infoLog("Entering GLOBAL.Security.createMenuItems...");
  
  var menuItems = new Array();
  var menuItem = {};
  var subMenuItem = {};
  
  var rs = GLOBAL.Util.getLocalString();   // resource string
  //Home
  menuItem = {name:rs.home.name, category:0, para:"home", title:rs.home.formTitle, icon:"fa-home", comment:""};
  menuItems.push(menuItem);
  
  //Order
  menuItem = {name:rs.order.name, category:1, para:"order", title:rs.order.formTitle, icon:"fa-file-text-o", comment:""};
  subMenuItem = {name:rs.orderlog.name, category:1, para:"orderlog", title:rs.orderlog.formTitle, comment:""};
  menuItem.subMenu = new Array(subMenuItem);
  menuItems.push(menuItem);
  
  //Purchase
  menuItem = {name:rs.purchase.name, category:2, para:"purchase", title:rs.purchase.formTitle, icon:"fa-shopping-cart", comment:""};
  subMenuItem = {name:rs.purchaselog.name, category:2, para:"purchaselog", title:rs.purchaselog.formTitle, comment:""};
  menuItem.subMenu = new Array(subMenuItem);
  menuItems.push(menuItem);
  
  //Stock
  menuItem = {name:rs.stock.name, category:3, para:"stocklist", title:rs.stock.formTitle, icon:"fa-inbox", comment:""};
  subMenuItem = {name:rs.stockin.name, category:3, para:"stockin", title:rs.stockin.formTitle, comment:""};
  menuItem.subMenu = new Array(subMenuItem);
  subMenuItem = {name:rs.stockout.name, category:3, para:"stockout", title:rs.stockout.formTitle, comment:""};
  menuItem.subMenu.push(subMenuItem);
  menuItems.push(menuItem);
  
  //Distributing
  menuItem = {name:rs.distribute.name, category:4, para:"distribute", title:rs.distribute.formTitle, icon:"fa-truck", comment:""};
  menuItems.push(menuItem);
  
  //Item Management
  menuItem = {name:rs.itemmgr.name, category:5, para:"itemmgr", title:rs.itemmgr.formTitle, icon:"fa-files-o", comment:""};
  menuItems.push(menuItem);
  
  //Supplier Management
  menuItem = {name:rs.suppmgr.name, category:6, para:"suppmgt", title:rs.suppmgr.formTitle, icon:"fa-users", comment:""};
  menuItems.push(menuItem);
  
  //Admin
  menuItem = {name:rs.admin.formTitle, category:7, para:"admin", title:rs.admin.formTitle, icon:"fa-cog", comment:""};
  menuItems.push(menuItem);
  
  return menuItems;
}

// temporarily for old demo version.
//==== DEPRECATED ====
GLOBAL.Security.createMenu = function() {  
  GLOBAL.Util.infoLog("Entering createMenu...");
  
  var menuitems = new Array();
  var views = GLOBAL.Security.initViewData();
  
  for (var i = 0; i < views.length; i++) {
    menuitems[menuitems.length] = {name:views[i].name, url:views[i].url, flag:views[i].flag, category:views[i].category, level:views[i].level, para:views[i].para}
  }
  
  GLOBAL.Util.debugLog("FINALLY the number of menu is " + menuitems.length);
  
  return menuitems;
}

/**
Getting the branch information of current user.  

@method getCurrentBranchByLogin
@param login {string} usually the email(account) of the login user
@example
   1. getCurrentBranchByLogin(login)
@return {branchInfo} A object that contains information of the branch that the login user belongs to,
                     particularly the name, the telphone number and branch id of the branch
 */
GLOBAL.Security.getCurrentBranchByLogin = function(login) {
  
  GLOBAL.Util.infoLog("Entering getCurrentBranchByLogin..." + login);
  
  var branchInfo = {};
  // get Staff ID
  var staffID = GLOBAL.Security.getUserInfoByLogin(login).staffID;
  GLOBAL.Util.debugLog("Current staffID is " + staffID);
  
  // get Branch ID
  var condition = {};
  condition.type = GLOBAL.Constants.BRANCH_STAFF_TYPE;
  condition.staffID = staffID;
  
  var results = GLOBAL.Data.getDataItems(condition);

  if (results.length == 1) { //there should be only one appropriate data
    var branchID = results[0].branchID;
    GLOBAL.Util.debugLog("Current branchID is " + branchID);
    
    // Get Branch info
    condition = {};
    condition.type = GLOBAL.Constants.BRANCH_TYPE;
    condition.record_id = branchID;
    
    var results2 = GLOBAL.Data.getDataItems(condition);;
    if (results2.length == 1) { //there should be only one appropriate data
      var branch = results2[0];
      GLOBAL.Util.debugLog("Current branch name is " + branch.name);
      branchInfo = {
        name : branch.name
        ,telno : branch.telno
        ,branchID: branch.record_id
      };
    }
  } else {
    // Throw some exceptions
  }
  
  return branchInfo;
}

/**
Getting the user information of current user.  

@method getUserInfoByLogin
@param login {string} usually the email(account) of the login user
@example
   1. getUserInfoByLogin(login)
@return {userInfo} A object that contains the staff's name and staff id
 */
GLOBAL.Security.getUserInfoByLogin = function(login) {
  
  GLOBAL.Util.infoLog("Entering getUserInfoByLogin... login is " + login);
  var userInfo;
  
  var condition = {};
  condition.type = GLOBAL.Constants.STAFF_TYPE;
  condition.loginName = login;
  
  var results = GLOBAL.Data.getDataItems(condition);
  
  // there should be only one appropriate record
  if (results.length == 1) {
    var staff = results[0];
    userInfo = {
      name : staff.firstName + "." + staff.lastName
      ,staffID : staff.record_id
    };
    GLOBAL.Util.debugLog("The user name is " + userInfo.name + "  and id is " + userInfo.staffID);
  }
  return userInfo;
  
}

/**
Getting the staff id of the current (active) user.  

@method getCurrentStaffID
@example
   1. getCurrentStaffID()
@return {ScriptDbResult} The object that just has been saved
 */
GLOBAL.Security.getCurrentStaffID = function() {
  //TODO:
  return 1;
  //return GLOBAL.Security.getUserInfoByLogin(getCurrentUser()).staffID;
}", 
            "type": "server_js"
        }, 
        {
            "id": "d37be41f-6eda-448a-af12-c57bb3606813", 
            "name": "model", 
            "source": "/**
Model module containing all the definition 
and methods that manipulating business data

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-02-28
**/

var Model = {
//============================ ORDER ==============================
/**
Creating an new order .  

@method createOrder
@param branchID {String} indicating the branch that placed order
@param deliveryDate {Date} indicating the hope delivery date
@param placeStaffID {String} indicating the staff who placed the order
@example
   1. createOrder(branchID, deliveryDate, placeStaffID)
@return  {Object} order object
 */  
  createOrder : function (branchID, deliveryDate, placeStaffID) {
    GLOBAL.Util.infoLog("createOrder:[" + branchID + "][" + deliveryDate + "][" + placeStaffID + "]");
    
    var details = new Array();
   //Group information
    var order = {
      branchID: branchID,
      placeDate: GLOBAL.Util.getCurrentTime(),
      preferredDate: GLOBAL.Util.getCurrentTime(),
      deliveryDate: deliveryDate,
      placeStaffID: placeStaffID,
      purchaseID: -1,
      details: details,
      statusID: GLOBAL.Constants.STATUS.NEW.value
    };
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.ORDER_TYPE, order);  
    
  },

/**
Updating an existing order .  

@method updateOrder
@param branchID {String} indicating the branch that placed order
@param deliveryDate {Date} indicating the hope delivery date
@param placeStaffID {String} indicating the staff who placed the order
@example
   1. createOrder(branchID, deliveryDate, placeStaffID)
@return  {Object} order object
 */  
  updateOrder : function(order) {
    GLOBAL.Util.infoLog("Entering Model#updateOrder...");
    GLOBAL.Util.displayObject(order);
    
    order.type = GLOBAL.Constants.ORDER_TYPE;   // Use for MongoDB?
    return GLOBAL.Data.updateDataItem(order);
  },   
  
  getNewOrders : function(sDate, eDate) {
    GLOBAL.Util.infoLog("Entering Model#getNewOrders...");

    var condition = {};
    condition.type = GLOBAL.Constants.ORDER_TYPE;
    condition.purchaseID = -1;
    condition["$and"] = [{"placeDate" : {"$gte":sDate}},{"placeDate" : {"$lte":eDate}}];   // Here is a "AND" condition

    var results = GLOBAL.Data.getDataItems(condition);
    return results;
  },

  getLatestOrder : function(branchID) {
    
    GLOBAL.Util.infoLog("Entering Model#getLatestOrder...branch ID is ["+branchID+"]");
    
    var condition = {};
    condition.type = GLOBAL.Constants.ORDER_TYPE;
    condition.branchID = branchID;
    
    condition.sort = {"record_id":-1};
    condition.limit = 1;  // fetch the newest data, so just first one
    
    var results = GLOBAL.Data.getDataItems(condition);
    if (results.length <= 0) {
      var msg = "There should be at least one order but nothing!";
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    GLOBAL.Util.displayObject(results[0]);
    return results[0];  // just return the nearest order.
  },

/**
Retrieve the order which match the condition

@method getOrderByKey
@param condition {Object} including the condition used in query 
@return  {Object} order object
*/
  getOrdersByKey : function(condition) {
    
    //setting the type if there isn't one
    if (!condition.hasOwnProperty("type")) {
      condition.type = GLOBAL.Constants.ORDER_TYPE;
    }
    return GLOBAL.Data.getDataItems(condition);
  },

  
//============================ PURCHASE ==============================
/**
Saving Purchase information (not including detail).  

@method createPurchase
@param aggDateStart {Date} aggregating from ...
@param aggDateEnd {Date} aggregating to...
@param purchaseDate {Date} when this purchase info has been created
@param status {String} wether it is closed
@param comment {String} other information that needs to be kept
@example
   1. createPurchase(aggDateStart, aggDateEnd, purchaseDate, status, comment)
@return  {NUMBER} purchase id
 */
  createPurchase : function (aggDateStart, aggDateEnd, purchaseDate, status, comment) {
    GLOBAL.Util.infoLog("Entering Model#createPurchase..." + aggDateStart + ":" + aggDateEnd + ":" + purchaseDate + ":" + status);
    
    var details = new Array();
    
    //Group information
    var pob = {
      aggDateStart: aggDateStart,
      aggDateEnd: aggDateEnd,
      purchaseDate: purchaseDate,
      statusID: status,
      purchasedTime: 0,
      details : details,
      comment: comment
    };
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.PURCHASE_TYPE, pob);  
    
  },

/**
Get purchase detail information by purchaseID.

@method getPurchase
@param purchaseID {string} the purchase id 
@example
   1. getPurchase(purchase id)
@return {Object} purchase data (master data) should be only one
 */
  getPurchase : function (purchaseID) {
    GLOBAL.Util.infoLog("Entering Model#getPurchase..." + purchaseID);
    
    var condition = {};
    condition.record_id = purchaseID;
    
    var purchases = this.getPurchases(condition);
    
    if (purchases.length != 1) {
      var msg = "There is no or more than one purchase data whose id  is " + purchaseID;
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    return purchases[0];

  },
  
  
  getPurchases : function(condition) {
    GLOBAL.Util.infoLog("Entering Model#getPurchases..." + condition);
    GLOBAL.Util.showPara({
      funcName:"Model#getPurchases",
      condition:condition
    });
    
    if (!condition) condition = {};
    condition.type = GLOBAL.Constants.PURCHASE_TYPE;
    
    return GLOBAL.Data.getDataItems(condition);
  },
  
  updatePurchase : function(purchase) {
    GLOBAL.Util.infoLog("Entering Model#updatePurchase..." + purchase);
    purchase.type = GLOBAL.Constants.PURCHASE_TYPE;  //Used for MongoDB?
    return GLOBAL.Data.updateDataItem(purchase);
  },  
  
/**
Get purchase detail information by purchaseID.

@method getPurchaseDetails
@param purchaseID {string} the purchase id (master data) that this detail data belongs to
@example
   1. getPurchaseDetails(purchase id)
@return {ScriptDbResult} all purchase details which has this purchase id
 */
/*  getPurchaseDetails :function (purchaseID){
    GLOBAL.Util.infoLog("Entering Model#getPurchaseDetails()..." + purchaseID);
    
    var condition = {};
    condition.type = Constants.PD_TYPE;
    condition.purchaseID = purchaseID;
    
    var results = GLOBAL.Data.getDataItems(condition);
    
    GLOBAL.Util.debugLog(String.format("The number of PurchaseDetail order is {0}", results.length));
    
    return results;
    
  }, */
  
//========================== STOCK HANDLING =================================
//--------------------------------------
// save the stock (for submit button)
// [INPUT] direction: 0:STOCK IN      1:STOCK OUT
//         items: the array of items {itemID, itemQty} that will stored into stock
//--------------------------------------
  saveStock : function(direction, stockInPrice, qty, item) {
    GLOBAL.Util.infoLog("Entering Model#saveStock()...");
    // Save the stock record
    
    var currentTime = GLOBAL.Util.getCurrentTime();
    var stockObj = {
      item: item,             //Not a scriptdb struct, just an object holding necessary item info (created in stock.gs)
      stockInPrice:stockInPrice,  //Only have value when direction is IN. Otherwise, it will be null
      barcode:"",
      direction:direction,
      expireDate:"",
      stockDate:currentTime,
      stockPlaceID:"",
      comment:""
    };  
    
    return GLOBAL.Data.saveDataItem("Stock", stockObj).record_id;  
  },

//========================== DISTRIBUTE HANDLING =================================
//--------------------------------------
// Save the distribute detail
// Distribute detail contains two dimensions: items and branches.
// One distribute detail record consists of one item info and deliver quantity for each branch (stored in an Array object) 
// [INPUT] purchaseID: the purchase ID that this distribute deal with
//         item: the array of items {itemID, itemQty} that will stored into stock
//         branchQty: the array of items {brancheID, itemQty} that will stored into stock
//--------------------------------------
  saveDistributeDetail : function(purchaseID, item, branchQty) {
    GLOBAL.Util.infoLog("Entering Model#saveDistributeDetail()...");

    var currentTime = GLOBAL.Util.getCurrentTime();
    var ddObj = {
      purchaseID:purchaseID,
      item: item,             //This item's information
      branchQty:branchQty  //Contains deliver quantity and status for each branch.
    };  
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.DISTRIBUTE_TYPE, ddObj).record_id;  
  },
  
//---------------------------------------------------------
// Save the distribute master information including branches status and comment
// [INPUT] purchaseID:the purchase ID that this distribute deal with
//         branchStatus: each branch's delivery status
//         branchComments: comment for each branch
//         status: the status of the whole distribute
//---------------------------------------------------------
  saveDistributeMaster : function(purchaseID, branchStatus, branchComments, branchTotalPrice, status) {
    GLOBAL.Util.infoLog("Entering Model#savaDistributeMaster()...");

    var currentTime = GLOBAL.Util.getCurrentTime();
    var dmObj = {
      purchaseID:purchaseID,
      branchStatus: branchStatus,     
      branchComments:branchComments,  
      branchTotalPrice:branchTotalPrice,
      status:status
    };  
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.DISTRMASTER_TYPE, dmObj).record_id;  
  },
  
  getDistributeMaster : function(purchaseID){
    GLOBAL.Util.infoLog("Entering Model#getDistributeMaster()...");

    var condition = {};
    condition.type = GLOBAL.Constants.DISTRMASTER_TYPE;
    condition.purchaseID = purchaseID;
    var dists = GLOBAL.Data.getDataItems(condition);
    
    /*
    if (dists.length != 1) {
      var msg = String.format("There are {0} distribute master records which purchaseID is {1}", dists.length, purchaseID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    return dists[0];    */
    return dists;   // return the array. although there should be only one data or none, it is the outside process's responsibility to check
    
  },
  
  getDistributeDetails : function(purchaseID){
    GLOBAL.Util.infoLog("Entering Model#getDistributeDetails()..." + purchaseID);

    // create a db instance
    var condition = {};
    condition.type = GLOBAL.Constants.DISTRIBUTE_TYPE;
    condition.purchaseID = purchaseID;
    var dists = GLOBAL.Data.getDataItems(condition);
    
    if (dists == null || dists.length == 0) {
      var msg = String.format("There is no distribute detail for purchaseID {0}", purchaseID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    GLOBAL.Util.debugLog("Distribute (purchase["+purchaseID+"]) has "+dists.length+" details");
    
    return dists;
    
  },
  
  getDistributeDetail : function(purchaseID, itemID) {
    GLOBAL.Util.infoLog("Entering Model#getDistributeDetail()..." + purchaseID + "/" + itemID);

    // create a db instance
    
    var condition = {};
    condition.type = GLOBAL.Constants.DISTRIBUTE_TYPE;
    condition.purchaseID = purchaseID;
    condition.item = {itemID:itemID};
    
    var dists = GLOBAL.Data.getDataItems(condition);
    
    //there are either 1 detail data for each item or none
    if (dists.length == 0) {
      return null;
    }else if (dists.length == 1) {
      return dists[0];
    }else {
      var msg = String.format("There are {0} distribute detail records purchaseID {1} and itemID {2}", dists.length, purchaseID, itemID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
  },
  
  updateDistributeDetail : function(distributeDetail) {
    GLOBAL.Util.infoLog("Entering Model#updateDistributeDetail..." + distributeDetail);
    return GLOBAL.Data.updateDataItem(distributeDetail);
  },
  
  updateDistrMaster : function(distrmaster) {
    GLOBAL.Util.infoLog("Entering Model#updateDistrMaster...");
    
    distrmaster.type = GLOBAL.Constants.DISTRMASTER_TYPE;   // Use for MongoDB?
    return GLOBAL.Data.updateDataItem(distrmaster);
  },   
//========================== ITEM HANDLING =================================
/**
qeury the item table. 

@method queryItem
@param condition {Object} contains the query condition, as key=value
@example
1. queryItem({key1:value1, key2:value2})
@return {ResultSet} contains the query result
*/
  queryItem :function (condition){
    GLOBAL.Util.infoLog("Entering Model#queryItem()...");
    GLOBAL.Util.showPara({
      funcName:"queryItem",
      "condition":condition
    });

    condition.type = GLOBAL.Constants.ITEM_TYPE;
    return GLOBAL.Data.getDataItems(condition);
    
  },

/**
qeury the item table by itemID. 

@method getItemByID
@param itemID {number} record_id of item table
@example
1. getItemByID(1)
@return {Object} contains one particular item information
*/
  getItemByID : function (itemID) {
    GLOBAL.Util.infoLog("Entering Model#getItemByID()...itemID(record_id):" + itemID);
    
    var condition = {};
    condition.type = GLOBAL.Constants.ITEM_TYPE;
    condition.record_id = itemID;
    
    var items = GLOBAL.Data.getDataItems(condition);
    
    if (items.length != 1) {
      var msg = String.format("There are {0} items which itemID is ", items.length, itemID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    return items[0];
    
  },
/**
Retrieve the items currently stored in stock.
Queried data is used at Order/Stock management.
Classified by item type code (NOTE: note by itemType, which is the record_id of table{ItemType}).

@method prepareItems
@param 
@example
1. prepareItems()
@return Object contains pairs of type and array of items which belong to this type
*/
  prepareItems : function () {
    GLOBAL.Util.infoLog("Entering Model#prepareItems()...");
    var items = new Array(); //will contain the type and all the items of that type and be returned
    
    var results = this.getItems();
    
    var previousItemType = -1;
    var currentItemType = -1;
    var item = {};   // should be {itemtype:Array of items}
    var itemTypes = new Array();  //used to check, contains itemTypeCode
    var itemContents = new Array();
    
    var current = {};
    var doneFlag = false;

    for (var idx=0,max=results.length;idx<max;idx++) {
      var result = results[idx];
      
      //Mapping the data
      current = {};
      current.itemType = result.itemTypeCode;
      current.record_id = result.record_id;
      current.itemID = result.itemID;
      //current.supplier = this.getSupplierInfoByItemID(result.record_id).name;
      current.supplier = result.supplier;
      current.name = result.name;
      current.nameDisp = GLOBAL.Util.trimString(current.name, 16);
      current.description = result.name + " " + result.package;
      current.descDisp = GLOBAL.Util.trimString(current.description, 16);
      current.stockQty = result.stockQty;
      current.safetyQty = result.safetyQty;
      current.stockPrice = result.stockPrice;
      current.package = result.package;

      //aggregate items by itemType
      currentItemType = current.itemType;
      //GLOBAL.Util.debugLog(String.format("Handling previousItemType[{0}] while currentItemType[{1}].",previousItemType, currentItemType));
      
      if (previousItemType != currentItemType) {
        //save the current itemtype
        itemTypes.push(currentItemType);
        
        if (previousItemType != -1) {
          items.push({"itemType": previousItemType, "content": itemContents});
          //GLOBAL.Util.debugLog("items pushed! itemType:" + previousItemType);
        }
        previousItemType = currentItemType;
        itemContents = new Array();
        itemContents.push(current);
      } else {
        itemContents.push(current);
      }
      //GLOBAL.Util.debugLog("push a current into itemContent! itemType:" + current.itemType);
    }
    
    //save the last handled item content
    if (itemTypes.length > items.length) {
      items.push({"itemType": currentItemType, "content": itemContents});
    }

    // Check the items
    /*for (var i=0;i<items.length;i++) {
      var content = items[i].content;
      for (var j=0;j<content.length;j++) {
        GLOBAL.Util.debugLog(items[i].itemType + ":" + content[j].name);
      }
    }*/
    
    return items;
    
  },
  
  getItems : function() {
    
    GLOBAL.Util.infoLog("Entering Model#getItems()...");

    var condition = {};
    condition.type = GLOBAL.Constants.ITEM_TYPE;
    var results = GLOBAL.Data.getDataItems(condition);
    
    results.sort(createComparison("itemType"), true);  //sort by itemType, ascending
    
    //GLOBAL.Util.debugLog(results.length + " items have been retrieved!");
    
    return results;
    
  },
  
  createItem : function(item) {
    GLOBAL.Util.infoLog("Entering Model#createItem()...");
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEM_TYPE, item);
  },

  updateItem : function(item) {
    GLOBAL.Util.infoLog("Entering Model#updateItem..." + item);
    item.type = GLOBAL.Constants.ITEM_TYPE;
    return GLOBAL.Data.updateDataItem(item);
  },  
  
/**--------------------------------------------------
// retrieve types/categories of all the items
// THESE types will constitute the tabs in order form 
// NOTE: return value is not an array, but an object including id(record_id) and itemTypeName
*/
  getItemTypes : function () {
    GLOBAL.Util.infoLog("Entering Model#getItemTypes()...");

    var itemTypes = {};
    
    var condition = {};
    condition.type = GLOBAL.Constants.ITEMTYPE_TYPE;
    var results = GLOBAL.Data.getDataItems(condition);
    
    for (var idx=0;idx<results.length;idx++) {
      var result = results[idx];
      itemTypes[result.itemTypeCode] = result.itemTypeName;
    }
    return itemTypes;
  },  

//========================== BRANCH HANDLING =================================
  getBranches : function () {
    
    GLOBAL.Util.infoLog("Entering Model#getBranches()...");
    var branches = new Array();
    
    var condition = {};
    condition.type = GLOBAL.Constants.BRANCH_TYPE;
    var results = GLOBAL.Data.getDataItems(condition);
    
    for(var idx in results) {
      var branch = results[idx];
      branches.push({
        id:branch.record_id,
        branchID:branch.record_id,
        name:branch.name,
        telno:branch.telno
      });
    }
    
    GLOBAL.Util.debugLog(branches.length + " branches have been retrieved!");
    return branches;
  },  
  
  getBranchByID : function (branchID) {
    
    GLOBAL.Util.infoLog("Entering Model#getBranchByID()..." + branchID);
    var branch = {};
    
    var condition = {};
    condition.type = GLOBAL.Constants.BRANCH_TYPE;
    condition.record_id = branchID;
    var results = GLOBAL.Data.getDataItems(condition);
    
    for(var idx in results) {
      var result = results[idx];
      branch.branchID = result.record_id;
      branch.name = result.name;
      branch.telno = result.telno;
    }
    
    if (GLOBAL.Util.isEmpty(branch)) {
      var msg = "There is no branch which id is " + branchID;
      GLOBAL.Util.errorLog(msg);
      throw new LogicException(msg);
    }

    return branch;
  },  

//========================== SUPPLIER HANDLING =================================
/**
qeury the supplier table. 

@method querySupplier
@param condition {Object} contains the query condition, as key=value
@example
1. querySupplier({key1:value1, key2:value2})
@return {Object} contains the query result
*/
  querySupplier :function (condition){
    GLOBAL.Util.infoLog("Entering Model#querySupplier()...");
    GLOBAL.Util.showPara({
      funcName:"Model#querySupplier",
      "condition":condition
    });

    condition.type = GLOBAL.Constants.SUPPLIER_TYPE;
    return GLOBAL.Data.getDataItems(condition);
    
  },

  //------------------------------------------
// get the supplier info for specific item
// NOTE: the parameter "itemID" is the "record_id" of item table, not the "itemID" from upload file
//------------------------------------------
  getSupplierInfoByItemID : function (itemID) {
  
    GLOBAL.Util.infoLog("Entering Model#getSupplierInfoByItemID()...itemID:" + itemID);
    
    var name = "";
    var guidePrice = 0.0;
    var supplierID = -1;
    
    var condition = {};
    condition.type = GLOBAL.Constants.ITEM_SUPPLIER_TYPE;
    condition.itemID = itemID;
    condition.priority = 0;             // Priority is a number!
    var results = GLOBAL.Data.getDataItems(condition);
    
    if (results.length != 1){
      var msg = "There is no (or more than one) item supplier information (priority = 0) for item " + itemID;
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }

    var itemSupplier = results[0];
    guidePrice = itemSupplier.guidePrice;
    supplierID = itemSupplier.supplierID;   //<=This was set to record_id of supplier table
    
    // Get the name of Supplier
    condition = {};
    condition.type = GLOBAL.Constants.SUPPLIER_TYPE;
    condition.record_id = supplierID;       //pay attention this one. this is NOT supplier id that customer provided
    results = GLOBAL.Data.getDataItems(condition);
    
    if (results.length != 1){
      var msg = "There is no (or more than one) supplier information which has id " + supplierID;
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    name = results[0].name;
    
    return {id:supplierID,
            name:name, 
            guidePrice:guidePrice};
  },
  
  //--------------------------------------------------
  // prepare the supplier id
  // get supplier name from upload item file
  // if existed, get the supplierID (from Supplier Table)
  // if not existed, create a new record and return the supplierID
  //--------------------------------------------------
  prepareSupplier:function(supplier) {
    GLOBAL.Util.infoLog("Entering Model.prepareSupplier... " + supplier);
    
    if (!supplier || supplier == "") {
      return "";
    }
    
    var supplierID = "";
    
    var condition = {};
    condition.type = GLOBAL.Constants.SUPPLIER_TYPE;
    condition.name = supplier;
    
    var results = GLOBAL.Data.getDataItems(condition);
    var count = results.length;
    
    if (count == 0) {
      //create a new Supplier
      var content = {};
      content.type = GLOBAL.Constants.SUPPLIER_TYPE;
      content.name = supplier;
      var res = GLOBAL.Data.saveDataItem(GLOBAL.Constants.SUPPLIER_TYPE, content);
      supplierID = res.record_id;
    }else if (count == 1) {
      //get current supplier which name is param
      supplierID = results[0].record_id;
    }else{
      //there are two or more supplier id which has the same name, throw the exception
      var msg = "there are two or more suppliers which name is " + supplier;
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    return supplierID;
  },
  
  createSupplier : function(supplier) {
    GLOBAL.Util.infoLog("Entering Model#createSupplier()...");
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.SUPPLIER_TYPE, supplier);
  },
  //--------------------------------------------------
  // prepare the item type including code and name
  // get itemTypeCode(code) and itemType(name) from upload item file
  // if existed, do nothing
  // if not existed, create a new record for this code and name
  // HOWEVER, in system, the record_id should be used as 'itemType'.
  //--------------------------------------------------
  prepareItemType:function(code, name) {
    GLOBAL.Util.infoLog("Entering Model.prepareItemType... " + code +":"+ name);
    
    if (!code || code == "") {
      return "";
    }
    if (!name || name == "") {
      return "";
    }
    
    var itemType;
    
    var condition = {};
    condition.type = GLOBAL.Constants.ITEMTYPE_TYPE;
    condition.itemTypeCode = code;
    condition.itemTypeName = name;
    
    var results = GLOBAL.Data.getDataItems(condition);
    var count = results.length;
    
    if (count == 0) {
      //create a new Supplier
      var content = {};
      content.itemTypeCode = code;
      content.itemTypeName = name;
      var res = GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEMTYPE_TYPE, content);
      itemType = res.record_id;
    }else if (count == 1) {
      //get current supplier which name is param
      itemType = results[0].record_id;
    }else{
      //there are two or more supplier id which has the same name, throw the exception
      var msg = "there are two or more item type records for [" + code +":"+ name + " ]";
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    return itemType;   // the record_id of this item type (pair of code and type name)
  },
  
  createItemSupplier:function(itemID, supplierID, guidePrice, priority) {
    GLOBAL.Util.infoLog("Entering Model.createItemSupplier... " + itemID);
    if (!itemID || !supplierID) {
      return null;
    }
    
    var content = {};
    content.itemID = itemID;
    content.supplierID = supplierID;
    content.guidePrice = guidePrice;
    content.priority = priority;
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.ITEM_SUPPLIER_TYPE,content);
    
  },

//========================== Administration HANDLING =================================
/**
retrieve all the users. 

@method queryUser
@example
1. queryUser()
@return {Object} contains the query result
*/
  queryUser :function (){
    GLOBAL.Util.infoLog("Entering Model#queryUser()...");

    var condition = {};
    condition.type = GLOBAL.Constants.STAFF_TYPE;
    return GLOBAL.Data.getDataItems(condition);
    
  },
  
/**
retrieve all the users branch relationship. 

@method queryUserBranch
@example
1. queryUserBranch()
@return {Object} contains the query result
*/
  queryUserBranch :function (){
    GLOBAL.Util.infoLog("Entering Model#queryUserBranch()...");

    var condition = {};
    condition.type = GLOBAL.Constants.BRANCH_STAFF_TYPE;
    return GLOBAL.Data.getDataItems(condition);
    
  },  
  
/**
retrieve all the branches. 

@method queryBranch
@example
1. queryBranch()
@return {Object} contains the query result
*/
  queryBranch :function (){
    GLOBAL.Util.infoLog("Entering Model#queryBranch()...");

    var condition = {};
    condition.type = GLOBAL.Constants.BRANCH_TYPE;
    return GLOBAL.Data.getDataItems(condition);
    
  },

  addUser : function(user){
    GLOBAL.Util.infoLog("Entering Model#addUser()...");
    
    // Add a staff record
    var uob = {   // user object
      firstName: user.userfname,
      lastName: user.userlname,
      email: user.useremail,
      telno: user.contacttel,
      loginName:user.useremail
    };
    
    return GLOBAL.Data.saveDataItem(GLOBAL.Constants.STAFF_TYPE, uob); 
    
    // Add a staff-branch relation record
    var bsob = {  //Branch staff object
    }
  },
  
//========================== COMMON HANDLING =================================
  
  deActivateRec : function(recType) {
    GLOBAL.Util.infoLog("Entering Model#deActivateRec()..." + recType);

    var upd = {};
    upd.type = recType;
    upd.activeFlg = GLOBAL.Constants.REC_EXPIRED;
    
    //what data should be updated?
    var query = {"activeFlg":GLOBAL.Constants.REC_ACTIVE};
    
    GLOBAL.Data.updateDataItem(upd, query);
    
  },  
  
  end : function() {
    GLOBAL.Util.infoLog("Entering Model#end()...");
  }
  
  
}", 
            "type": "server_js"
        }, 
        {
            "id": "b09dcd92-dfd5-4c4c-99cf-f86d0cec2ace", 
            "name": "common-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!--  
    //-------------------------------------------------------------
    // check whether input is a positive integer 
    //-------------------------------------------------------------
    function isPosInteger(input) {
      return /^[1-9]\d*$/g.test(input);
    }

    //-------------------------------------------------------------
    // check whether input is a non-negative integer 
    //-------------------------------------------------------------
    function isNonNegInteger(input) {
      return /^\d+$/g.test(input);
    }
    
    //-------------------------------------------------------------
    // check whether input is a positive float (or positive integer) 
    //-------------------------------------------------------------
    function isPosFloat(input) {
      //alert(input);
      // also have to consider the integer
      if (isPosInteger(input)) {
        //alert("input is an integer");
        if (input == '0') {
          //alert("back false");
          return false;
        }else{
          //alert("back true");
          return true;
        }
      }
      
      //alert("input is a float");
      // and float check
      return /^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/g.test(input);
    }  
    
    //-------------------------------------------------------------
    // check whether input is a valid date 
    //-------------------------------------------------------------
    function isValidDate(dateString) {
      // First check for the pattern
      if(!/^\d{4}\/\d{2}\/\d{2}$/.test(dateString))  //YYYY/MM/DD
        return false;

      // Parse the date parts to integers
      var parts = dateString.split("/");
      var day = parseInt(parts[2], 10);
      var month = parseInt(parts[1], 10);
      var year = parseInt(parts[0], 10);
      
      log(" day:" + day + " month:" + month + " year:" + year);

      // Check the ranges of month and year
      if(year < 1000 || year > 3000 || month == 0 || month > 12)
        return false;

      var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

      // Adjust for leap years
      if(year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
        monthLength[1] = 29;

      // Check the range of the day
      return day > 0 && day <= monthLength[month - 1];
    }
    
    //-------------------------------------------------------------
    // format number as currency
    // e.g., fmoney(789123.4567, 3) = 789,123.456
    //-------------------------------------------------------------
    function fmoney(s, n) { 
      if (isNaN(s)) return s; //if s is a string, return without format
      
      n = n > 0 && n <= 20 ? n : 2; 
      s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + ""; 
      var l = s.split(".")[0].split("").reverse(), r = s.split(".")[1]; 
      var t = ""; 
      for (var i = 0; i < l.length; i++) { 
        t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? "," : ""); 
      } 
      return t.split("").reverse().join("") + "." + r; 
    }   
    
    function logShowObject(obj) {
      log("======= Showing an object ===========");
      //for (var name in obj) {
      //  log(">>" + name + ":" + obj[name]);
      //}
      log(JSON.stringify(obj));
      log("=====================================");
    }
    
    //-------------------------------------------------------------
    // Check function
    //-------------------------------------------------------------
    function checkPersonName(name) {
      log("checkPersonName: [" + name + "]");
      // should be only A-Z/a-z
      if (typeof(name) !== "string") return false;
      var rep = name.replace(/^\s+|\s+$/g,"");
      log("name:[" + name + "] rep:" + rep);
      
	  return rep
    }
    
    function checkEmail(email) {
      log("checkEmail: [" + email + "]");
      var reg = /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/g;
      return reg.test(email);
    }
 
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "0f06e930-0839-4fcb-a1c3-fe427d67d5c2", 
            "name": "purchase", 
            "source": "/**
Purchase module containing all the definition 
and methods that are used by Purchase module (including purchase log)

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-03-10
**/

var Purchase = {

/**-----------------------------------------
Periodically check
 aggregate the orders during the between the start date and end date
 create **Purchase** record to save one periodically checking activity
 which includes one or more **PurchaseDetail** data to save the detail items
@method queryPurchase
@param startDate {Number} the mill sec of start date 
@param endDate {Number} the mill sec of end date 
@return  {Object} created purchase object including detail information
*/
  queryPurchase :function (startDate, endDate) {  
  
    GLOBAL.Util.infoLog("Entering Purchase#queryPurchase()...["+startDate+"]["+endDate+"]");
    
    var sDate = new Date(startDate).getTime();
    var eDate = new Date(endDate).getTime()+86399000;  // set to the latest time of this day(23:59:59)
    
    var purchase;
    
    GLOBAL.Util.debugLog(String.format("startDate:{0}    endDate:{1} ", sDate, eDate));
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {
      
      // 2). aggregate all orders in this period and create PurchaseDetail records.
      var newOrders = Model.getNewOrders(sDate, eDate);
      //GLOBAL.Util.displayObject(newOrders);
      GLOBAL.Util.debugLog("The number of latest orders:" + newOrders.length);
      
      // 1). create one purchase data cause there is an aggregating activity.
      if (newOrders.length > 0) {
        purchase = Model.createPurchase(sDate, eDate, GLOBAL.Util.getCurrentTime(), GLOBAL.Constants.STATUS.NEW.value, ""); //the last para is comment
        GLOBAL.Util.debugLog("Created a purchase:" + purchase.record_id);
      }else{
        return null;
      }

      for (var ido=0,max=newOrders.length;ido<max;ido++) {
        var order = newOrders[ido];
        
        GLOBAL.Util.debugLog(String.format("Checking Order[{0}]...", order.record_id));
        
        var orderDetails = order.details;
        
        if (!orderDetails) continue;
        
        for (var idd=0,max1=orderDetails.length;idd<max1;idd++) {
          var od = orderDetails[idd];
          var currentItemID = od.item.record_id;
          
          //GLOBAL.Util.debugLog(String.format("OrderDetail of order [{0}]'s  itemID is {1} and Qty is {2}", od.orderID, currentItemID, od.itemQty));
          
          if (currentItemID == null) {
            GLOBAL.Util.errorLog(String.format("There is a order detail [{0}] which has no item information!...", idd));
            continue;
          }
          
          //get the item detail
          var item = Model.getItemByID(currentItemID);
          
          //get the supplier
          var supplier = Model.getSupplierInfoByItemID(currentItemID);
          
          //create purchase detail for each item
          //which means, if two or more order details involve the same item
          //then they have to be aggregated
          var pdIndex = this.isContained(purchase.details, item, "item", "record_id");
          
          if (pdIndex == -1) {  //there has already a purchase detail dealing with this item
            GLOBAL.Util.debugLog("NOT FOUND any aggregated order data (PurchaseDetail) !");
            if (!purchase.details) {  //null or undefined
              purchase.details = new Array();
            }
            //new detail
            var detail = {};
            //var purchaseQty = 0;
            var orderQty = parseInt(od.itemQty);
            var currentStock = parseInt(item.stockQty);
            var purchaseQty = (orderQty > currentStock) ? (orderQty - currentStock) : 0;
            
            detail.item = item;
            detail.supplier = supplier;
            detail.orderQty = orderQty;
            detail.purchaseQty = purchaseQty;
            detail.guidePrice = parseFloat(od.itemPrice);
            detail.purchasePrice = parseFloat(od.itemPrice);
            detail.comment = "";
            detail.stock = currentStock;
            
            //store this detail
            purchase.details.push(detail);
          }else{
            GLOBAL.Util.debugLog("FOUND the existed aggregated order (PurchaseDetail) !");
            var detail = purchase.details[pdIndex];
            detail.orderQty += parseInt(od.itemQty);
            var currentStock = parseInt(item.stockQty);
            var purchaseQty = (detail.orderQty > currentStock) ? (detail.orderQty - currentStock) : 0;
            detail.purchaseQty = purchaseQty;
          }
        }
        //update order status
        order.purchaseID = purchase.record_id;
        Model.updateOrder(order);
      }
      
      //update purchase
      Model.updatePurchase(purchase);
      
      
    }finally {
      lock.releaseLock();
    }

    return purchase;
  },
  
  //Mapping the query result to output data [Purchase Form]
  createResults :function (purchase) {
    
    GLOBAL.Util.infoLog("Entering Purchase#createResults()..." + purchase);
    
    if (!purchase) return null;

    var results = new Array();
    
    var purchaseDetails = purchase.details;
    
    for (var idx=0,max=purchaseDetails.length;idx<max;idx++){
      var detail = purchaseDetails[idx];
      
      GLOBAL.Util.displayObject(detail);
      
      var result = {};
      result.itemID = detail.item.record_id;
      result.itemCode = detail.item.code;
      result.itemType = detail.item.itemTypeName;
      result.itemName = detail.item.name;
      result.itemDesc = detail.item.name + " " + detail.item.package;
      result.guidedPrice = detail.supplier.guidePrice;
      result.orderQty = detail.orderQty;
      result.stockQty = detail.stock;

      result.purchaseQty = detail.purchaseQty;
      
      if (result.purchaseQty == 0) {
        result.supplier = "stock";
      }else{
        result.supplier = Model.getSupplierInfoByItemID(result.itemID).name;
      }
      
      results.push(result);
    }
    
    return {purchaseID:purchase.record_id, results:results};
  },
  
  //---------------------------------
  // List all the purchase list for the Purchase Log
  //---------------------------------
  getPurchases : function () {  
    
    GLOBAL.Util.infoLog("Entering Purchase#getPurchases()...");
    
    var results = new Array();
  
    var purchases = Model.getPurchases();  //Get all the purchases, so no condition to set
    
    purchases.sort(createComparison("purchaseDate"), false);  //DESC by purchase date
    
    GLOBAL.Util.debugLog(String.format("The number of Purchase is {0}", purchases.length));
    
    // Mapping the results
    //while(purchases.hasNext()) {
    for (var idx=0,max=purchases.length;idx<max; idx++){
      var purchase = purchases[idx];
      var ob = {};

      var timeFmt = GLOBAL.Constants.TIME_FMT;
      ob.purchaseId = purchase.record_id;
      ob.aggTime = GLOBAL.Util.formatDateByTime(purchase.purchaseDate, timeFmt);
      ob.startTime = GLOBAL.Util.formatDateByTime(purchase.aggDateStart, timeFmt);
      ob.endTime = GLOBAL.Util.formatDateByTime(purchase.aggDateEnd, timeFmt);
      ob.purchasedTime = GLOBAL.Util.formatDateByTime(purchase.purchasedTime, timeFmt);
      ob.statusID = purchase.statusID;
      ob.status = GLOBAL.Util.getStatusTitleByValue(purchase.statusID);
      
      results.push(ob);
    }
    
    return results;

  },
  
  //compare two purchase data by purchase date of each data
/*  purchaseCompare : function(obj1, obj2) {  //DESC
    if (obj1.purchaseDate > obj2.purchaseDate) {
      return -1;
    }else if (obj1.purchaseDate < obj2.purchaseDate) {
      return 1;
    }else{
      return 0;
    }
  },*/

  //Mapping the purchase detail [PurchaseLog Form]
  displayPurchaseDetail : function(purchaseId, statusID) {
    GLOBAL.Util.infoLog("Entering Purchase#displayPurchaseDetail()..." + purchaseId);
    
    var itemTypes = Model.getItemTypes();
    var purchase = Model.getPurchase(purchaseId);

    GLOBAL.Util.displayObject(purchase);
    
    var details = purchase.details;
    
    //Mapping the results
    var results = new Array();
    
    //while (pdResults.hasNext()) {
    for (idx=0,max=details.length;idx<max;idx++) {
      var pd = details[idx];
      
      //GLOBAL.Util.displayObject(pd.item);
      
      var ob = {};
      ob.itemID = pd.item.record_id;
      ob.itemType = itemTypes[pd.item.itemTypeCode];
      ob.itemName = pd.item.name;
      ob.description = pd.item.description;
      ob.supplier = Model.getSupplierInfoByItemID(pd.item.record_id).name;
      ob.guidePrice = pd.guidePrice;
      ob.purchasePrice = pd.purchasePrice;
      ob.stockQty = pd.item.stockQty;
      ob.orderQty = pd.orderQty;
      ob.purchaseQty = pd.purchaseQty;
      ob.comment = pd.comment;
      ob.statusID = statusID;
      ob.status = GLOBAL.Util.getStatusTitleByValue(statusID);
      
      results.push(ob);
    }
    
    return {purchaseID:purchaseId, results:results};
    
  }  ,

  //Shortcut when all items can be picked from stock, so can set this purchase data
  //to "PURCHASED" directly.
  setToPurchased : function(purchaseID) {
    GLOBAL.Util.infoLog("Entering Purchase#setToPurchased()..." + purchaseID);
    var result = false;
    var purchase;
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {
      //get purchase data
      purchase = Model.getPurchase(purchaseID);
      
      //update the status of this purchase data
      purchase.statusID = GLOBAL.Constants.STATUS.PURCHASED.value;
      purchase.purchasedTime = GLOBAL.Util.getCurrentTime();
      
      //update the purchase data
      var result = Model.updatePurchase(purchase);
      
      GLOBAL.Util.displayObject(result);
      
    }finally {
      lock.releaseLock();
    }
    
    return purchase.record_id;
    
  }  ,
  
  updatePurchaseDetail : function(purchaseID, params) {
    GLOBAL.Util.infoLog("Entering Purchase#updatePurchaseDetail()..." + purchaseID);
    var result = false;
    
    //GLOBAL.Util.displayObject(params);
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {
      //get purchase data
      var purchase = Model.getPurchase(purchaseID);
      var pdCount = purchase.details.length;
      var paraCount = params.length;
      
      for (var idx=0;idx<paraCount;idx++){

        //GLOBAL.Util.displayObject(purchase);
        
        //update the details
        var pdIndex = -1;
        for (var idd=0;idd<pdCount;idd++){
          
          if (purchase.details[idd].item.record_id == params[idx].itemID) {  //find the relative purchase detail by item id
            pdIndex = idx;
            //hit the detail so update it
            purchase.details[idd].purchasePrice = parseFloat(params[idx].purchasePrice);
            purchase.details[idd].purchaseQty = parseInt(params[idx].purchaseQty);
            purchase.details[idd].comment = params[idx].comment;
            break;
          }
        }
        
        if (pdIndex == -1) {  //there has already a purchase detail dealing with this item
          var msg = String.format("Unexpected item id [{0}] is found in Purchase [{1}] ", pd.itemID, purchaseID);
          GLOBAL.Util.errorLog(msg);
          throw new LogicException(msg);
        }

      }
      //update the status of this purchase data
      purchase.statusID = GLOBAL.Constants.STATUS.PURCHASED.value;
      purchase.purchasedTime = GLOBAL.Util.getCurrentTime();
      
      var result = Model.updatePurchase(purchase);
      
      GLOBAL.Util.displayObject(result);
      
      return purchase;   //the result contains error code only, so return purchase
      
    }finally {
      lock.releaseLock();
    }
    
  }  ,
  //============  COMMON FUNCTION ==============
/**
* Check whether an object which has the specifized key-value exists in an Array.
*
* @param {Object} the array containing multiple objects
* @param {string} identify which key should be compared
* @param {string} the value using to compare the key
* @return {number} if the obj which own the key-value exist in the array, return the index, otherwise -1
*/
  isContained :function (objArray, obj, objName, key) {
    GLOBAL.Util.infoLog("Entering Purchase#isContained()...objName: "+objName+"  key:" + key);
    var result = -1;
    
    if (!objArray) return result;
    
    for (var idx=0, max=objArray.length; idx<max; idx++) {
      var objResult = objArray[idx];
      
      if (objResult.hasOwnProperty(objName)) {
        if (objResult[objName][key] == obj[key]) {
          result = idx;
          break;
        }
      }
    }
    
    return result;
  },
   
  end : function() {
    GLOBAL.Util.infoLog("Entering Purchase#end()...");
  }

}
", 
            "type": "server_js"
        }, 
        {
            "id": "cada003f-b478-4642-adc4-07e72193ada7", 
            "name": "itemmgr", 
            "source": "/**
Itemmgr module containing all the definition 
and methods that are used by Item Management module

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-03-12
**/

var Itemmgr = {

  initItemMgr : function() {
    var result = {};
    result.items = Model.prepareItems();
    result.itemTypes = Model.getItemTypes();
      
    return result;
  },
  
//--------------------------------------------------
// receive the upload file and save it to Google drive
// then transfer it to Google spreadsheet format
// and retrieve the data from file to save to the database
// RETURN the successful information
//--------------------------------------------------
  uploadItemFile :function (form) {
    GLOBAL.Util.infoLog("Entering uploadItemFile...");
    
    var formBlob = form.itemFile;
    
    // Save uploaded Excel as Google Spreadsheet
    var fileName = "Item_" + GLOBAL.Util.formatDateByTime(GLOBAL.Util.getCurrentTime(), "yyyyMMddhhmmss");
    
    var gsFile = FileHandler.convert(formBlob, fileName);
    GLOBAL.Util.debugLog("Uploaded file's has been renamed to " + fileName);
    
    //Fetching data from file
    var ss = SpreadsheetApp.openById(gsFile.getId());
    var sheet = ss.getSheets()[0];
    //var itemDataRange = sheet.getRange("A3:M800");
    var itemDataRange = sheet.getDataRange().offset(2,0); //since getDataRange, data row should be begin from row 3
    
    var itemObjects = FileHandler.getRowsData(sheet, itemDataRange, 1);  
    
    this.saveItemsToDb(itemObjects);
    
    //file.setTrashed(true);
    //GLOBAL.Util.debugLog("Uploaded file's has been removed!");

    // backup the converted spreadsheet file
    //FileHandler.moveFileToFolder(gsFile, "UploadBackup");
    
    //var backupFolder = DocsList.getFolder("UploadBackup");
    //gsFile.addToFolder(backupFolder);   //Backup the upload file (converted)
    
    //gsFile.removeFromFolder(DocsList.getRootFolder()); 
    
    //  return "";
    //var key = {"itemType":itemType, "itemName":itemName};
    //var itemResults = queryItemsByKeys(QUERY_ALL_TYPES,"");
    
    // after successfully stored the order, return to index view.
    //return createItemMgtList(itemResults);
    
    //return gsFile.getUrl();
    
  },
  
  

/*  uploadItemFile_Old : function (form) {
  
    GLOBAL.Util.infoLog("Entering uploadItemFile ... " + typeof(form.fileUpload));
    //displayObject(form.fileUpload);
    
    var file = DocsList.createFile(form.fileUpload);
    debugLogToDb("the id of uploaded excel file is " + file.getId());
    
    // Covert Excel to Google Spreadsheet
    var gsFile = convert(file.getId());
    // Change the name
    gsFile.rename("Item_"+formatDateByTime(getCurrentTime(), "yyyyMMddhhmmss"));
    
    var ss = SpreadsheetApp.openById(gsFile.getId());
    debugLogToDb("the name of spreadsheet is " + ss.getName());
    
    var sheet = ss.getSheets()[0];
    // Get the range of cells that store employee data.
    var itemDataRange = sheet.getRange("A3:K800");
    
    var itemObjects = getRowsData(sheet, itemDataRange, 1);
    debugLogToDb("the number of data acquired is " + itemObjects.length);
    
    saveItemsFromUpload(itemObjects);
    debugLogToDb("saveItemsFromUpload ");
    
    // delete the uploaded file
    file.setTrashed(true);
    debugLogToDb("setTrashed ");
    
    // backup the converted spreadsheet file
    var backupFolder = DocsList.getFolder("UploadBackup");
    gsFile.addToFolder(backupFolder);   //Backup the upload file (converted)
    gsFile.removeFromFolder(DocsList.getRootFolder()); 
    debugLogToDb("removeFromFolder ");
    
    //  return "";
    //var key = {"itemType":itemType, "itemName":itemName};
    var itemResults = queryItemsByKeys(QUERY_ALL_TYPES,"");
    debugLogToDb("queryItemsByKeys ");
    
    // after successfully stored the order, return to index view.
    return createItemMgtList(itemResults);
    
  },

*/
//--------------------------------------------------
// save the items information get from uploaded file
//--------------------------------------------------
  saveItemsToDb : function (items) {
    GLOBAL.Util.infoLog("Entering saveItemsToDb...");
    
    // deActivate all the current item data.
    Model.deActivateRec(GLOBAL.Constants.ITEM_TYPE);
    Model.deActivateRec(GLOBAL.Constants.ITEM_SUPPLIER_TYPE);
    Model.deActivateRec(GLOBAL.Constants.ITEMTYPE_TYPE);
    
    // reset the ITEM_TYPE
    
    var cnt = 0;
    
    for (var idx = 0; idx < items.length; idx++) {
      
      var itemID = items[idx].itemID;
      GLOBAL.Util.debugLog("Handling item:" + itemID);
      
      if (itemID) {

        GLOBAL.Util.debugLog("actually handling item " + itemID);
        // (1) extract Item Data
        var item = items[idx];
        
        // (2) setting supplier id for this item
        var supplierID = Model.prepareSupplier(item.supplier);
        GLOBAL.Util.debugLog("Supplier has been identified... " + supplierID);
        
        // (3) setting ItemType data and update this itemType for the item
        var itemType = Model.prepareItemType(items[idx].itemTypeCode, items[idx].itemTypeName);  
        item.itemType = itemType; //record_id of itemType
        
        // (4) create the item data
        item = Model.createItem(item);
        GLOBAL.Util.debugLog(String.format("Item [{0}] has been stored! ",item.record_id));
        cnt++;
        
        // (5) after item and supplier information are stored, 
        //     create a new relationship of Item and Supplier
        if (supplierID != "") {
          var res = Model.createItemSupplier(item.record_id, supplierID, item.guidePrice, 0);
          GLOBAL.Util.debugLog("One ItemSupplier data has been created as follows");
          GLOBAL.Util.displayObject(res);
        }
        
      }
    }
    
    GLOBAL.Util.debugLog(String.format("{0} items have been stored successfully!", cnt));
    
  },
  

  // itemType includes three attributes:
  // record_id, unique indentifier used in item as itemType
  queryItem:function(itemType) {
    GLOBAL.Util.infoLog("Entering ItemMgr#queryItem()...");
    GLOBAL.Util.showPara({
      funcName:"queryItem",
      "itemType":itemType
    });
    
    var itemTypes = Model.getItemTypes();
    var results ;
    
    if (!itemType||itemType=='-1') {
      results = Model.queryItem({}); 
    }else{  
      
      results = Model.queryItem({itemTypeCode:parseInt(itemType)}); 
    }
    
    //add some auxiliary information
    for (var idx=0,max=results.length;idx<max;idx++){
      results[idx].itemID = results[idx].record_id;
      var type = results[idx].itemTypeCode;
      results[idx].itemTypeName = itemTypes[type];
    }
    
    return results;  
    

  },
  
  end: function(){
   //do nothing
  }
}", 
            "type": "server_js"
        }, 
        {
            "id": "b626548c-b4a1-4b7b-87e7-1d1928fed797", 
            "name": "stock", 
            "source": "/**
Stock module containing all the definition 
and methods that are used by Stock(Inventory) module (including stock in/out)

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-03-14
**/

var Stock = {
  
  initStockList : function(content) {
    var result = {};
    result.itemTypes = Model.getItemTypes();
    return result;
  },
  
  prepareStock : function(content) {
    var result = {};
    result.content = content;
    result.items = Model.prepareItems();
    result.itemTypes = Model.getItemTypes();
    result.rs = GLOBAL.Util.getLocalString();
    
    return result;
  },  
  //-----------------------------------------
  // Retrieving the current items
  // sort by itemType
  //-----------------------------------------
  queryStock : function (itemTypeCode) {  
    GLOBAL.Util.infoLog("Entering Stock#queryStock()..." + itemTypeCode);
    
    // create a db instance
    var results;
    
    var itemTypes = Model.getItemTypes();
    
    // create the query string
    if (!itemTypeCode || itemTypeCode=='-1') {
      results = Model.queryItem({}); 
    }else{  
      results = Model.queryItem({itemTypeCode:parseInt(itemTypeCode)}); 
    }
    
    //Add some auxiliary information to display
    for (var idx=0,len=results.length;idx<len;idx++) {
      var item  = results[idx];
      item.itemType = itemTypes[item.itemTypeCode];  //change the code to text
      item.description = item.name + " " + item.package;
      
      item.stockPrice = parseFloat(item.stockPrice).toFixed(2);
      
      var stockQty = parseInt(item.stockQty);
      var safetyQty = parseInt(item.safetyQty);
      
      if (stockQty < safetyQty) {
        item.necessaryQty = safetyQty - stockQty;
      }else{
        item.necessaryQty = 0;
      }
      
    }
    
    return results;  
    
  },
  
  //--------------------------------------------------
  // save the item in the StockItems as stock record
  //--------------------------------------------------
  saveStock :function (params) {
  
    GLOBAL.Util.infoLog("Entering Stock#saveStock()...");
    GLOBAL.Util.showPara({
      funcName:"Stock#saveStock",
      params:params
    });
    
    var rs = GLOBAL.Util.getLocalString();
    
    var paras = new Array();
    //var direction = params.directionSaveStock;
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {    
      //for (var para in params) {
      for (var idx=0;idx<params.length;idx++) {
        var para = params[idx];
        
        var item = {};
        item.record_id = para.itemid;
        item.itemType = para.type;
        item.itemID = para.cust_itemid;
        item.desc = para.desc;
        
        var direction = -1;
/*        for (var i=0; i<GLOBAL.Constants.STOCK_DIRECTION.length;i++){
          if (para.direction == GLOBAL.Constants.STOCK_DIRECTION[i]) {
            direction = i;   //Get the direction code: 0->IN    1->OUT
            break;
          }
        }*/
        
        if (para.direction == rs.stockin.name) {
          direction = GLOBAL.Constants.STOCK_IN; 
        }else{
          direction = GLOBAL.Constants.STOCK_OUT; 
        }
        
        // For each items in StockItemsList, save one stock record
        Model.saveStock(direction, para.stockinprice, para.qty, item);
        
        // Updating the item price as new items stock in.
        /*if (direction == GLOBAL.Constants.STOCK_IN) {
          //item price change only occur when some new items come in
          this.updateItemPrice(para.itemid, parseInt(para.qty), parseFloat(para.stockinprice));
        }*/
        
        var itemInfo = {};
        itemInfo.direction = direction;
        itemInfo.record_id = para.itemid;
        itemInfo.itemID = para.cust_itemid;
        itemInfo.qty = parseInt(para.qty);
        itemInfo.inPrice = parseFloat(para.stockinprice);
        this.updateItemInfo(itemInfo);
        
      }
    }finally {
      lock.releaseLock();
    }    
    
    // Send an Email to Stock Manager
    //this.sendStockEmail();
    
    // for all those items that have been stock in/out, return the latest information of them
    
    return ;
  },
  
  updateItemInfo : function(itemInfo) {
    GLOBAL.Util.infoLog("Entering Stock#updateItemInfo()...");
    GLOBAL.Util.showPara({
      funcName:"Stock#updateItemInfo",
      params:itemInfo
    });
    
    var direction = itemInfo.direction;
    //var itemID = itemInfo.itemID;
    var id = itemInfo.record_id;
    var qty = itemInfo.qty;
    var inPrice = itemInfo.inPrice;
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {    
      var item = Model.getItemByID(id);
      var stockQty = parseInt(item.stockQty);
      var stockPrice = parseFloat(item.stockPrice).toFixed(2);
      
      if (direction == GLOBAL.Constants.STOCK_IN) {
      var newStockPrice = (stockPrice * stockQty + (qty * inPrice)) / (stockQty + qty);
        item.stockQty = stockQty + qty;
        item.stockPrice = newStockPrice.toFixed(2);
      }else{  //When stock out
        item.stockQty = stockQty - qty;
        if (item.stockQty < 0) {
          var msg = "There is not enough stock quantity of the item:" + item.name;
          GLOBAL.Util.errorLog(msg);
          throw new LogicException(msg);
        }
      }
      
      Model.updateItem(item);
      
    }finally {
      lock.releaseLock();
    }
    
  },
  
  end : function() {
    GLOBAL.Util.infoLog("Entering Stock#end()...");
  }
  
}", 
            "type": "server_js"
        }, 
        {
            "id": "96de31e8-fddd-4806-be0a-cb02fa426329", 
            "name": "distribute", 
            "source": "/**
Distribute module containing all the definition 
and methods that are used by Distribute module
@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-04-27
**/

var Distribute = {
  
  //-------------------------------------------------------
  // get latest purchase data to identify the distribute
  //-------------------------------------------------------
  getList : function () {  
    
    GLOBAL.Util.infoLog("Entering Distribute#getList()...");
    
    var results = new Array();
    var timeFmt = "yyyy/MM/dd";
  
    // create a db instance
    var purchases = Model.getPurchases();
    purchases.sort(createComparison("purchaseDate", false));
    
    GLOBAL.Util.debugLog(String.format("The number of Purchase is {0}", purchases.length));
    
    // Mapping the results
    for (var idx=0,len=purchases.length;idx<len;idx++) {
      var purchase = purchases[idx];
      var ob = {};
      ob.id = purchase.record_id;
      ob.aggTime = GLOBAL.Util.formatDateByTime(purchase.purchaseDate, timeFmt);
      ob.startTime = GLOBAL.Util.formatDateByTime(purchase.aggDateStart, timeFmt);
      ob.endTime = GLOBAL.Util.formatDateByTime(purchase.aggDateEnd, timeFmt);
      ob.purchasedTime = GLOBAL.Util.formatDateByTime(purchase.purchasedTime, timeFmt);
      ob.statusId = purchase.statusID;
      ob.status =  GLOBAL.Util.getStatusTitleByValue(purchase.statusID);
      results.push(ob);
    }
    
    GLOBAL.Util.displayObject(results);
    
    
    return results;

  },
  
  //------------------------------------------------------
  //Name:      queryDistDataByPurchaseID
  //Input:     purchaseID
  //Input:     statusID
  //Output:    if there is no dist data for specified purchaseID,
  //           then create them. otherwise, return
  //------------------------------------------------------
  queryDistDataByPurchaseID : function(purchaseID, statusID) {
    GLOBAL.Util.infoLog("Entering queryDistDataByPurchaseID()..." + purchaseID);
    
    //---------------------------------------
    // Start the process
    //---------------------------------------
    var existed = Model.getDistributeMaster(purchaseID);
    
    if (existed.length == 1) {
      GLOBAL.Util.debugLog("There has already been distribute data for this purchase [" + purchaseID + "]");
      return this.createDetailResult(purchaseID); //distribute master record id
    }else if (existed.length > 1){
      var msg = String.format("There are {0} distribute master records which purchaseID is {1}", existed.length, purchaseID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    var branches = Model.getBranches();  //branches should be an array of objects which contain the branch info respectively
    
    var condition = {};
    condition.purchaseID = purchaseID;
    var orders = Model.getOrdersByKey(condition);
    
    var lock = LockService.getPublicLock(); //LOCK the record
    lock.waitLock(30000);
    
    try {
      
      //for distribute master information
      var branchTotalPrice = {};
      var branchStatus = {};
      var branchComment = {};
      
      //add properites for each branch to hold the deliver information
      for (var i=0, max=branches.length;i<max;i++) {
        var brancheName = branches[i].name;
        branchTotalPrice[brancheName] = 0.0;
        branchStatus[brancheName] = GLOBAL.Constants.STATUS.NONE;   //Initialize the status
        branchComment[brancheName] = "";  // Initialize the comment
      }    
      
      //while (orders.hasNext()) {
      for (var idx=0,len=orders.length;idx<len;idx++) {
        
        var order = orders[idx];
        
        var tmpOrderID = order.record_id;
        var tmpBranchID = order.branchID;
        var branch = Model.getBranchByID(tmpBranchID);
            
        
        GLOBAL.Util.debugLog("tmpOrderID is " + tmpOrderID + " and branche id is " + tmpBranchID);
        var orderDetails = order.details;
        
        //every order detail of one specific order should be processed
        for (var idxOd=0;idxOd<orderDetails.length;idxOd++) {
          var tmpOrderDetail = orderDetails[idxOd];
          //var tmpItemID = tmpOrderDetail.item.itemID;
          var tmpItemID = tmpOrderDetail.item.record_id;
          
          GLOBAL.Util.displayObject(tmpOrderDetail);
          
          GLOBAL.Util.debugLog(String.format("Hit one orderDetail[{0}] of Order[{1}]!", tmpOrderDetail.detailID, tmpOrderID));
          
          // get the description and stock of item
          var tmpItemName = "";
          var tmpItemDesc = "";
          var tmpItemStock = 0;
          
          var tmpItem = Model.getItemByID(tmpItemID);
          tmpItemName = tmpItem.name;
          tmpItemDesc = tmpItem.description;
          tmpItemStock = tmpItem.stockQty;
          
          GLOBAL.Util.debugLog(String.format("Current Item name is [{0}]!", tmpItemName));
          // get guide price of item
          var tmpItemPrice = Model.getSupplierInfoByItemID(tmpItemID).guidePrice;
          GLOBAL.Util.debugLog(String.format("Current Item guide price is [{0}]!", tmpItemPrice));
          
          // check if this itemID existed
          var dd = Model.getDistributeDetail(purchaseID, tmpItemID);
          if (dd == null) {
            //if there is no existed detail, create a new one
            GLOBAL.Util.debugLog("No existed Distribute detail is found! Prepare to create an new one!");
            var branchQty = {};  //{key:branchName, value:qty}
            
            branchQty[branch.name] = tmpOrderDetail.itemQty;  //branchQty should be {brancheID : the item quantity that should be delivered to this branch}

            //Master information
            branchTotalPrice[branch.name] += parseFloat(tmpItemPrice) * parseFloat(tmpOrderDetail.itemQty);
            branchStatus[branch.name] = GLOBAL.Constants.STATUS.NEW.value;  // new one
            
            //Prepare the data of one distribute detail
            var item = {
              itemID:tmpItemID,
              itemName:tmpItemName,
              itemDesc:tmpItemDesc,
              stockQty:tmpItemStock,
              guidePrice:tmpItemPrice
            };

            Model.saveDistributeDetail(purchaseID, item, branchQty);
            
          } else {
            //if the distribute detail data is already existed, update the quantity of the item
            
            dd.branchQty[branch.name] += tmpOrderDetail.itemQty;
            Model.updateDistributeDetail(dd);
          }
        }
      }  // while (orderResults.hasNext())
      
      // create the master record of this distribute
      Model.saveDistributeMaster(purchaseID, branchStatus, branchComment, branchTotalPrice, GLOBAL.Constants.STATUS.NEW.value);
      
      return this.createDetailResult(purchaseID); //distribute master record id
      
    }finally{
      lock.releaseLock();
    }
    
  },
  
  //get the distribute master and detail information by purchaseID
  //2 kinds of data: one or more details and one master data
  createDetailResult : function(purchaseID) {
    
    GLOBAL.Util.infoLog("Entering createDetailResult()..." + purchaseID);
    
    var result = {};   // contains all item records and distribute master information.
    var itemRecords = new Array();    // collection of item record (including each branch quantity);
    
    //set purchaseID
    result.purchaseID = purchaseID;
    
    //--------------------------------------------------------
    //prepare detail
    //--------------------------------------------------------
    var details = Model.getDistributeDetails(purchaseID);
    var branches = Model.getBranches();
    
    GLOBAL.Util.debugLog("[BEFORE]There are detail "+details.length+" records of purchase["+purchaseID+"]");
    //Mapping the detail information
    for (var idx=0;idx<details.length;idx++) {
      GLOBAL.Util.debugLog("[IN]INDEX: "+idx);
      var detail = details[idx];
      var record = {};
      record.itemID = detail.item.itemID;
      record.itemName = detail.item.itemName;
      record.salePrice = detail.item.guidePrice;
      
      var branchQty = detail.branchQty;
      for (var i=0; i<branches.length; i++) {
        var branchName = branches[i].name;
        if (branchQty.hasOwnProperty(branchName)) {
          record[branchName] = branchQty[branchName];
        }else{
          record[branchName] = 0;
        }
      }
      //GLOBAL.Util.displayObject(record);
      itemRecords.push(record);
    }
    result.itemRecords = itemRecords;
    
    //--------------------------------------------------------
    //prepare master
    //--------------------------------------------------------
    var master = Model.getDistributeMaster(purchaseID);
    // the result should be only one
    if (master.length != 1) {
      var msg = String.format("There are {0} distribute master records which purchaseID is {1}", dists.length, purchaseID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }
    
    result.master = master[0];
    
    GLOBAL.Util.debugLog("[AFTER]There are detail "+itemRecords.length+" records of purchase["+result.purchaseID+"]");
    return result;
  },
  
  //Update distribute data those connecting particular purchase (by purchaseID)
  //Updating each branch's status and comment, so only distribute master will be updated
  //if all branch's status become "delivered", then the whole distribute (also in distribute master)
  //will also become delivered as well as relative purchase's status.
  confirmDistribute : function(purchaseID, status, comment) {
    GLOBAL.Util.infoLog("Entering confirmDistribute()..." + purchaseID);
    var branches = Model.getBranches();
    
    var masters = Model.getDistributeMaster(purchaseID);
    var purchase;
    var delivered = true;
    
    GLOBAL.Util.displayObject(status);
    GLOBAL.Util.debugLog("There are " + masters.length + " record(s) of distribute master data");
    
    if (masters.length != 1) {   //There is only one master data
      var msg = String.format("There are {0} distribute master records which purchaseID is {1}", masters.length, purchaseID);
      GLOBAL.Util.errorLog(msg);
      throw new BusinessException(msg);
    }      
    
    var master = masters[0];
    for (var idx=0,max=branches.length; idx<max; idx++) {
      var branchName = branches[idx].name;
      if (status.hasOwnProperty(branchName)) {
        GLOBAL.Util.debugLog("setting status for " + branchName + ' which status is ' + status[branchName]);
        master.branchStatus[branchName] = status[branchName];
      }
      if (comment.hasOwnProperty(branchName)){
        master.branchComments[branchName] = comment[branchName];
      }
    }
    
    //if all branch status are 'Delivered', update the master and purchase data
    for (var s in master.branchStatus) {
      //
      if (master.branchStatus[s] == GLOBAL.Constants.STATUS.NEW.value ) {
        GLOBAL.Util.debugLog(s + ' status is ' + master.branchStatus[s]);
        delivered = false;
        break;
      }
    }
    
    if (delivered) {
      GLOBAL.Util.debugLog("So all branches have been delivered!...");
      //set the master to delivered
      master.statusID = GLOBAL.Constants.STATUS.DELIVERED.value;
      master.statusText = GLOBAL.Util.getStatusTitleByValue(master.statusID);
      
      //update the relative purchase to delivered.
      purchase = Model.getPurchase(purchaseID);
      purchase.statusID = GLOBAL.Constants.STATUS.DELIVERED.value;
      
      Model.updatePurchase(purchase);
      GLOBAL.Util.debugLog("Purchase data [" + purchaseID + "] has been updated!");
    }
    
    Model.updateDistrMaster(master);
    GLOBAL.Util.debugLog("Distribute master data has been updated!");
    
    return purchaseID;
  },

  end : function() {
    GLOBAL.Util.infoLog("Entering Purchase#end()...");
  }

}
", 
            "type": "server_js"
        }, 
        {
            "id": "a775efc9-97bb-4f22-9ddd-71f31db6edc3", 
            "name": "stock-ui-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!-- 
  //====================== EVENT FUNCTION =================================
  //----------------- Stock Event -------------------------------------------------------------------
  function queryStock() {
    //getting item type
    var itemType = $("#stock-item-type").find("option:selected").val();
    //alert(itemType);
    google.script.run.withSuccessHandler(onSuccessQeuryStock).processQueryStock(itemType);
    
  }
  
  function addStockInItem() {
    log("Entering addStockInItem...");

    //collecting the inputed items and quantity
    $("#stock-tabs div.item-select-cell").each(function() {
      var $currentItemCell = $(this);   //div
      var $stockQty = $currentItemCell.find("input[name='stockInQty']").first();
      var $stockPrice = $currentItemCell.find("input[name='stockInPrice']").first();
      
      if ($stockQty.val() != "" || $stockPrice.val() != "") {

        //get itemType;
        var itemType = $currentItemCell.find("input[name='itemType']").first().val();
        var itemName = $currentItemCell.find("td[name='itemName']").first().text();
        var currentPrice = $currentItemCell.find("input[name='currentPrice']").first().val();
        var currentQty = $currentItemCell.find("input[name='currentQty']").first().val();
        var description = itemName + " " + $currentItemCell.find("td[name='package']").first().text();
        var supplier = $currentItemCell.find("input[name='supplier']").first().val();
        var itemId = $currentItemCell.find("input[name='itemId']").first().val();    // record_id
        var cust_itemId = $currentItemCell.find("input[name='cus_itemId']").first().val(); //itemID
        
        log("check the item-select-cell..." + $stockQty.val() + " @ " +  $stockPrice.val());
        // if there is already an existed, add the quantity up
        var hit = false;
        $("#stock-item-list tbody tr").each(function () {
          var $fields = $(this).children(); // All 'td'
          log("The fields html content is:" + $(this).html());
          
          var currentItemId = $fields.eq(0).text();  //record_id
          log("currentItemId:" + currentItemId + " itemId:" + itemId);
          
          if (currentItemId == itemId) {
            //sum up the quantity of the same item
            var addedPrice = parseFloat($fields.eq(5).children().first().val());
            var addedVal = parseInt($fields.eq(6).children().first().val());

            var newVal = parseInt($stockQty.val()) + addedVal;
            var newPrice = (parseFloat($stockPrice.val()) * parseInt($stockQty.val()) + addedPrice * addedVal) / newVal; 
            log("The new value is " +  newVal);
            
            if (isNaN(newVal) || isNaN(newPrice)) {
              alert("Please input a number in <<" + itemName + ">>");
              throw new Error("INPUT ERROR");
            }
            //Set new stock in qty
            $fields.eq(6).children().first().val(newVal);  // select the input value
            
            //Set new stock price
            $fields.eq(5).children().first().val(newPrice.toFixed(2));  // renew the input value
            
            hit = true;
          }
        });
        
        // if there is no hit
        if (hit == false) {
          
          //set stock in price as current stock price if there is no input
          var inPrice = $stockPrice.val();
          var stockInPrice = (inPrice == "") ? currentPrice : inPrice;
          
          var oTable = $("#stock-item-list").dataTable();
          oTable.fnAddData([
            itemId,               //record_id
            itemType,             //type
            cust_itemId,          //itemID
            description,          //description
            MESSAGETXT.stockin.name,
            "<input type='text' style='width:35px;' name='stock-in-price' value='"+ stockInPrice +"' />",  //qty
            "<input type='text' style='width:35px;' name='stock-in-qty' value='"+ $stockQty.val() +"' />",  //qty
            currentQty,
            supplier,             //supplier
            "<span name='stock-item-delete'><i class='fa fa-times fa-lg m5'></span>"         //delete
          ]);       

          //Add delete event
          bindDeleteEvent(oTable, 'stock-item-delete');
        }
        

        //clear this input
        $stockPrice.val("");
        $stockQty.val("");
      }
    });
    
  }
  
  function addStockOutItem() {
    log("Entering addStockOutItem...");

    //collecting the inputed items and quantity
    $("#stock-tabs div.item-select-cell").each(function() {
      var $currentItemCell = $(this);   //div
      var $stockQty = $currentItemCell.find("input[name='stockOutQty']").first();
      //displayAll("stockQty", $stockQty);
      //log("currentItemCell:" + $currentItemCell.html());
      
      if ($stockQty.val() != "") {

        log("check the item-select-cell..." + $stockQty.val());
        //get itemType;
        var itemType = $currentItemCell.find("input[name='itemType']").first().val();
        var itemName = $currentItemCell.find("td[name='itemName']").first().text();
        var currentQty = $currentItemCell.find("input[name='currentQty']").first().val();
        var description = itemName + "" + $currentItemCell.find("td[name='package']").first().text();
        var supplier = $currentItemCell.find("input[name='supplier']").first().val();
        var itemId = $currentItemCell.find("input[name='itemId']").first().val();   //record_id
        var cust_itemId = $currentItemCell.find("input[name='cus_itemId']").first().val();  //itemID
        
        // if there is already an existed, add the quantity up
        var hit = false;
        $("#stock-item-list tbody tr").each(function () {
          var $fields = $(this).children(); // All 'td'
          log("The fields html content is:" + $(this).html());
          
          var currentItemId = $fields.eq(0).text();
          log("currentItemId:" + currentItemId + " itemId:" + itemId);
          
          if (currentItemId == itemId) {
            //sum up the quantity of the same item
            var newVal = parseInt($stockQty.val()) + parseInt($fields.eq(5).children().first().val());
            log("The new value is " +  newVal);
            
            if (isNaN(newVal)) {
              alert("Please input a number in <<" + itemName + ">>");
              throw new Error("INPUT ERROR");
            }
            //Set new stock in qty
            $fields.eq(5).children().first().val(newVal);  // select the input value
            
            hit = true;
          }
        });
        
        // if there is no hit
        if (hit == false) {
          var oTable = $("#stock-item-list").dataTable();
          oTable.fnAddData([
            itemId,             //record_id
            itemType,           //type
            cust_itemId,        //itemID
            description,        //description
            MESSAGETXT.stockout.name,
            "0",
            "<input type='text' style='width:35px;' name='stock-out-qty' value='"+ $stockQty.val() +"' />",  //qty
            currentQty,
            supplier,             //supplier
            "<span name='stock-item-delete'><i class='fa fa-times fa-lg m5'></span>"         //delete
          ]);      
          oTable.fnSetColumnVis(5, false);
          
          //Add delete event
          bindDeleteEvent(oTable, 'stock-item-delete');
        }
        
        //clear this input
        $stockQty.val("");
      }
    });
    
  }
  
  function bindDeleteEvent(oTable, spanName) {
    
    //Initialize Delete Button
    $("span[name='"+spanName+"']").unbind("click").bind("click", function(event){
      var target_row = $(this).closest("tr").get(0);
      log("target_row= " + target_row);
      var aPos = oTable.fnGetPosition(target_row); 
      log("delete stock list, aPos=" + aPos);
      oTable.fnDeleteRow(aPos);
    }); 
  }
  
  function submitSaveStock() {
    log("Entering submitSaveStock..." + MESSAGETXT);
    
    //collect all the Stock Items
    var paras = new Array();
    $("#stock-item-list tbody tr").each(function(){  // for each ROW(<tr>) of sbitem
      var idx = 0;
      var para = {};
      $(this).children().each(function() {
        if (idx == 0) {para.itemid = $(this).text();}
        if (idx == 1) {para.type = $(this).text();}
        if (idx == 2) {para.cust_itemid = $(this).text();}
        if (idx == 3) {para.desc = $(this).text();}
        if (idx == 4) {para.direction = $(this).text();}

        //Stock in has one more column [stock in price] than stock out view.
        if (para.direction == MESSAGETXT.stockin.name) {
          if (idx == 5) {
            para.stockinprice = $(this).children().first().val();
          }
          if (idx == 6) {
            para.qty = $(this).children().first().val();
          }
          if (idx == 7) {
            para.currentStock = $(this).text();
          }
          if (idx == 8) {
            para.supplier = $(this).text();
          }
        }else{ //When stock out
          para.stockinprice = 0;
          if (idx == 5) {
            para.qty = $(this).children().first().val();
          }
          if (idx == 6) {
            para.currentStock = $(this).text();
          }
          if (idx == 7) {
            para.supplier = $(this).text();
          }
        }
        idx++;
      });
      paras.push(para);
    });

    //check all input
    if (!checkStockInput(paras)) return false;
    
    //save the stock
    google.script.run.withSuccessHandler(onSuccessSaveStock).processSaveStock(paras);    
  
  }
  

  //====================== CALL BACK FUNCTION =================================
  function onSuccessStockList(res) {
    log("Entering onSuccessStockList...");
    logShowObject(res.itemTypes);
    
    showInfoDialog("", false);

    var selItemTypes = $("#stock-item-type");
    selItemTypes.empty();
    // set the initial value
    selItemTypes.append(
      $("<option />", {
        "value"   : -1,
        "text"    : ""
      }));    
    for (var itemType in res.itemTypes){
      $("<option />", {
      "value"   : itemType,
      "text"    : res.itemTypes[itemType]
      }).appendTo(selItemTypes);
    }
  }
  
  function onSuccessPrepareStock(res) {
    log("Entering onSuccessPrepareStock...");
    
    showInfoDialog("", false);

    //Check if there already has some items put into/take out of stock (but not confirm)
    var oTable = $("#stock-item-list").dataTable();
    var nNodes = oTable.fnGetNodes( );
    
    log("There have been "+nNodes.length+" rows in the table:");
    
    if (nNodes.length > 0) {
      var msg = res.stock.info01;
      confirmDialog(msg)   //if Cancel, then return, otherwise continue
      .done(function(){
        changeStockMenu(res.content);
        //after stock in or out, has to display the latest status of item in Order/Stock item cells
        //refreshStockItems();
      })
      .fail(function(){   
        return;
      });
    } else {
      //Timing: the first time entering the screen, or delete all the items in the list
      prepareStockItemCells(res)
      changeStockMenu(res);
    }
    
    //log("Re-rendering the stock tabs...");
    //$('#stock-tabs').tabs();
  }  
  
  function onSuccessQeuryStock(results){
    log("Entering onSuccessQeuryStock...");

    var oTable = $("#stock-list").dataTable();
    oTable.fnClearTable();
    // result is an array of queried items
    for (var i = 0; i < results.length; i++) {
      var item = results[i];
      oTable.fnAddData([
        item.itemType,    
        item.description, 
        fmoney(item.stockPrice,2),       
        item.stockQty,
        item.safetyQty,            
        item.necessaryQty
      ]);       
    }
  }
  
  function onSuccessSaveStock(results) {
    log("Entering onSuccessSaveStock...");
    
    //clear sb item list
    $("#stock-item-list").dataTable().fnClearTable();
    
    //return to home screen
    var msg = "Stock information has been saved successfully";
    displayHomePage(msg);
    
  }
  
  //====================== OTHER HANDLING FUNCTION =================================
  function prepareStockItemCells(res) {
    log("Entering prepareStockItemCells...");
    var itemTypes = res.itemTypes;
    var items = res.items;
    var stockTabs = $('#stock-tabs');
    
    // reset the stock tabs to reflect the newest item information
    if ($("#stock-tabs>ul").length >= 1) {
      stockTabs.tabs('destroy');
      stockTabs.empty();
    }
    log("Clear the stock tab...:" + stockTabs.html());
    
    // setting menu tabs
    var menuList = $("<ul></ul>");
    menuList.empty();
    for (var i = 0; i < items.length; i++) {
      var itemType = items[i].itemType;
      menuList.append("<li><a href='#stock-tabs-" + itemType + "'>"+ itemTypes[itemType] +"</a></li>");
    }
    menuList.appendTo(stockTabs);
    log("finish creating menuList in stock form...");
    
    // setting select area
    for (var i=0;i<items.length;i++){
      var itemType = items[i].itemType;
      // create a div for each item type
      var itDiv = $("<div style='overflow:hidden'></div>");
      itDiv.attr("id", "stock-tabs-"+itemType+"");  // set unique id by using itemType
      itDiv.appendTo(stockTabs);
      
      var content = items[i].content;
      for (var j=0;j<content.length;j++){
        var imDiv = $("<div></div>");   // div for each item
        imDiv.addClass("fl m5 item-select-cell");
        imDiv.appendTo(itDiv);
        //log("imDiv has been appended...");
        
        //set display content of each select cell
         var cellTable = $("<table></table>");
         
         // the first row ==> item name and quantity
         var tr1 = $("<tr style='height:32px'></tr>");
         var td11 = $("<td name='itemName' class='cell-td-1' title='"+content[j].name+"'>"+content[j].nameDisp+"</td>");
         td11.appendTo(tr1);
         var td12 = $("<td  class='cell-td-2'>Stock<br />"+content[j].stockQty+"/"+content[j].safetyQty+"</td>");
           // create hidden variables
           var hidden1 = $("<input type='hidden' name='itemType' value='"+itemTypes[itemType]+"' />");
           hidden1.appendTo(td12);
           var hidden2 = $("<input type='hidden' name='itemId' value='"+content[j].record_id+"' />");
           hidden2.appendTo(td12);
           var hidden3 = $("<input type='hidden' name='cus_itemId' value='"+content[j].itemID+"' />");
           hidden3.appendTo(td12);
           var hidden4 = $("<input type='hidden' name='currentPrice' value='"+content[j].stockPrice+"' />");
           hidden4.appendTo(td12);
           var hidden5 = $("<input type='hidden' name='currentQty' value='"+content[j].stockQty+"' />");
           hidden5.appendTo(td12);
           var hidden6 = $("<input type='hidden' name='supplier' value='"+content[j].supplier+"' />");
           hidden6.appendTo(td12);
         td12.appendTo(tr1);
         tr1.appendTo(cellTable);
         
         // the second row ==> stockin quantity (only for stock in)
         var tr2 = $("<tr name='tr-stock-in-item' style='height:32px'></tr>");
         var td21 = $("<td name='package' class='cell-td-1'>"+content[j].package+"</td>");
         td21.appendTo(tr2);
         var td22 = $("<td class='cell-td-2'>Qty<br /><input name='stockInQty' type='text' style='width:35px' /></td>");
         td22.appendTo(tr2);
         tr2.appendTo(cellTable);
         
         // the third row ==> stockout quantity (only for stock in)
         var tr3 = $("<tr name='tr-stock-in-item' style='height:32px'></tr>");
         var td31 = $("<td name='stockPrice' class='cell-td-1'>stock price<br />£"+content[j].stockPrice+"</td>");
         td31.appendTo(tr3);
         var td32 = $("<td class='cell-td-2'>in price<br /><input name='stockInPrice' type='text' style='width:35px' /></td>");
         td32.appendTo(tr3);
         tr3.appendTo(cellTable);
         
         // the second (displayed as the second row when stock out is chosen) row 
         // ==> stockout quantity (only for stock out)
         var tr4 = $("<tr name='tr-stock-out-item' style='height:32px'></tr>");
         var td41 = $("<td name='package' class='cell-td-1'>"+content[j].package+"</td>");
         td41.appendTo(tr4);
         var td42 = $("<td class='cell-td-2'>Qty<br /><input name='stockOutQty' type='text' style='width:35px' /></td>");
         td42.appendTo(tr4);
         tr4.appendTo(cellTable);
         
         cellTable.appendTo(imDiv);
      }
    }   
    stockTabs.append("<div style='display: block;height: 0px;clear: both;visibility: hidden;'></div>"); // <!-- hack for IE6 -->
    log("re-rendering the stock tab...");
    stockTabs.tabs();
  }
  
  function changeStockMenu(res) {
    log("Entering changeStockMenu...:" + res.content);
    
    var oTable = $("#stock-item-list").dataTable();
    //OK button is pressed, so
    oTable.fnClearTable();
    
    //Setting different routes
    var titleHtml;
    var $stockInItem = $("tr[name='tr-stock-in-item']");
    var $stockOutItem = $("tr[name='tr-stock-out-item']");
    var $btnStockIn = $("#stock-in-item");
    var $btnStockOut = $("#stock-out-item");
    var $stockMessage = $("#stock-message");
    var iCol = 5; // the index of StockInPrice column


    if (res.content == "#stockin") {
      titleHtml = "<h2>"+res.rs.stockin.formTitle+"</h2>";
      $stockInItem.removeClass("none");
      $stockOutItem.addClass("none");
      $btnStockIn.removeClass("none");
      $btnStockOut.addClass("none");
      $stockMessage.text(res.rs.stockin.info01);
      //reconfigure the item list table
      oTable.fnSetColumnVis(iCol, true);
    }else{
      titleHtml = "<h2>"+res.rs.stockout.formTitle+"</h2>";
      $stockInItem.addClass("none");
      $stockOutItem.removeClass("none");
      $btnStockIn.addClass("none");
      $btnStockOut.removeClass("none");
      $stockMessage.text(res.rs.stockout.info01);
      oTable.fnSetColumnVis(iCol, false);
    }
    $("#stock-form-title").html(titleHtml);  
    
    //$('#stock-tabs').tabs();
  }
  
  function refreshStockItems() {
    log("Now preparing to refresh the stock items (stock price and quantity)...");
    //FIXME: 
    //google.script.run.withSuccessHandler(onSuccessRefreshStockItems).processRefreshStockItems();
  }
  
  //Input Check
  function checkStockInput(paras) {
  
    log("Entering checkStockInput...");
    logShowObject(paras);
    
    var errmsg = "";
    for (var idx=0;idx<paras.length;idx++) {
      var para = paras[idx];
      //Check price
      if (isNaN(para.stockinprice)) errmsg += "The price of item ["+para.itemid+"] should be a number but it is [" +para.stockinprice+ "]<br />";
      //Check quantity
      if (isNaN(para.qty)) errmsg += "The quantity of item ["+para.itemid+"] should be a number but it is [" +para.qty+ "]<br />";
      
      if (!isNaN(para.qty)) {
      
        //Check whether there is sufficient stock
        if (para.direction == "OUT") {
          if (parseInt(para.qty) > parseInt(para.currentStock))
            errmsg += "There is not enough stock of item ["+para.itemID+"] <br />";
        }
      }
    }
    
    if (errmsg != "") {
      log(errmsg);
      showErrorDialog(errmsg);
      return false;
    }
    
    return true;
  }
  //
/*  function onSuccessRefreshStockItems(results) {
    log("Entering onSuccessSaveStock...");
  }*/
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "ac20408c-980c-44c7-a8c5-a55b8372a213", 
            "name": "order-ui-js", 
            "source": "<!-- Part of main-page.html -->
  <script language="javascript" type="text/jscript">
  <!-- 
  //====================== EVENT FUNCTION =================================
  //-----------------Order Event ---------------
  function addOrderSBItems() {
    log("Entering addOrderSBItems...");

    //collecting the inputed items and quantity
    var sbitems = new Array();
    var oTable = $("#order-sbitem-list").dataTable();

     $("#order-tabs div.item-select-cell").each(function() {
      var $currentItemCell = $(this);   //div
      var $orderQty = $currentItemCell.find("input[name='orderQty']").first();
      log("orderQty..." + $orderQty.val());
      
      if ($orderQty.val() != "") {
      

        //get item information;
        var itemType = $currentItemCell.find("input[name='itemType']").first().val();
        var itemName = $currentItemCell.find("td[name='itemName']").first().text();
        //var description = $currentItemCell.find("td[name='description']").first().text();
        var description = $currentItemCell.find("td[name='description']").first().attr("title");
        var supplier = $currentItemCell.find("input[name='supplier']").first().val();
        var itemId = $currentItemCell.find("input[name='itemId']").first().val();  //should be record_id
        var cus_itemId = $currentItemCell.find("input[name='cus_itemId']").first().val();  //should be itemID

        log("check the item-select-cell..." + $orderQty.val());
        if (isNaN($orderQty.val())) {
          showErrorDialog(String.format(MESSAGETXT.errormsg.msg01,itemName));
          throw new Error("[ERROR][Order]-The input value of " + itemName + " should be number, but is " + $orderQty.val());
        }

        log("[Order]input data are:[" + itemType + "][" + itemName + "][" + description + "][record_id:" + itemId + "]" );
        
        // if there is already an existed, add the quantity up
        var hit = false;
        $("#order-sbitem-list tbody tr").each(function () {
          var $fields = $(this).children(); // All 'td'
          log("[Order]fields:[" + $fields.html() + "]" );

          var currentItemId = $fields.eq(1).text();    // 0=itemType, 1=itemId(record_id), 2=cust_itemId(from upload file), etc.,
          log("[Order]currentItemId:[" + currentItemId + "] and itemId:[" + itemId + "]" );

          if (currentItemId == itemId) {
            //sum up the quantity of the same item
            //var newVal = parseInt($orderQty.val()) + parseInt($fields.eq(3).children().first().val()); 
            var newVal = parseInt($orderQty.val()) + parseInt($fields.eq(4).children().first().val()); //3->4, for adding ID
            log("[Order]the input value is " + newVal + " while item name is "+ itemName);

            if (isNaN(newVal)) {
              showErrorDialog("Please input a number in '" + itemName + "' quantity");
              throw new Error("[ERROR][Order]-The input value of " + itemName + " should be number, but is " + newVal);
            }
            //$fields.eq(3).children().first().val(newVal);  // select the input value
            $fields.eq(4).children().first().val(newVal);  // 3->4 for the same reason
            hit = true;
          }
        });
        
        // if there is no hit
        if (hit == false) {
          oTable.fnAddData([
            itemType,          //type
            itemId,            //record_id
            cus_itemId,        //item id (not shown)
            description,          //description
            "<input type='text' style='width:35px;' name='sbitem-qty' value='"+ $orderQty.val() +"' />",  //qty
            supplier,             //supplier
            "<span name='order-sbitem-delete'><i class='fa fa-times fa-lg m5'></i></span>"         //delete
          ]);       
        }
        
        //Initialize Delete Button
        $("span[name='order-sbitem-delete']").unbind("click").bind("click", function(event){
          //displayAll('event',event);
          var target_row = $(this).closest("tr").get(0);
          log("target_row= " + target_row);
          var aPos = oTable.fnGetPosition(target_row); 
          log("delete sb list, aPos= " + aPos);
          oTable.fnDeleteRow(aPos);
        }); 
    
        //clear this input
        $orderQty.val("");
      }
    });
    
    //display the submit button
    $("#order-submit").removeClass("none");

  }
  
  function submitSaveOrder() {
    log("Entering submitSaveOrder...");
    //check all input
    //if (!checkAllInput()) return false;
    
    //collect all the SBItems
    var para = new Array();
    var idx;
    
    $("#order-sbitem-list tbody tr").each(function(){  // for each ROW(<tr>) of sbitem
      
      idx = 0;
      var item = {};
      
      $(this).children().each(function() {
        //TYPE,ITEMID,DESCRIPTION,QTY,SUPPLIER,DELETE  // has already add 1 for adding ID
        if (idx == 0) {item.type = $(this).text();}
        if (idx == 1) {item.id = $(this).text();}
        if (idx == 2) {item.itemID = $(this).text();}
        if (idx == 3) {item.name = $(this).text();}
        
        if (idx == 4) {
          item.qty = $(this).children().first().val();
        }
        if (idx == 5) {item.supplier = $(this).text();}
        idx++;
      });
      
      log("check the item.qty:" + item.qty);
      if (item.qty == "" || isNaN(item.qty)) {
        showErrorDialog(String.format(MESSAGETXT.errormsg.msg01,itemName));
        throw new Error("[ERROR][Order]-The input value of " + item.name + " should be number, but is " + item.qty);
      }
      
      para.push(item);
      log("idx:" + idx);  //When no data, idx should be 1?
      
    });

    if (idx ==1 && para.length == 1) {
      showErrorDialog(MESSAGETXT.errormsg.msg02);  //Only that row: 'No data available in table'
    }else{
      google.script.run.withSuccessHandler(onSuccessPlaceOrder).processPlaceOrder(para);
    }
  
  }
  
  function submitSaveOrderLog() {
    log("Entering submitSaveOrderLog...");
    
    var details = new Array();
    var hit = false;
    
    //Collect the order id
    var orderID = $("#orderlog-order-id").text();
    
    $("#order-log-list tbody tr").each(function(){  // for each ROW(<tr>) of sbitem
    //check all input
      //log("this html is:" + $(this).find("input[name='od-item-qty']"));
      
      var itemID = $(this).find("input[name='od-item-id']").first().val();
      var qty = $(this).find("input[name='od-item-qty']").first().val();
      log('OrderLog#qty:' + qty);
      
      if (qty == undefined) return; // {NOT *continue*} //No data or order is delivered, so no input text thus 'undefined'. 
      
      hit = true;  //At least one detail left
      
      if (qty == "" || isNaN(qty)) {
        showErrorDialog("Please input a number in item's quantity");
        throw new Error("[ERROR][Order]-The input value of item should be number, but is " + qty);
      }
      
      log("detail["+ itemID +"]'s qty is:" + qty);
      
      var detail = {itemID:itemID, itemQty:qty};
      details.push(detail);
      
    });
    
   log("OrderLog#hit:" + hit);
    
   if (!hit) {
      var result = confirmDialog(function() {
        log("Will continue to next step!");
      },
      "This order will be deleted. ");  //Only that row: 'No data available in table'
      log("result:"+result);
    }else{
      log("Going to call processUpdateOrder:" + orderID + ":" + details);
      google.script.run.withSuccessHandler(onSuccessUpdateOrder).processUpdateOrder(orderID, details);
    } 
   
  }
  
  //====================== CALL BACK FUNCTION =================================
  function onSuccessPrepareOrder(res) {
    log("Entering onSuccessPrepareOrder...");

    showInfoDialog("", false);

    $("#order-sbitem-list").dataTable().fnClearTable();
    $("#order-submit").addClass("none");
    
    var itemTypes = res.itemTypes;
    var items = res.items;
    var orderTabs = $('#order-tabs');
    
    // reset the tabs
    if ($("#order-tabs>ul").length >= 1) {
       orderTabs.tabs('destroy');
       orderTabs.empty();
    }
    log("Clear the order tab...:" + orderTabs.html());
    
    // setting tabs
    var menuList = $("<ul></ul>");
    for (var i = 0; i < items.length; i++) {
      var itemType = items[i].itemType;
      menuList.append("<li><a href='#order-tabs-" + itemType + "'>"+ itemTypes[itemType] +"</a></li>");
    }
    menuList.appendTo(orderTabs);
    log("finish creating menuList in order form...");
    
    // setting select area
    for (var i=0;i<items.length;i++){
      
      var itemType = items[i].itemType;
      //var itemTypeCode = items[i].itemTypeCode;  <== seems no use
      
      // create a div for each item type
      var itDiv = $("<div style='overflow:hidden'></div>");
      itDiv.attr("id", "order-tabs-"+itemType+"");  // set unique id by using itemType
      itDiv.appendTo(orderTabs);

      var content = items[i].content;
      // create a select cell for each item and put it in item type div
      for (var j=0;j<content.length;j++){
        var imDiv = $("<div></div>");
        imDiv.addClass("fl m5 item-select-cell");
        imDiv.appendTo(itDiv);
        //log("imDiv has been appended...");
        
        //set display content of each select cell
         var cellTable = $("<table></table>");
         
         // the first row
         var tr1 = $("<tr style='height:32px'></tr>");
         var td11 = $("<td name='itemName' class='cell-td-1' title='"+content[j].name+"'>"+content[j].nameDisp+"</td>");
         td11.appendTo(tr1);
         var td12 = $("<td class='cell-td-2'>Qty</td>");
           // create hidden variables
           var hidden1 = $("<input type='hidden' name='itemType' value='"+itemTypes[itemType]+"' />");
           hidden1.appendTo(td12);
           var hidden2 = $("<input type='hidden' name='itemId' value='"+content[j].record_id+"' />");
           hidden2.appendTo(td12);
           var hidden3 = $("<input type='hidden' name='cus_itemId' value='"+content[j].itemID+"' />");
           hidden3.appendTo(td12);
           var hidden4 = $("<input type='hidden' name='supplier' value='"+content[j].supplier+"' />");
           hidden4.appendTo(td12);
         td12.appendTo(tr1);
         tr1.appendTo(cellTable);
         
         // the second row
         var tr2 = $("<tr style='height:32px'></tr>");
         var td21 = $("<td name='description' class='cell-td-1' title='"+content[j].description+"'>"+content[j].package+"</td>");
         td21.appendTo(tr2);
         var td22 = $("<td class='cell-td-2'><input name='orderQty' type='text' style='width:35px' /></td>");
         td22.appendTo(tr2);
         tr2.appendTo(cellTable);
         
         cellTable.appendTo(imDiv);
      }
    }
    orderTabs.append("<div style='display: block;height: 0px;clear: both;visibility: hidden;'></div>"); // <!-- hack for IE6 -->

    log("== refresh the order tab...:" + $("#order").html());

    orderTabs.tabs();  // set the style of order tabs

  }
  function onSuccessOrderLog(order) {
    log("Entering onSuccessOrderLog...");
    var oTable = $("#order-log-list").dataTable();
    oTable.fnClearTable();
    
    //Setting order information
    $("#orderlog-order-id").text(order.record_id);
    $("#orderlog-order-branch").text(order.branchName);
    $("#orderlog-order-placedate").text(order.placeDate);
    $("#orderlog-order-status").text(order.statusText);

    //Setting order detail information
    var details = order.details;
    // result is an array of queried items
    for (var i = 0; i < details.length; i++) {
      var detail = details[i];
      
      console.log("detail ["+i+"]'s type is ["+detail.itemType+"]");
      if (!detail.valid) continue;  //Only display those not deleted
      
      var itemQtyText, deleteText;
      
      if (order.statusID == STATUS.DELIVERED.value) {
        itemQtyText = detail.itemQty;
        deleteText = "";
      }else{
        itemQtyText = "<input type='hidden' name='od-item-id' value='"+detail.item.record_id+"'><input type='text' style='width:40px;' name='od-item-qty' value='"+ detail.itemQty +"' />";
        deleteText = "<span name='od-item-delete'><i class='fa fa-times fa-lg m5'></i></span>";
      }
      
      oTable.fnAddData([
        detail.itemType,    
        detail.description, 
        itemQtyText,  //qty
        fmoney(detail.itemPrice,2),
        detail.supplier,            
        deleteText
      ]);         
    }
    
    // Initialize Delete Button
    $("span[name='od-item-delete']").bind("click", function(event){
        //displayAll('event',event);
        var target_row = $(this).closest("tr").get(0);
        var aPos = oTable.fnGetPosition(target_row); 
        log("delete order detail list, aPos=" + aPos);

        oTable.fnDeleteRow(aPos);
    }); 
    
    //close the info dialog
    showInfoDialog("", false);

  }
  
  function onSuccessPlaceOrder(order){
    log("Entering onSuccessPlaceOrder...");
    
    //clear sb item list
    $("#order-sbitem-list").dataTable().fnClearTable();
    
    //return to home screen
    var msg = "Order [" + order.record_id + "] has been created successfully. An email will be sent to your address";
    displayHomePage(msg);
  }
  
  function onSuccessUpdateOrder(order){
    log("Entering onSuccessUpdateOrder...");
    
    //clear order log list
    $("#order-log-list").dataTable().fnClearTable();
    
    //return to home screen
    var msg = "Order [" + order.record_id + "] has been updated successfully. An email will be sent to your address";
    displayHomePage(msg);
  }  
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "eda6f699-93b9-494d-83e5-5515c3c55620", 
            "name": "purchase-ui-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!-- 
  //====================== EVENT FUNCTION =================================
  function queryPurchase() {
    log("Entering queryPurchase...");

    //getting two date
    var start = $("#purchase-query-from").val();
    var end = $("#purchase-query-to").val();
    
    log("start:" + start + "  end:" + end);
    
    if (!isValidDate(start)||!isValidDate(end)) {
      showErrorDialog("Please input a valid date in START and END date");
      return;
    }
    //check the date input
    if (start > end) {
      showErrorDialog("The END date should be behind START date.");
      return;
    }    
    
    showInfoDialog(MESSAGETXT.common.querymsg001, true);

    google.script.run.withSuccessHandler(onSuccessQeuryPurchase).processQueryPurchase(start, end);
    
  }
  
  function clearQueryPurchase() {
    log("Entering clearQueryPurchase...");

    $("#purchase-query-from").val("");
    $("#purchase-query-to").val("");
  }
  
  function setToPurchased() {
    log("Entering setToPurchased...");
    var purchaseID = $("#purchase-purchaseid").val();
    log("purchaseID is " + purchaseID);
    google.script.run.withSuccessHandler(onSuccessSetToPurchased).processSetToPurchased(purchaseID);
    
  }
  
  function displayPurchaseDetail(purchaseID, statusID, form){
    
    log("Entering displayPurchaseDetail... " + purchaseID + ":" + statusID);
    showInfoDialog(MESSAGETXT.common.querymsg001, true);
    //log("[displayPurchaseDetail]this is:" + $(form).parent().html());
    $(form).parent().addClass("selected-row");

    google.script.run.withSuccessHandler(onSuccessDisplayPurchaseDetail).processDisplayPurchaseDetail(purchaseID, statusID);
    
  }
  
  function updatePurchaseDetail() {
    log("Entering updatePurchaseDetail...");
    var purchaseID = $("#purchase-log-id").val();

    log("purchaseID is " + purchaseID);
    //collect all the SBItems
    var para = new Array();
    var idx;
    
    $("#purchase-detail-list tbody tr").each(function(){  // for each ROW(<tr>) of sbitem
      
      idx = 0;
      var detail = {};
      
      $(this).children().each(function() {

//TYPE NAME SUPPLIER GUIDEDPRICE PURCHASEPRICE STOCKQTY ORDERQTY PURCHASEQTY COMMENT
        if (idx == 1) {detail.name = $(this).text();}
        if (idx == 4) {detail.purchasePrice = $(this).children().first().val();}
        if (idx == 7) { //There are two info here: itemID and purchase quantity
          detail.itemID = $(this).children().first().val();
          detail.purchaseQty = $(this).children().eq(1).val();
        }
        if (idx == 8) {detail.comment = $(this).children().first().val();}
        idx++;
      });
      
      log("check the detail.purchasePrice:" + detail.purchasePrice);
      if (detail.purchasePrice == "" || isNaN(detail.purchasePrice)) {
        showErrorDialog("Please input a number in '" + detail.name + "' purchase price");
        throw new Error("[ERROR][Purchase]-The input value of " + detail.name + " should be number, but is " + detail.purchasePrice);
      }
      log("check the detail.purchaseQty:" + detail.purchaseQty);
      if (detail.purchaseQty == "" || isNaN(detail.purchaseQty)) {
        showErrorDialog("Please input a number in '" + detail.name + "' quantity");
        throw new Error("[ERROR][Purchase]-The input value of " + detail.name + " should be number, but is " + detail.purchaseQty);
      }
      
      para.push(detail);
      log("idx:" + idx);  //When no data, idx should be 1 (only one row show no data...)
      
    });

    if (idx ==1 && para.length == 1) {
      showOKDialog("There is no purhcase detail data to be placed.");  //Only that row: 'No data available in table'
    }else{
      google.script.run.withSuccessHandler(onSuccessUpdatePurchaseDetail).processUpdatePurchaseDetail(purchaseID, para);
    }
  
    
  }
    
  //====================== CALL BACK FUNCTION =================================
  //------------------ For Purchase ------------------------------------------------
  function onSuccessQeuryPurchase(res){
    log("Entering onSuccessQeuryPurchase...");
    
    showInfoDialog("", false);

    var oTable = $("#purchase-list").dataTable();
    oTable.fnClearTable();

    //prepare purchase details information
    if (!res || res.results.length == 0) {
      showOKDialog("There is no order during the period.");
      return;
    }
    
    var results = res.results;
    var purchaseID = res.purchaseID;
    
    //set purchase id
    $("#purchase-purchaseid").val(purchaseID);
    
    var hit = false;   // using for check whether all items can be get from stock
    for (var i = 0; i < results.length; i++) {
      var result = results[i];
      log("handling result " + i);
      
      oTable.fnAddData([
        result.itemCode,    
        result.itemDesc, 
        fmoney(result.guidedPrice,2), 
        result.orderQty,       
        result.stockQty,
        result.purchaseQty,            
        result.supplier
      ]);       
      
      if (result.purchaseQty > 0) {  // if one of items need to be purchased outside
        hit = true;
      }
    }  
    
    log("purchase list data has been set!");
    
    if (!hit) { //no item needs to be purchased outside
      $("#all-in-stock-msg").removeClass("none");
      $("#set-to-purchased").removeClass("none");
    }
  }
  
  
  function onSuccessSetToPurchased(res) {
    log("Entering onSuccessSetToPurchased...:" + res);
    
    //clear sb item list
    $("#purchase-list").dataTable().fnClearTable();
    
    //return to home screen
    var msg = "Purchase [" + res + "] has been updated to [PURCHASED] successfully. Please check 'Purchase Log'";
    displayHomePage(msg);  
  }


  function onSuccessUpdatePurchaseDetail(res) {
    log("Entering onSuccessUpdatePurchaseDetail...:");
    
    logShowObject(res);
    
    //clear all tables
    $("#purchase-log-list").dataTable().fnClearTable();
    $("#purchase-detail-list").dataTable().fnClearTable();
    
    //return to home screen
    var msg = "Purchase [" + res.record_id + "] has been updated to [PURCHASED] successfully. Please check 'Purchase Log'";
    displayHomePage(msg);  
  }
  
  
  function onSuccessPurchaseLog(results) {
    log("Entering onSuccessPurchaseLog...");

    var STATUS = JSON.parse($("input[name='status']").first().val());

    var oTable = $("#purchase-log-list").dataTable();
    oTable.fnClearTable();
    
    // result is an array of queried items
    for (var i = 0; i < results.length; i++) {
      var result = results[i];
      
      //var operation = (result.statusID == STATUS.NEW.value) ? "Add detail" : "Show detail";
      var operation = (result.statusID == STATUS.NEW.value) ? 
          "<i class='fa fa-pencil-square-o fa-lg m5'></i>" : 
          "<i class='fa fa-search-plus fa-lg m5'></i>";
      
      oTable.fnAddData([
        result.aggTime,    
        result.startTime, 
        result.endTime,       
        result.purchasedTime,
        result.status,
     //   "<button class='table-button' onclick='displayPurchaseDetail("+result.purchaseId+","+result.statusID+",this.parentNode)'>"+operation+"</button>"
        "<span onclick='displayPurchaseDetail("+result.purchaseId+","+result.statusID+",this.parentNode)'>"+operation+"</span>"
      ]);         
    }
    
    //rendering the button
    $(".table-button")
      .button()
      .click(function( event ) {
        event.preventDefault();
      });
    
    
    //close info window
    showInfoDialog("", false);

  }
  
  function onSuccessDisplayPurchaseDetail(res) {
    console.log("Entering onSuccessDisplayPurchaseDetail... " + res);

    var oTable = $("#purchase-detail-list").dataTable();
    oTable.fnClearTable();
    
    var purchaseID = res.purchaseID;
    //save purchase id in the page
    $("#purchase-log-id").val(purchaseID);
    
    var details = res.results;
    
    // result is an array of queried items
    for (var i = 0; i < details.length; i++) {
      var detail = details[i];
      
      logShowObject(detail);
      
      var pPrice, pQty, comment;
      
      if (detail.status == STATUS.NEW.title ) {
        pPrice = "<input type='text' name='purchase-detail-purchase-price' class='table-input input-price' value='"+detail.purchasePrice+"' >";
        pQty = "<input type='hidden' name='od-item-id' value='"+detail.itemID+"'><input type='text' name='purchase-detail-purchase-qty' class='table-input input-qty' value='"+detail.purchaseQty+"' >";
        comment = "<input type='text' name='purchase-detail-purchase-comment' class='table-input' value='"+detail.comment+"' >";
        $("#update-purchased").removeClass("none");

      } else {
        pPrice = detail.purchasePrice;
        pQty = detail.purchaseQty;
        comment = detail.comment;
      }
      //console.log("Purchase Price is: " + pPrice);
      
      oTable.fnAddData([
        detail.itemType,    
        detail.itemName, 
        detail.supplier,       
        fmoney(detail.guidePrice,2),
        fmoney(pPrice,2),
        detail.stockQty,
        detail.orderQty,
        pQty,
        comment
      ]);         
    }
    
    //close info window
    showInfoDialog("", false);

  }
  
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "478dfa3c-5f41-469c-9286-aa7422d95d04", 
            "name": "management-ui-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!-- 
  //====================== EVENT FUNCTION =================================
  //----------------- Item Management Event -----------------------------------
  function submitQueryItems() {
    //getting item type
    var itemType = $("#select-item-type").find("option:selected").val();
    log(itemType + " is selected...");
    
    google.script.run.withSuccessHandler(onSuccessQeuryItem).processQueryItem(itemType);
    
  }

  function clearQueryItems() {
    log("Entering clearQueryItems...");

    $("#select-item-type").val("");

    var oTable = $("#emmgr-item-list").dataTable();
    oTable.fnClearTable();

  }
  
  //----------------- Supplier Management Event -----------------------------------
  function submitQuerySuppliers() {
    // get the input conditions
    var params = {};
    
    params.suppname = $("#suppname").val();
    params.suppemail = $("#suppemail").val();
    params.supptel = $("#supptel").val();
    params.suppfax = $("#suppfax").val();
    
    log(JSON.stringify(params));
    
    google.script.run.withSuccessHandler(onSuccessQeurySupplier).processQuerySupplier(params);
    
  }
  
  function clearQuerySuppliers() {
    log("Entering clearQuerySuppliers...");

    $("#suppname").val("");
    $("#suppemail").val("");
    $("#supptel").val("");
    $("#suppfax").val("");

    var oTable = $("#suppmgr-supplier-list").dataTable();
    oTable.fnClearTable();

  }
  
  //====================== CALL BACK FUNCTION =================================
  //------------------ For Item Management -------------------------------------
  function onSuccessItemMgr(res) {
    log("Entering onSuccessItemMgr...");
    logShowObject(res.itemTypes);
    
    showInfoDialog("", false);

    var selItemTypes = $("#select-item-type");
    selItemTypes.empty();
    // set the initial value
    selItemTypes.append(
      $("<option />", {
        "value"   : -1,
        "text"    : ""
      }));
    // set the current values  
    for (var itemType in res.itemTypes){
      $("<option />", {
      "value"   : itemType,
      "text"    : res.itemTypes[itemType]
      }).appendTo(selItemTypes);
    }
  }
  
  function onSuccessItemFile(url) {
    log("Entering onSuccessItemFile...");
    $("#upload-status").text("File has been uploaded successfully. url:" + url);
  }
  
  function onSuccessQeuryItem(results){
    log("Entering onSuccessQeuryItem...");

    logShowObject(results);

    var oTable = $("#itemmgr-item-list").dataTable();
    oTable.fnClearTable();

    // result is an array of queried items
    for (var i = 0; i < results.length; i++) {
      var item = results[i];
      oTable.fnAddData([
        item.itemTypeName,    
        item.code,    
        item.name,    
        item.package,    
        fmoney(item.stockPrice, 2),       
        item.stockQty,
        item.safetyQty,            
        item.stockPlace,            
        item.supplier        
      ]);       
    }
  } 
  
  //------------------ For Supplier Management -------------------------------------
  function onSuccessSupplierFile(url) {
    log("Entering onSuccessSupplierFile...");
    $("#upload-supplier-status").text("File has been uploaded successfully. url:" + url);
  }

  function onSuccessQeurySupplier(results){
    log("Entering onSuccessQeurySupplier...");

    var oTable = $("#suppmgr-supplier-list").dataTable();
    oTable.fnClearTable();

    // result is an array of queried items
    for (var i = 0; i < results.length; i++) {
      var item = results[i];
      oTable.fnAddData([
        item.name,    
        item.email ? item.email : "",    
        item.address ? item.address : "",    
        item.telno ? item.telno : "",    
        item.faxno ? item.faxno : ""        
      ]);       
    }
  }  
  
  
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "f386422d-19e8-4c1a-9871-455fbc54fb5a", 
            "name": "filehandler", 
            "source": "/**
Model module containing all the definition 
and methods that manipulating business data

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-02-28
**/

var FileHandler = {

  // getRowsData iterates row by row in the input range and returns an array of objects.
  // Each object contains all the data for a given row, indexed by its normalized column name.
  // Arguments:
  //   - sheet: the sheet object that contains the data to be processed
  //   - range: the exact range of cells where the data is stored
  //   - columnHeadersRowIndex: specifies the row number where the column names are stored.
  //       This argument is optional and it defaults to the row immediately above range;
  // Returns an Array of objects.
  getRowsData : function (sheet, range, columnHeadersRowIndex) {
    columnHeadersRowIndex = columnHeadersRowIndex || range.getRowIndex() - 1;
    var numColumns = range.getLastColumn() - range.getColumn() + 1;
    var headersRange = sheet.getRange(columnHeadersRowIndex, range.getColumn(), 1, numColumns);
    var headers = headersRange.getValues()[0];
    //return getObjects(range.getValues(), normalizeHeaders(headers));
    return this.getObjects(range.getValues(), headers);
  },  
  
  
  // For every row of data in data, generates an object that contains the data. Names of
  // object fields are defined in keys.
  // Arguments:
  //   - data: JavaScript 2d array
  //   - keys: Array of Strings that define the property names for the objects to create
  getObjects :function (data, keys) {
    var objects = [];
    for (var i = 0; i < data.length; ++i) {
      var object = {};
      var hasData = false;
      for (var j = 0; j < data[i].length; ++j) {
        var cellData = data[i][j];
        if (this.isCellEmpty(cellData)) {
          object[keys[j]] = "";   // to keep the column exist
          continue;
        }
        object[keys[j]] = cellData;
        hasData = true;
      }
      if (hasData) {
        objects.push(object);
      }
    }
    return objects;
  },
  
  // Returns an Array of normalized Strings.
  // Arguments:
  //   - headers: Array of Strings to normalize
  normalizeHeaders:function(headers) {
    var keys = [];
    for (var i = 0; i < headers.length; ++i) {
      var key = this.normalizeHeader(headers[i]);
      if (key.length > 0) {
        keys.push(key);
      }
    }
    return keys;
  },
  
  // Normalizes a string, by removing all alphanumeric characters and using mixed case
  // to separate words. The output will always start with a lower case letter.
  // This function is designed to produce JavaScript object property names.
  // Arguments:
  //   - header: string to normalize
  // Examples:
  //   "First Name" -> "firstName"
  //   "Market Cap (millions) -> "marketCapMillions
  //   "1 number at the beginning is ignored" -> "numberAtTheBeginningIsIgnored"
  normalizeHeader:function(header) {
    var key = "";
    var upperCase = false;
    for (var i = 0; i < header.length; ++i) {
      var letter = header[i];
      if (letter == " " && key.length > 0) {
        upperCase = true;
        continue;
      }
      if (!isAlnum(letter)) {
        continue;
      }
      if (key.length == 0 && isDigit(letter)) {
        continue; // first character must be a letter
      }
      if (upperCase) {
        upperCase = false;
        key += letter.toUpperCase();
      } else {
        key += letter.toLowerCase();
      }
    }
    return key;
  },
  
  // Returns true if the cell where cellData was read from is empty.
  // Arguments:
  //   - cellData: string
  isCellEmpty:function(cellData) {
    return typeof(cellData) == "string" && cellData == "";
  },
  
  // Returns true if the character char is alphabetical, false otherwise.
  isAlnum:function(char) {
    return char >= 'A' && char <= 'Z' ||
      char >= 'a' && char <= 'z' ||
        this.isDigit(char);
  },

// Returns true if the character char is a digit, false otherwise.
  isDigit:function(char) {
    return char >= '0' && char <= '9';
  },

// Given a JavaScript 2d Array, this function returns the transposed table.
// Arguments:
//   - data: JavaScript 2d Array
// Returns a JavaScript 2d Array
// Example: arrayTranspose([[1,2,3],[4,5,6]]) returns [[1,4],[2,5],[3,6]].
  arrayTranspose:function(data) {
    if (data.length == 0 || data[0].length == 0) {
      return null;
    }
    
    var ret = [];
    for (var i = 0; i < data[0].length; ++i) {
      ret.push([]);
    }
    
    for (var i = 0; i < data.length; ++i) {
      for (var j = 0; j < data[i].length; ++j) {
        ret[j][i] = data[i][j];
      }
    }
    
    return ret;
  }  ,
  
  //----------------------------------------------------
  // Convert the file into corresponding google doc type
  //----------------------------------------------------
  convert : function (fileBlob, convertedFileName) {
    
    var file = {
      title: convertedFileName
      //mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    };

    file = Drive.Files.insert(file, fileBlob,{
      convert: true
    });
    
    GLOBAL.Util.debugLog(String.format('ID: {0}, and size is {1}', file.id, file.fileSize));
    
    return file;
  },  
  
  moveFileToFolder:function(file, folderName) {  //used for those files that created in root folder
    //var newfile=file.makeCopy('copy of '+file.getName());// here you can define the copy name the way you want...
    var folders = DriveApp.getFoldersByName(folderName);
    var folder;
    while(folders.hasNext()) {
      folder = folders.next();
    }
    
    if (folder) {
      file.addToFolder(folder);//  add the copy to the folder
    }
    
    file.removeFromFolder(DriveApp.getRootFolder());// and remove it from your root folder
    
  },
  end : function() {
    GLOBAL.Util.infoLog("Entering Model#end()...");
  }
  
}", 
            "type": "server_js"
        }, 
        {
            "id": "8a7ba788-6bd7-419f-89ad-3ee49dbdb01a", 
            "name": "resource", 
            "source": "var MESSAGETXT_EN = {
  
  home : {
    name : "Home"
    ,formTitle : "Cloud Logistics Management"
  },

  order : {
    name : "Order"
    ,formTitle : "Order Form"
    ,inputTitle: "Selecting Items"
    ,addSBItemTitle: "Add Items"
    ,outputTitle: "Selected Items List"
    ,placeOrderTitle: "Place Order"
    ,info01: "Please double check the information before you submit these orders"
  },
  
  orderlog : {
    name : "Order Log"
    ,formTitle : "Order Log Form"
    ,inputTitle: "Summary of Order"
    ,outputTitle: "Current Order Details"
    ,updateOrderTitle: "Update Order"
  },

  purchase : {
    name : "Purchase"
    ,formTitle : "Purchase Form"
    ,inputTitle: "Aggregating Purchases"
    ,outputTitle: "Aggregated Items List"
    ,info01: "All Items can be delivered from stock directly. Click <em>'Set to Purhcased'</em> button to set all purchase detail into <em>'Purchased'</em>."
    ,setPurchasedTitle:"Set to Purchased"
  },

  purchaselog : {
    name       : "Purchasing Log"
    ,formTitle : "Purchasing Log Form"
    ,inputTitle: "Latest Purhcasing List"
    ,outputTitle: "Purchase Detail List"
    ,purchaseAllTitle: "Purchase All"
  },

  stock : {
    name         : "Stock"
    ,formTitle   : "Stock Form"
    ,inputTitle  : "Query Stocking Items"
    ,outputTitle : "Current Stocking Items"
    ,queryTitle  : "Query"
    ,info01      : "There are still some data have not been handled. Do you want to continue anyway?"
  },

  stockin : {
    name         : "Stock IN"
    ,formTitle   : "Stock IN Form"
    ,inputTitle  : "Selecting Items"
    ,outputTitle : "Selected Items List"
    ,btnTitle    : "Put into stock"
    ,info01      : "Following items will be PUT INTO stock."
    ,confBtnTitle: "Confirm"
  },

  stockout : {
    name       : "Stock OUT"
    ,formTitle : "Stock OUT Form"
    ,btnTitle  : "Take out from stock"
    ,info01      : "Following items will be TAKEN OUT FROM stock."
  },

  distribute : {
    name : "Distributing"
    ,formTitle : "Distributing Form"
    ,inputTitle  : "Distributing List"
    ,outputTitle : "Distributing Detail List for purchase "
    ,info01 : "After press 'Confirm Delivery', all relevant order details' status will be updated to 'Delivered</span>'."
    ,confBtnTitle : "Confirm Delivery"
  },
  
  itemmgr : {
    name : "Item Management"
    ,formTitle : "Item Management"
    ,tabTitle1    : "Query the current items"
    ,tabTitle2    : "Upload new items"
    ,inputTitle1  : "Query Current Items"
    ,inputTitle2  : "Upload the Item file"
    ,outputTitle  : "Updated Items List"
    ,info01       : "Please select the item data file and upload it."
  },
  
  suppmgr : {
    name : "Supplier Management"
    ,formTitle : "Supplier Management"
    ,tabTitle1    : "Query the current suppliers"
    ,tabTitle2    : "Upload new suppliers"
    ,inputTitle1  : "Supplier Information"
    ,inputTitle2  : "Upload the Suppliers file"
    ,outputTitle  : "Updated Suppliers List"
    ,info01       : "Please select the supplier data file and upload it."
    ,suppname     : "Name"
  },
  
  admin : {
    name : "Admin"
    ,formTitle : "Admin"
    ,tabTitle1 : "User"
    ,tabTitle2 : "Branch"
    ,inputTitle1  : "User Information"
    ,outputTitle1 : "User List"
    ,inputTitle2  : "Branch Information"
    ,outputTitle2 : "Branch List"
    ,username     : "Name"
    ,branchname     : "Branch"
  },
  
  //==== For business use ====
  business : {
    Type : "Type"
    ,ID : "ID"
    ,ItemID : "ItemID"
    ,ItemName : "Name"
    ,Qty : "Qty"
    ,Supplier : "Supplier"
    ,Delete : "Delete"
    ,Description : "Description"
    ,Price : "Price"
    ,ItemCode : "Item Code"
    ,GuidedPrice : "Guided Price"
    ,OrderQty : "Order Qty"
    ,StockQty : "Stock Qty"
    ,PurchaseQty : "Purchase Qty"
    ,PurchasePrice : "Purchase Price"
    ,AggregateTime : "Aggregate Time"
    ,From : "From"
    ,To : "To"
    ,PurchasedTime : "Purchased Time"
    ,Status : "Status"
    ,EditShow : "Edit/Show"
    ,Comment : "Comment"
    ,StockPrice : "Stock Price"
    ,CurrentStock : "Current Stock"
    ,SafetyStock : "Safety Stock"
    ,NecessaryQTY : "Necessary QTY"
    ,Direction : "Direction"
    ,StockInPrice : "Stock In Price"
    ,SalePrice : "Sale Price"
    ,TotalQty  : "Total Qty"
    ,Package   : "Package"
    ,StockPlace : "Stock Place"
    ,Branch : "Branch"
    ,User : "User"
    ,PlacedDate:"Placed Date"
    ,StartDate:"Start Date"
    ,EndDate:"End Date"
    ,ItemType: "Item Type"
    ,PersonLName  : "Last Name"
    ,PersonFName  : "First Name"
    ,Email       : "Email"
    ,TelNo       : "Tel No"
    ,FaxNo       : "Fax No"
    ,Address     : "Address"
    ,Contact     : "Contact"
  },
  
  //==== For Common Use ============
  common: {
    sysTitle:"Cloud Logistics Manager"
    ,querymsg001 : "Data is being retrieved..."
    ,querymsg002 : "Leave blank if want to query all types of item."
    ,errdiagTitle : "Sorry, there is an error:"
    ,confirmDialogTitle : "Confirmation"
    ,infoDialogTitle : "Information"
    ,queryBtnTitle : "Query"
    ,addBtnTitle : "Add"
    ,uploadBtnTitle : "Upload"
    ,clearBtnTitle: "Clear"
    ,updateBtnTitle: "Update"
    ,Operation : "Operation"
  },
  
  errormsg: {
    msg01:"Please input a number in {0} quantity" 
    ,msg02:"There is no order to place" 
    ,msg03:"Please check the input in {0}" 
  }

};


var MESSAGETXT_CN = {
  
  home : {
    name       : "首页"
    ,formTitle : "云端物流管理系统"
  },

  order : {
    name            : "订单"
    ,formTitle      : "订单处理"
    ,inputTitle     : "货品选择"
    ,outputTitle    : "已添加货品"
    ,addSBItemTitle : "添加货品"
    ,placeOrderTitle: "提交订单"
    ,info01         : "请在提交订单前再次确认"
  },
  
  orderlog : {
    name              : "订单记录"
    ,formTitle        : "订单记录"
    ,inputTitle       : "订单概要"
    ,outputTitle      : "当前订单详细内容"
    ,updateOrderTitle : "更新订单"
  },

  purchase : {
    name               : "采购"
    ,formTitle         : "采购处理"
    ,inputTitle        : "订单集计"
    ,outputTitle       : "货品统计一览"
    ,info01            : "全部所选货品可以直接从仓库发货。点击<em>“设置为已采购”</em>按钮可将所有订单状态更新为<em>“已采购”</em>。"
    ,setPurchasedTitle : "设置为已采购"
  },

  purchaselog : {
    name               : "采购记录"
    ,formTitle         : "采购记录"
    ,inputTitle        : "最近采购一览"
    ,outputTitle       : "采购单详细内容"
    ,purchaseAllTitle  : "采购"
  },

  stock : {
    name         : "库存"
    ,formTitle   : "库存处理"
    ,inputTitle  : "查询库存货品"
    ,outputTitle : "查询结果一览"
    ,queryTitle  : "查询"
    ,info01      : "部分数据尚未处理。仍然要继续吗？"
  },

  stockin : {
    name         : "入库"
    ,formTitle   : "入库处理"
    ,inputTitle  : "货品选择"
    ,outputTitle : "已添加货品"
    ,btnTitle    : "入库"
    ,info01      : "下列货品将入库"
    ,confBtnTitle: "确认"
  },

  stockout : {
    name       : "出库"
    ,formTitle : "出库处理"
    ,btnTitle  : "出库"
    ,info01    : "下列货品将出库"
  },

  distribute : {
    name          : "配送"
    ,formTitle    : "配送处理"
    ,inputTitle   : "配送一览"
    ,outputTitle  : "配送任务详细 - 采购 "
    ,info01       : "执行“确认配送”后，所有相关订单状态将被更新为“已配送（Delivered）”"
    ,confBtnTitle : "确认配送"
  },
  
  itemmgr : {
    name : "货品管理"
    ,formTitle    : "货品管理"
    ,tabTitle1    : "查询现有货品"
    ,tabTitle2    : "上传货品数据"
    ,inputTitle1  : "查询现有货品"
    ,inputTitle2  : "选择需上传的货品数据文件"
    ,outputTitle  : "查询/上传结果一览"
    ,info01       : "请选择需要上传的货品数据文件"
  },
  
  suppmgr : {
    name : "供应商管理"
    ,formTitle : "供应商管理"
    ,tabTitle1    : "查询现有供应商"
    ,tabTitle2    : "上传新供应商数据"
    ,inputTitle1  : "供应商信息"
    ,inputTitle2  : "选择需上传的供应商数据文件"
    ,outputTitle  : "查询/上传结果一览"
    ,info01       : "请选择需要上传的供应商数据文件"
    ,suppname     : "供应商名称"
  },
  
  admin : {
    name : "系统管理"
    ,formTitle : "系统管理"
    ,tabTitle1 : "用户"
    ,tabTitle2 : "分店"
    ,inputTitle1  : "用户信息"
    ,outputTitle1 : "用户列表"
    ,inputTitle2  : "分店信息"
    ,outputTitle2 : "分店列表"
    ,username     : "用户姓名"
  },  

  //==== For business use ====
  business : {
    Type : "分类"
    ,ID : "ID"
    ,ItemID : "货品ID"
    ,ItemName : "货品名称"
    ,ItemCode : "货品编号"
    ,ItemType: "货品分类"
    ,Qty : "数量"
    ,Supplier : "供应商"
    ,Delete : "删除"
    ,Description : "说明"
    ,Price : "价格"
    ,GuidedPrice : "指导价格"
    ,OrderQty : "订购数量"
    ,StockQty : "库存数量"
    ,PurchaseQty : "采购数量"
    ,PurchasePrice : "采购价格"
    ,AggregateTime : "集计日期"
    ,From : "开始日"
    ,To : "截止日"
    ,PurchasedTime : "采购日期"
    ,Status : "状态"
    ,EditShow : "编辑/显示"
    ,Comment : "备注"
    ,StockPrice : "库存价格"
    ,CurrentStock : "当前库存"
    ,SafetyStock : "安全库存"
    ,NecessaryQTY : "需采购数量"
    ,Direction : "出库/入库"
    ,StockInPrice : "入库价格"
    ,SalePrice : "销售价格"
    ,TotalQty  : "总数量"
    ,Package   : "包装"
    ,StockPlace : "库存所在地"
    ,Branch : "分店"
    ,User : "用户"
    ,PlacedDate:"下单日期"
    ,StartDate:"开始日"
    ,EndDate:"截止日"
    ,PersonLName  : "姓"
    ,PersonFName  : "名"
    ,Email       : "Email"
    ,TelNo       : "电话号码"
    ,FaxNo       : "传真号码"
    ,Address     : "地址"
    ,Contact     : "联系人"
  },

  //==== For common use
  common: {
    sysTitle:"Cloud Logistics Manager"
    ,querymsg001 : "查询数据中..."
    ,querymsg002 : "查询全部货品请选择空白"
    ,errdiagTitle : "出错啦"
    ,confirmDialogTitle : "确认"
    ,infoDialogTitle : "提示"
    ,queryBtnTitle   : "查询"
    ,addBtnTitle : "添加"
    ,uploadBtnTitle : "上传"
    ,clearBtnTitle: "重置"
    ,updateBtnTitle: "更新"
    ,Operation : "操作"
  },
  
  errormsg: {
    msg01:"请在 {0} 数量栏中输入数字" 
    ,msg02:"未指定货品，无法下单" 
    ,msg03:"请检查 {0} 的输入值" 
  }

};

var MESSAGETXT_JP = {
  
  //==== For Order
  order : {
    name : "オーダー"
  },
  
  //==== For common use
  common: {
    querymsg001 : "データを検索中。。。"
  }

};

//var MESSAGETXT = MESSAGETXT_CN;", 
            "type": "server_js"
        }, 
        {
            "id": "edeebd33-476d-48d7-a762-a0391b70c454", 
            "name": "DAL-mongodb", 
            "source": "/**
Data module containing all the constant definition 
and methods that manipulating data via MangoDb (by URL Fetch Service)

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-10-03
**/

// some id
GLOBAL.Data.apiKey = "";
GLOBAL.Data.baseUrl = "";
GLOBAL.Data.db = "";


// id: the object id of specified document
/**
find one data by id.  

@method GLOBAL.Data.find
@param table {string} the object id of specified document
@param id {string} the object id of specified document
@example
@return Map the item that just be updated
**/
GLOBAL.Data.find = function(table, id) {
  GLOBAL.Util.infoLog("[find]====================================");  
  var res = {};
  if (!GLOBAL.Util.isValidString(table) || !GLOBAL.Util.isValidString(id)) {
    res.code = -1;
    res.message = "id or table is invalid";
    return res;
  }

  var url = GLOBAL.Data.getBaseUrl(table, id);
  var option = {};
  option.method = "GET";
  option.contentType = "application/json";
  option.muteHttpExceptions = true;
  var oDataObject = UrlFetchApp.fetch(url); 
  var retData = JSON.parse(oDataObject.getContentText());
  
  var checkRes = GLOBAL.Data.checkRespCode(oDataObject.getResponseCode());
  res.code = checkRes.code;
  res.message = checkRes.message;
  
  if (res.code == GLOBAL.Constants.RET_OK) {
    res.data = retData;
  }
  return res;  
}

/**
delete one data by id.  

@method GLOBAL.Data.remove
@param table {string} the object id of specified document
@param id {string} the object id of specified document
@example
@return Map the item that just be updated
**/
GLOBAL.Data.remove = function(table, id) {
  var res = {};
  GLOBAL.Util.debugLog("[remove]====================================");  
  
  if (!GLOBAL.Util.isValidString(table) || !GLOBAL.Util.isValidString(id)) {
    res.code = GLOBAL.Constants.RET_ERR;
    res.message = "id or table is invalid";
    return res;
  }

  var url = GLOBAL.Data.getBaseUrl(table, id);
  //var q = encodeURIComponent(JSON.stringify({"_id":ObjectId(id)}));
  var option = {};
  option.method = "DELETE";
  option.contentType = "application/json";
  option.payload = "";
  option.muteHttpExceptions = true;

  //========== FOR DEBUG ===============
   var result = UrlFetchApp.getRequest(url,option);
   for(i in result) {
     GLOBAL.Util.debugLog(i + ": " + result[i]);
   }
     
   GLOBAL.Util.debugLog("========= HEADER =========");
  
   for(j in result.headers) {
     GLOBAL.Util.debugLog(j + ": " + result.headers[j]);
   }
    //====================================
  
  var oDataObject = UrlFetchApp.fetch(url, option); 
  var retData = JSON.parse(oDataObject.getContentText());
  
  var checkRes = GLOBAL.Data.checkRespCode(oDataObject.getResponseCode());
  //GLOBAL.Util.debugLog("[remove] response code:" + oDataObject.getResponseCode());  
  //GLOBAL.Util.debugLog(oDataObject.getAllHeaders().toSource());  
  
  res.code = checkRes.code;
  res.message = checkRes.message;
  
  if (res.code == GLOBAL.Constants.RET_OK) {
    res.data = retData;
  }
  return res;  
}

// query:   an object contains following
//           ==> collection:   a string indicating the type of data that want to fetech
//           ==> queryString:  an object containing the query conditions
// sort:    an object contains the sort conditions
// limit:   a number showing how many records should be retrieved
// return an object including at least code {0:OK, otherwise:failure} and message
GLOBAL.Data.fetchData = function (query, sort, limit) {

  var res = {};
  GLOBAL.Util.debugLog("[fetchData]====================================");  
  
  if (GLOBAL.Util.isEmpty(query)) {
    res.code = GLOBAL.Constants.RET_ERR;
    res.message = "query is invalid";
    return res;
  }
  
  GLOBAL.Util.debugLog("[fetchData] we are looking for data in " + query.collection);
  
  var url = GLOBAL.Data.getBaseUrl(query.collection, null);
  if (query.queryString) {
    GLOBAL.Util.debugLog("[fetchData] the QueryString is " + JSON.stringify(query.queryString));
    var queryString = encodeURIComponent(JSON.stringify(query.queryString));
    url += "&q=" + queryString;
  }
  
  if (sort) {
    GLOBAL.Util.debugLog("[fetchData] the sort is " + JSON.stringify(sort));
    var sortString = encodeURIComponent(JSON.stringify(sort));
    url += "&s=" + sortString;
  }
  
  if (limit > 0) {
    GLOBAL.Util.debugLog("[fetchData] the limit is " + limit);
    url += "&l=" + limit;
  }

  var option = {};
  option.method = "GET";
  option.contentType = "application/json";
  //option.payload = JSON.stringify([]);
  option.muteHttpExceptions = true;
  
  // Get the data
  var oDataObject = UrlFetchApp.fetch(url, option); 
  var retData = JSON.parse(oDataObject.getContentText());
  
  var checkRes = GLOBAL.Data.checkRespCode(oDataObject.getResponseCode());
  res.code = checkRes.code;
  res.message = checkRes.message;
  
  if (res.code == GLOBAL.Constants.RET_OK) {
    res.data = retData;
  }

  return res;
  
};

// Get the count of this type of data (collection)
// return the count of specified type of records. 
// IF there are something wrong or nothing exist, 0 will be returned.
GLOBAL.Data.getCount = function(type) {
  
  var res = 0;
  
  if (!GLOBAL.Util.isValidString(type)) {
    return res;
  }
  
  var url = GLOBAL.Data.getBaseUrl(type, null) + "&c=true";
  
  // Get the data
  var oDataObject = UrlFetchApp.fetch(url); 
  res = JSON.parse(oDataObject.getContentText());
  return res;
   
}


// parameter data should contain two fields: "collection" for the table name and "data" for the content
// return an object including at least code {0:OK, otherwise:failure} and message
GLOBAL.Data.insert = function (data) {
  
  /*data: JSON.stringify( { "x" : 1 } ),
		  type: "POST",
		  contentType: "application/json" } );*/
  var res = {};
  GLOBAL.Util.debugLog("[insert]====================================");  
  
  if (!data) {
    res.code = -1;
    res.message = "parameter is not set.";
    return res;
  }
  
  var option = {};
  option.method = "POST";
  option.contentType = "application/json";
  
  option.payload = JSON.stringify(data.data);
  option.muteHttpExceptions = true;
  
  var url = GLOBAL.Data.getBaseUrl(data.collection);
  var oDataObject = UrlFetchApp.fetch(url, option); //.getContentText(); 
  
  if (!oDataObject)
  {
    res.code = GLOBAL.Constant.RET_ERR;
    res.message = "Data inserted failure.";
    return res;
  }
  
  res.code = GLOBAL.Constants.RET_OK;
  res.message = "OK";
  var retData = JSON.parse(oDataObject.getContentText());
  GLOBAL.Util.debugLog("[insert]" + oDataObject.getContentText());
  
  res.id = retData._id.$oid;
  res.data = data.data;  
  
  GLOBAL.Util.debugLog("[insert] data has been inserted sucessfully. the object id is " + res.id);  
  return res;
}



// As parameter, obj must have:
// 1. collection: a string that is the table name
// 2. id(OPTION): a string that is the (o)id of document that will be updated
// 3. data: an object containing the fields that will be modified
// 4. query(OPTION): if want to update/delete multiple records, here is the query string
// NOTE: if data is empty, which means this record/document will be deleted
// NOTE: if both id and query have value simultaneously, id has the higher priority (query will be ignored).
// return an object containing return code and error message if there is an error
GLOBAL.Data.update = function (obj) {
  
  var res = {}
  GLOBAL.Util.infoLog("[update]====================================");  
  GLOBAL.Util.displayObject(obj);
  
  if (!obj) {
    res.code = -1;
    res.message = "parameter is not set correctly.";
    return res;
  }
  
  var option = {};
  option.method = "put";
  option.contentType = "application/json";
  option.payload = "";    //Must be a string
  
  // using "$set" : { "x" : 3 }
  var updateset = {};
  if (!GLOBAL.Util.isEmpty(obj.data)) {
    updateset = {"$set":obj.data};
    option.payload = JSON.stringify(updateset);
    GLOBAL.Util.debugLog("[update]payload is ***"+option.payload+"***");
  }else{
    option.payload = JSON.stringify([]);               // <----- This is the point!  (Just "" will not work).
  }
  
  option.muteHttpExceptions = true;
  
  var url = "";
  
  if (GLOBAL.Util.isValidString(obj.id)) {
    url = GLOBAL.Data.getBaseUrl(obj.collection, obj.id);   // update one document
  } else {
    url = GLOBAL.Data.getBaseUrl(obj.collection, null);
    if (obj.query) {
      GLOBAL.Util.debugLog("[update]query is ***"+JSON.stringify(obj.query)+"***");
      url += "&q=" + encodeURIComponent(JSON.stringify(obj.query)) + "&m=true";  //update multiple records
    }
  }
  GLOBAL.Util.debugLog("[update]created url is: " + url);  

  var oDataObject = UrlFetchApp.fetch(url, option); 
  var retData = JSON.parse(oDataObject.getContentText());
  
  var checkRes = GLOBAL.Data.checkRespCode(oDataObject.getResponseCode());
  res.code = checkRes.code;
  res.message = checkRes.message;
  
  if (res.code == GLOBAL.Constants.RET_OK) {
    res.data = retData;
  }
  
  return res;
  
};

GLOBAL.Data.getLastError = function () {
  
  var res = {}
  GLOBAL.Util.debugLog("[getLastError]====================================");  

  var option = {};
  option.method = "POST";
  option.contentType = "application/json";
  
  var data = {"getLastError":"1"};
  option.payload = JSON.stringify(data);
  option.muteHttpExceptions = true;
  
  var url = GLOBAL.Data.getDBBaseUrl() + "/runCommand" + GLOBAL.Data.getAPIParameter();
  GLOBAL.Util.debugLog("[getLastError]created url is: " + url);  

  var oDataObject = UrlFetchApp.fetch(url, option); 
  var retData = JSON.parse(oDataObject.getContentText());
  GLOBAL.Util.displayObject(retData);
  
  var checkRes = GLOBAL.Data.checkRespCode(oDataObject.getResponseCode());
  res.code = checkRes.code;
  res.message = checkRes.message;
  
  if (res.code == 0) {
    res.data = retData;
  }
  return res;
  
};



//NOTE: only when updating/deleting one document/record, id must not be empty.
GLOBAL.Data.getBaseUrl = function(table, id) {
  
  GLOBAL.Util.infoLog("Entering getBaseUrl... ["+table+"]["+id+"]");  
  
  var url = GLOBAL.Data.getDBBaseUrl();
  var api = GLOBAL.Data.getAPIParameter();
  if (!GLOBAL.Util.isValidString(id)) 
  {
    url = url + "/collections/" + table + api;
  }else{
    url = url + "/collections/" + table + "/" + id + api;
  }
  GLOBAL.Util.debugLog("[getBaseUrl] created url is: " + url);  

  return url;
}

GLOBAL.Data.getDBBaseUrl = function() {
  if (GLOBAL.Data.baseUrl == "") GLOBAL.Data.initEnv();
  return GLOBAL.Data.baseUrl + "/databases/" + GLOBAL.Data.db;
}

GLOBAL.Data.getAPIParameter = function() {
  if (GLOBAL.Data.apiKey == "") GLOBAL.Data.initEnv();
  return "?apiKey=" + GLOBAL.Data.apiKey;
}

GLOBAL.Data.initEnv = function() {
  
  var pt = PropertiesService.getScriptProperties();
  GLOBAL.Data.apiKey = pt.getProperty("mongodb_api_key");
  GLOBAL.Data.baseUrl = pt.getProperty("mongodb_api_baseurl");
  GLOBAL.Data.db = pt.getProperty("mongodb_db_name");
}
", 
            "type": "server_js"
        }, 
        {
            "id": "6a7327c7-7462-454b-98ff-3174f379070d", 
            "name": "global-data-bak", 
            "source": "/**
Data module containing all the constant definition 
and methods that manipulating data via Scriptdb

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2014-02-03
**/
GLOBAL.namespace("DataBak");

/**
description.  

@method GLOBAL.Data.getDb
@return {ScriptDbInstance.} Db instance that just get
**/
GLOBAL.DataBak.getDb = function() {
  return ScriptDb.getMyDb();
};

/**
delete the whole database. maybe time-consuming if there are 
many data existed

@method GLOBAL.Data.deleteAll
@return {null}
**/
GLOBAL.DataBak.deleteAll = function() {
  var db = GLOBAL.Data.getDb();
  
  while (true) {
    var result = db.query({});
    if (result.getSize() == 0) {
      break;
    }
    while (result.hasNext()) {
      db.remove(result.next());
    }
  }
};

/**
save item into database.  

@method GLOBAL.Data.saveDataItem
@param type {String} the type of data you want to save
@param [content] {Object} A map containing the content that you want to save
@example
   1. create an object that contains the contents;
   2. GLOBAL.Data.saveDataItem("data type", contents)
@return {Object} The object that just has been saved
**/
GLOBAL.DataBak.saveDataItem = function(type, content) {
  
  GLOBAL.Util.infoLog("Entering saveDataItem. type:" + type);
  var ob = new Object();
  var db = GLOBAL.Data.getDb();
  
  //two common items, type and record_id
  ob.type = type;
  
  //get the next record_id
  ob.record_id = db.query({type:type}).getSize() + 1;
  
  // content should be an object
  for (item in content) {
    ob[item] = content[item];
  }
  // add activeFlg
  ob.activeFlg = GLOBAL.Constants.REC_ACTIVE;
  
  // add the modified person and modified night
  // save the data
  ob.modifiedPerson = GLOBAL.Util.getCurrentUser();
  ob.modifiedDate = GLOBAL.Util.getCurrentTime();
  
  // save the data
  var re = db.save(ob);
  
  //return ob.record_id;  
  return re;
};

/**
update item into database.  

@method GLOBAL.Data.updateDataItem
@param obj {Object} the object that want to be updated
@example
@return Map the item that just be updated
**/
GLOBAL.DataBak.updateDataItem = function(obj) {
  GLOBAL.Util.infoLog("Entering updateDataItem:" + obj);
  var db = GLOBAL.Data.getDb();
  return db.save(obj);  
}

/**
retrieve data from database by condition.  

@method GLOBAL.Data.getDataItems
@param [condition] {Object} A map containing the content that you want to save
@example
@return [results] {Array} An array the item depend on the condition
**/
GLOBAL.DataBak.getDataItems = function(condition) {
  GLOBAL.Util.infoLog("Entering GLOBAL.Data.getDataItems:" + condition);
  
  //add ACTIVE flag
  condition.activeFlg = GLOBAL.Constants.REC_ACTIVE;
  
  return GLOBAL.Data.getAllDataItems(condition);  
}

GLOBAL.DataBak.getAllDataItems = function(condition) {
  GLOBAL.Util.infoLog("Entering GLOBAL.Data.getAllDataItems:" + condition);
  
  var results = new Array()
  var db = GLOBAL.Data.getDb();
  var records = db.query(condition);
 
  while(records.hasNext()) {
    results.push(records.next());
  }
  
  
  
  GLOBAL.Util.debugLog(String.format("{0} items of [{1}] have been found!", results.length, condition.type));
  
  return results;  
}



/**
clear the data that is in the table (type is appointed).  

@method GLOBAL.Data.clearTableData
@param type {String} the type of data you want to save
@example
@return {ScriptDbResult} The object that just has been saved
**/
GLOBAL.DataBak.clearTableData = function(type) {
  
  GLOBAL.Util.infoLog("Entering clearTableData. type:" + type);
  var db = GLOBAL.Data.getDb();
  
  // try bulk operation
  while (true) {
    var results = db.query({type:type});
    if (results.getSize() == 0) {
      break;
    }
    var ids = new Array();
    while (results.hasNext()) {
      ids.push(results.next().getId());
    }
    db.removeByIdBatch(ids, false);
  }

};

/**
initialising data for program.  

@method GLOBAL.Data.initializeData
@example
@return {ScriptDbResult} The object that just has been saved
**/
GLOBAL.DataBak.initializeData = function() {
  

};", 
            "type": "server_js"
        }, 
        {
            "id": "e128e7f6-b5e4-4ba3-af76-ca153ca22c8f", 
            "name": "suppmgr", 
            "source": "/**
Suppmgr module containing all the definition 
and methods that are used by Supplier Management module

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2015-03-12
**/

var Suppmgr = {

//============== Front End Code =========================//
//--------------------------------------------------
// receive the upload file and save it to Google drive
// then transfer it to Google spreadsheet format
// and retrieve the data from file to save to the database
// RETURN the successful information
//--------------------------------------------------
  uploadSupplierFile :function (form) {
    GLOBAL.Util.infoLog("Entering uploadSupplierFile...");
    
    var formBlob = form.supplierFile;
    //TODO:
    
    // Save uploaded Excel as Google Spreadsheet
    var fileName = "Supplier_" + GLOBAL.Util.formatDateByTime(GLOBAL.Util.getCurrentTime(), "yyyyMMddhhmmss");
    
    var gsFile = FileHandler.convert(formBlob, fileName);
    GLOBAL.Util.debugLog("Uploaded file's has been renamed to " + fileName);
    
    //Fetching data from file
    var ss = SpreadsheetApp.openById(gsFile.getId());
    var sheet = ss.getSheets()[0];
    var dataRange = sheet.getRange("A3:M800");
    
    var dataObjects = FileHandler.getRowsData(sheet, dataRange, 1);
    
    this.saveSupplierToDb(dataObjects);
    
  },
  

//--------------------------------------------------
// save the supplier information get from uploaded file
//--------------------------------------------------
  saveSupplierToDb : function (suppliers) {
    GLOBAL.Util.infoLog("Entering saveUploadDataToDb...");
    
    // deActivate all the current item data.
    Model.deActivateRec(GLOBAL.Constants.SUPPLIER_TYPE);
    
    var cnt = 0;
    
    for (var idx = 0; idx < suppliers.length; idx++) {
      
      var supplierID = suppliers[idx].supplierID;
      
      if (supplierID) {

        GLOBAL.Util.debugLog("actually handling supplier " + supplierID);
        // (1) prepare supplier Data
        var supplier = suppliers[idx];
        
        // (2) create the item data
        item = Model.createSupplier(supplier);
        GLOBAL.Util.debugLog(String.format("Supplier [{0}] has been stored! ",supplier.record_id));
        cnt++;
        
      }
    }
    
    GLOBAL.Util.debugLog(String.format("{0} items have been stored successfully!", cnt));
    
  },
  
  querySupplier:function(params) {
    GLOBAL.Util.infoLog("Entering Suppmgr#querySupplier()...");
    GLOBAL.Util.showPara({
      funcName:"querySupplier",
      "params":params
    });
    
    var condition = {};
    if (params.suppname) condition.name = {"$regex":params.suppname, "$options" : "ig"};
    if (params.suppemail) condition.email = {"$regex":params.suppemail, "$options" : "ig"};
    if (params.supptel) condition.telno = {"$regex":params.supptel, "$options" : "ig"};
    if (params.suppfax) condition.faxno = {"$regex":params.suppfax, "$options" : "ig"};
    
    var results = Model.querySupplier(condition);
    
    GLOBAL.Util.displayObject(results);
    
    return results;  
  },
  
  end: function(){
   //do nothing
  }
}", 
            "type": "server_js"
        }, 
        {
            "id": "38baaf46-84ff-4ef7-a843-0e539d23b112", 
            "name": "distribute-ui-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!--  
  //====================== EVENT FUNCTION =================================
  function displayDistributeDetail(purchaseId, statusId) {
    log("Entering displayDistributeDetail...:[" + purchaseId + "][" + statusId + "]");
    google.script.run.withSuccessHandler(onSuccessDistributeDetail).processDistributeDetail(purchaseId, statusId);
  }

  function submitConfirmDistribute() {
    log("Entering submitConfirmDistribute...");
    
    //get the purchaseID (which is used to update distribute detail and master as a key)
    //distribute-purchase-id
    var purchaseID = parseInt($("#distribute-purchase-id").text());
    
    //collect all the distribute Items <status and comment>
    var status = {};
    var comment ={};
    
    //set the status information
    $("#distribute-detail tbody tr select").each(function(){  // for each ROW(<tr>) of sbitem
      //get branch name from the name of select
      var selectName = $(this).attr("name");
      var branchName = selectName.split('-')[0];   
      //log(branchName);
      //log($(this).val());
      status[branchName] = $(this).val();
    });
    
    //set the comment information
    $("#distribute-detail tbody tr input").each(function(){  // for each ROW(<tr>) of sbitem
      //get branch name from the name of select
      var inputName = $(this).attr("name");
      var branchName = inputName.split('-')[0];   
      comment[branchName] = $(this).val();
      //log(comment[branchName]);
    });
    
    google.script.run.withSuccessHandler(onSuccessConfirmDistribute).processConfirmDistribute(purchaseID, status, comment);
  }
  
  //====================== CALL BACK FUNCTION =================================
  
  function onSuccessDistributeList(results) {
    log("Entering onSuccessDistributeList...");
    logShowObject(results[0]);
    
    var oTable = $("#distribute-list").dataTable();
    oTable.fnClearTable();

    // result is an array of queried items
    for (var i = 0; i < results.length; i++) {
      var result = results[i];
      
      //var operation = (result.statusId == STATUS.DELIVERED.value) ? "Show detail" : "Delivery";
      var operation = (result.statusId == STATUS.DELIVERED.value) ? 
          "<i class='fa fa-search-plus fa-lg m5'></i>" : 
          "<i class='fa fa-truck fa-lg m5'></i>";               
      
      oTable.fnAddData([
        result.id,
        result.aggTime,    
        result.startTime, 
        result.endTime,       
        result.purchasedTime,
        result.status,
        //"<button class='table-button' onclick='displayDistributeDetail("+result.id+","+result.statusId+",this.parentNode)'>"+operation+"</button>"
        "<span onclick='displayDistributeDetail("+result.id+","+result.statusId+",this.parentNode)'>"+operation+"</span>"
      ]);         
    }
    
    //fa fa-truck
    
    //close info window
    showInfoDialog("", false);
    
  } 
  
  function onSuccessDistributeDetail(results) {
    log("Entering onSuccessDistributeDetail...");
    log("== display the number of detail data ==");
    //logShowObject(results.itemRecords.length);
    
    //set the purchase ID
    $("#distribute-purchase-id").text(results.purchaseID);
    
    var oTable = $("#distribute-detail").dataTable();
    var branches01 = JSON.parse($("input[name='branches']").first().val());
    //("STATUS", STATUS);
    
    var itemRecords = results.itemRecords;
    log("There are detail "+itemRecords.length+" records of purchase["+results.purchaseID+"]");
    var showContent;
    
    oTable.fnClearTable();


    //log("===== Setting each item =======");
    // set the item information (distribute detail)
    for (var idx=0, max=itemRecords.length; idx<max; idx++) {
      var item = itemRecords[idx];
      
      logShowObject(item);

      showContent = new Array();
      showContent.push(item.itemName);
      showContent.push(item.salePrice.toFixed(2));
      showContent.push(0);   //totalQty : index = 2;

      for (var i=0; i<branches01.length;i++) {
        var branchName = branches01[i].name;
        if (item.hasOwnProperty(branchName)) {
          showContent.push(item[branchName]);
          showContent[2] += parseInt(item[branchName]);  //update total quantity
        }else{
          showContent.push(0);
        }
      }
      oTable.fnAddData(showContent);         
      log("One item has been added!" + item.itemName);
    }

    log("===== Setting the final master rows! =======");
    // set the master content
    var masterContent = 
      [{title:"Total Price:", value:results.master.branchTotalPrice},
       {title:"Status:", value:results.master.branchStatus},
       {title:"Comment:" , value:results.master.branchComments}];
    
    var currentBranchStatus = {};
      
    for (var idx=0, max=masterContent.length;idx<max;idx++) {
      var item = masterContent[idx];
      log("Add item!");
      logShowObject(item);
      
      showContent = new Array();
      showContent.push("");
      showContent.push("");
      showContent.push(item.title);   
      for (var i=0, max1=branches01.length; i<max1;i++) {
        var branchName = branches01[i].name;
          //TotalPrice is text, Status is combo box, and comment is input text
          switch (idx) {
            case 0:  //TotalPrice
              showContent.push(item.value[branchName].toFixed(2));
              break;
            case 1:  //Status
              var str = "";
              if (item.value[branchName] == STATUS.NEW.value) {  //Value is status id
                str += "<select name='"+branchName+"-status' class='table-input'>";   // record the No. of branches
                str += "<option value=" + STATUS.NEW.value + ">"+STATUS.NEW.title+"</option>";
                str += "<option value=" + STATUS.DELIVERED.value + ">"+STATUS.DELIVERED.title+"</option>";
                str += "</select>";              
                currentBranchStatus[branchName] = item.value[branchName];
              }else if (item.value[branchName] == STATUS.DELIVERED.value) {
                str = STATUS.DELIVERED.title;
                currentBranchStatus[branchName] = item.value[branchName];
              }else {
                currentBranchStatus[branchName] = STATUS.NONE.value;
              }
              log("Status:" + currentBranchStatus[branchName]);
              showContent.push(str);
              break;
            case 2:  //Comment
              log("Comment:" + currentBranchStatus[branchName]);
              if (currentBranchStatus[branchName] == STATUS.NEW.value) {  //Value is status id
                showContent.push("<input type='text' name='"+branchName+"-comment' class='table-input' value='"+item.value[branchName]+"' >");
              }else {
                showContent.push(item.value[branchName]);
              }
              break;
            default:
              showContent.push("");
          }
      }
      oTable.fnAddData(showContent);         
    }
    
    //set the 'Confirm Delivery' button
    if (results.master.status != STATUS.DELIVERED.value) {
      $("#distribute-submit").css("display","block");
    }else{
      $("#distribute-submit").css("display","none");
    }
  }  
  
  
  function onSuccessConfirmDistribute(result) {
    log("Entering onSuccessConfirmDistribute...");
  
    //clear sb item list
    $("#distribute-detail").dataTable().fnClearTable();
  
    //return to home screen
    var msg = "Purchase [" + result + "] has been updated successfully. An email will be sent to your email";
    displayHomePage(msg);
  
  }
  -->
  </script>
", 
            "type": "html"
        }, 
        {
            "id": "d5048932-d928-4a04-8b86-16811ed63220", 
            "name": "admin", 
            "source": "/**
Admin module containing all the definition 
and methods that are used by Administration module

@class
@constructor

@author songxin <songxin1973@gmail.com>
@modified songxin
@date 2015-07-12
**/

var Admin = {
  
  initializeAdminList:function() {
    GLOBAL.Util.infoLog("Entering Admin#initializeAdminList()...");
    
    var result = {};
    
    result.users = Model.queryUser();
    result.userbranch = Model.queryUserBranch();
    result.branches = Model.queryBranch();
    
    //setting some additive information
    this.setUser(result);  //adding branch name
    
    this.setBranch(result); //adding contact
    
    
    return result;  
  },
  
  //Setting the users by adding branch info
  setUser:function(result) {
    GLOBAL.Util.infoLog("Entering Admin#setUser()...");
    if (!result.users) return;
    
    for (var uidx = 0; uidx < result.users.length; uidx++) {
      var user = result.users[uidx];
      user.branch = "";
      
      for (var ubidx = 0; ubidx < result.userbranch.length; ubidx++) {
        var ub = result.userbranch[ubidx];
        if (user.record_id == ub.staffID) {  
          var branchID = ub.branchID;
          
          for (var bidx = 0; bidx < result.branches.length; bidx++) {
            var branch = result.branches[bidx];
            if (branchID == branch.record_id) {
              //Add branch name into user info
              GLOBAL.Util.debugLog("Hit! userID: "+user.record_id+" branchID:" + branchID + " name:" + branch.name );
              user.branch = branch.name;
              break;
            }
          }
          break;
        }
      }
    }
  },
  
  setBranch:function(result) {
    GLOBAL.Util.infoLog("Entering Admin#setBranch()...");
    if (!result.branches) return;
    
    for (var bidx = 0; bidx < result.branches.length; bidx++) {
      var branch = result.branches[bidx];
      branch.contact = "";
      
      for (var ubidx = 0; ubidx < result.userbranch.length; ubidx++) {
        var ub = result.userbranch[ubidx];
        
        if (branch.record_id == ub.branchID && ub.position == 0) {  
          var userID = ub.userID;
          
          for (var uidx = 0; uidx < result.users.length; uidx++) {
            var user = result.users[uidx];
            if (userID == user.record_id) {
              branch.contact = user.firstName + " " + user.lastName;
              break;
            }
          }
          break;
        }
      }
    }
  },  
    
  addUser:function(user) {
    GLOBAL.Util.infoLog("Entering Admin#addUser()...");
    
    var result = {};
    
    
  },
  
  end: function(){
   //do nothing
  }
}", 
            "type": "server_js"
        }, 
        {
            "id": "da782c74-2732-4de2-903c-676542b9ca76", 
            "name": "admin-ui-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!--  
  //====================== EVENT FUNCTION =================================
  function submitAddUser() {
    log("Entering submitAddUser...");

    // get the input conditions
    var param = {};
    param.userlname = $("#userlastname").val();
    param.userfname = $("#userfirstname").val();
    param.useremail = $("#useremail").val();
    param.userbranch = $("#select-user-branch").find("option:selected").val();
    
    var res = checkUserInput(param);
    if (!res) return;
    
    google.script.run.withSuccessHandler(onSuccessAddUser).processAddUser(param);
  }
  //====================== CALL BACK FUNCTION =================================
  
  function onSuccessInitAdminList(result) {
    log("Entering onSuccessInitAdminList...");
    
    //close info window
    showInfoDialog("", false);
    
    refreshAdminUsers(result);
    refreshAdminBranches(result.branches);
    
  } 
  
  function onSuccessConfirmDistribute(result) {
    log("Entering onSuccessConfirmDistribute...");
  
    //clear sb item list
    $("#distribute-detail").dataTable().fnClearTable();
  
    //return to home screen
    var msg = "Purchase [" + result + "] has been updated successfully. An email will be sent to your email";
    displayHomePage(msg);
  
  }

  //====================== COMMON FUNCTION =================================
  function refreshAdminUsers(result) {
    var users = result.users;
    var oTable = $("#admin-user-list").dataTable();
    oTable.fnClearTable();

    // result is an array of queried items
    for (var i = 0; i < users.length; i++) {
      var user = users[i];
      oTable.fnAddData([
        user.firstName + " " + user.lastName,
        user.email,    
        user.branch,
        "<span name='admin-user-edit'><i class='fa fa-pencil-square-o fa-lg m5'></i></span>"
          + "<span name='admin-user-update' class='none'><i class='fa fa-check fa-lg m5'></i></span>" 
          + "<span name='admin-user-delete'><i class='fa fa-times fa-lg m5'></i></span>"
      ]);     

      //Add edit event
      bindEditUserForAdmin(oTable, 'admin-user-edit', result.branches);
      //Add update event
      //bindUpdateUserForAdmin(oTable, 'admin-user-update');
      //Add delete event
      //bindDeleteEventForAdmin(oTable, 'admin-user-delete');  //Can be shared
    }
  }
  
  function refreshAdminBranches(branches) {
    var oTable = $("#admin-branch-list").dataTable();
    oTable.fnClearTable();

    // result is an array of queried items
    for (var i = 0; i < branches.length; i++) {
      var branch = branches[i];
      oTable.fnAddData([
        branch.name,
        branch.address,
        branch.telno,    
        branch.faxno,
        branch.email,
        branch.contact,
        "<span name='admin-branch-edit'><i class='fa fa-pencil-square-o fa-lg m5'></i></span>" 
          + "<span name='admin-branch-update' class='none'><i class='fa fa-check fa-lg m5'></i></span>" 
          + "<span name='admin-branch-delete'><i class='fa fa-times fa-lg m5'></i></span>"
      ]);     

      //Add delete event
      //bindDeleteEventForAdmin(oTable, 'admin-branch-delete');
      
    }
  }
  
  function bindEditUserForAdmin(oTable, spanName, branches) {
    log("Entering bindEditUserForAdmin... " + spanName);
    
    //Initialize Delete Button
    $("span[name='"+spanName+"']").unbind("click").bind("click", function(event){
      var target_row = $(this).closest("tr").get(0);   // find the row the icon belong to. get(-) is used to convert jQuery object to DOM object

      // Name cannot be changed
      
      // Email
      var emailCell = $(target_row.cells[1]);
      emailCell.html("<input type='text' name='email' value=" + emailCell.html() + ">");
      
      // Branches
      var branchCell = $(target_row.cells[2]);
      var originalBranch = branchCell.html();
      
      var branchHtml = "<select name='branch'>";
      //branchHtml += "<option value='-1'></option>"
      for (var i=0; i<branches.length; i++) {
        if (originalBranch == branches[i].name) {
          branchHtml += "<option value="+branches[i].id+" selected>"+branches[i].name+"</option>";
        }else{
          branchHtml += "<option value="+branches[i].id+">"+branches[i].name+"</option>";
        }
      }
      branchHtml += "</select>";
      branchCell.html(branchHtml);
      
      // operation
      $(this).addClass("none");
      $(this).next().removeClass("none");

      logShowObject($(this).closest("span"));
      
      //invoke the remote function to delete data from db
      //google.script.run.withSuccessHandler(onSuccessDeleteUser).processAdminDeleteUser(itemType);
    }); 
  }
  
  function bindDeleteEventForAdmin(oTable, spanName) {
    
    //Initialize Delete Button
    $("span[name='"+spanName+"']").unbind("click").bind("click", function(event){
      var target_row = $(this).closest("tr").get(0);
      log("target_row= " + target_row);
      var aPos = oTable.fnGetPosition(target_row); 
      log("delete stock list, aPos=" + aPos);
      oTable.fnDeleteRow(aPos);
      
      //invoke the remote function to delete data from db
      google.script.run.withSuccessHandler(onSuccessDeleteUser).processAdminDeleteUser(itemType);
    }); 
  }
  
  function checkUserInput(param) {
    
    var result;
    
    result = checkPersonName(param.userlname + param.userfname);
    if (result == false) {
      showErrorDialog(String.format(MESSAGETXT.errormsg.msg03,MESSAGETXT.admin.username));
      throw new Error("[ERROR][Admin]-The input value of " + MESSAGETXT.admin.username + " is invalid.");
    }
    
    result = checkEmail(param.useremail);
    if (result == false) {
      showErrorDialog(String.format(MESSAGETXT.errormsg.msg03,MESSAGETXT.business.Email));
      throw new Error("[ERROR][Admin]-The input value of " + MESSAGETXT.business.Email + " is invalid.");
    }
    
  }

  -->
  </script>", 
            "type": "html"
        }, 
        {
            "id": "eed07c2a-81d7-4baf-8fc3-418a61546230", 
            "name": "init-js", 
            "source": "  <script language="javascript" type="text/jscript">
  <!--  

  function initLayout() {
    log("Entering initLayout...");
    
    // menu
    initMenuItems(menuitems);
    
  }
  
  function initHandle() {
    log("Entering initHandle...");
    handle['#home'] = handleHome;
    handle['#order'] = handleOrder;
    handle['#orderlog'] = handleOrderLog;
    handle['#purchase'] = handlePurchase;
    handle['#purchaselog'] = handlePurchaseLog;
    handle['#stocklist'] = handleStockList;
    handle['#stock'] = handleStock;   //used by both stock in and out
    handle['#distribute'] = handleDistribute;
    handle['#itemmgr'] = handleItemMgr;
    handle['#suppmgt'] = handleSupplierMgt;
    handle['#admin'] = handleAdmin;
  }

  //====================== HANDLE FUNCTION =================================
  function handleHome(content) {
    log("entering handleHome:" + content);
    showInfoDialog("", false);
  }
  function handleOrder(content) {
    log("entering handleOrder:" + content);
    google.script.run.withSuccessHandler(onSuccessPrepareOrder).processPrepareOrder();
  }
  
  function handleOrderLog(content) {
    log("entering handleOrderLog:" + content);
    google.script.run.withSuccessHandler(onSuccessOrderLog).processOrderLog();
  }
  
  function handlePurchase(content) {
    log("entering handlePurchase:" + content);
    $("#purchase-list").dataTable().fnClearTable();
    $("#all-in-stock-msg").addClass("none");
    $("#set-to-purchased").addClass("none");
    showInfoDialog("", false);
  }
  
  function handlePurchaseLog(content) {
    log("entering handlePurchaseLog:" + content);
    $("#update-purchased").addClass("none");
    
    $("#purchase-log-list").dataTable().fnClearTable();
    $("#purchase-detail-list").dataTable().fnClearTable();
    
    google.script.run.withSuccessHandler(onSuccessPurchaseLog).processPurchaseLog();
  }

  function handleStockList(content) {
    log("entering handleStockList:" + content);
    google.script.run.withSuccessHandler(onSuccessStockList).processStockList();
  }
  
  function handleStock(content) {
    log("entering handleStock:" + content);
    google.script.run.withSuccessHandler(onSuccessPrepareStock).processPrepareStock(content);
  }
  
  function handleDistribute(content) {
    log("entering handleDistribute:" + content);

    $("#distribute-list").dataTable().fnClearTable();
    $("#distribute-detail").dataTable().fnClearTable();
    google.script.run.withSuccessHandler(onSuccessDistributeList).processDistributeList();
    
  }
  
  function handleItemMgr(content) {
    log("entering handleItemMgr:" + content);
    google.script.run.withSuccessHandler(onSuccessItemMgr).processItemMgr();
  }

  function handleSupplierMgt(content) {
    log("entering handleSupplierMgt:" + content);
    showInfoDialog("", false);
  }

  function handleAdmin(content) {
    log("entering handleAdmin:" + content);
    google.script.run.withSuccessHandler(onSuccessInitAdminList).processInitAdminList();
  }
  

  // NOTE: only correct when there is only one level of sub menu
  function initMenuItems(menuitems){
    log("Entering initMenuItems...");
    var menu_ul = $("#menu");
    
    for (var i=0; i<menuitems.length; i++) {
      var menuItem = menuitems[i];
      var item_li = $("<li><a href='#"+menuItem.para+"'><i class='fa "+menuItem.icon+" fa-lg' ></i>&nbsp; "+menuItem.name+"</a></li>");
      menu_ul.append(item_li);
      logShowObject(menuItem);
      
      if (menuItem.subMenu) {
        log(menuItem.name + " has a submenu: ");
        var subMenu_ul = $("<ul></ul>");
        for (var j=0; j<menuItem.subMenu.length; j++) {
          var subMenuItem = menuItem.subMenu[j];
          var subItem_li = $("<li><a href='#"+subMenuItem.para+"'>"+subMenuItem.name+"</a></li>");
          subMenu_ul.append(subItem_li);
          log("subMenu_ul: " + subMenu_ul.html());
        }
        item_li.append(subMenu_ul);
        log("item_li: " + item_li.html());
      }
    }
    //log("menu_ul: " + menu_ul.html());
  }

  //========= Init all types of controls in page  ==============
  function initControls() {
    log("Entering initControls...");
  
    //========= Initialize Dialog     ==============
    
/*    $("#ok-dialog").dialog({
      dialogClass: "no-close",
      autoOpen: false,
      modal: true,
      buttons: {
        Ok: function() {
          $(this).dialog( "close" );
        }
      }
    });

    $("#confirm-dialog").dialog({
      autoOpen: false,
      modal: true,
      buttons: {
        Ok: function() {
          $(this).dialog( "close" );
          return;
        },
        Cancel: function(cancelFunc) {
          $(this).dialog( "close" );
          return;
        }
      }
    });*/

    $("#info-dialog").dialog({
      autoOpen: false,
      modal: true
    });
    
    $("#dialog").dialog({
      autoOpen: false,
      modal: true
    });
    
    //========= Initialize Data Table ==============
    var datatableopt = {
        "bPaginate": false,
        "bLengthChange": false,
        "bFilter": false,
        "bSort": false,
        "bJQueryUI": true,
        "bInfo": false,
        "bAutoWidth": false      
    };
  
    //========= Initialize Menu ==============
    //$("#menu").menu(); 
   /* $("#menu").accordion({
      heightStyle: "content",
      autoHeight: false,
      clearStyle: true   
    });
    */
    //Add click function to all menu item
    $("#menu").find("a").each(function(){   // there are "a" tags in different level
      $(this).click(function(){
        hideAllContent();
        var content = $(this).attr("href");
        var disp = (content == "#stockin" || content == "#stockout")? "#stock" : content;
        log("Show =>" + disp + " with =>" + content);
        $(""+disp).css("display","block");
        
        //Do something depend on different content user select
        showInfoDialog(MESSAGETXT.common.querymsg001, true);
        
        refreshNavi(menuitems, content);
        handle[disp](content);
      });
    });

    //========= Initialize Order Area ==============
    //$("#order-tabs").tabs();

    //Initialize the datatable in Order Form
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.Type},
            { "sTitle": MESSAGETXT.business.ID},
            { "sTitle": MESSAGETXT.business.ItemID},
            { "sTitle": MESSAGETXT.business.ItemName},
            { "sTitle": MESSAGETXT.business.Qty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Supplier},
            { "sTitle": MESSAGETXT.business.Delete}
        ];
    $("#order-sbitem-list").dataTable(datatableopt);
    
    //Initialize the datatable in Order Log Form
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.Type},
            { "sTitle": MESSAGETXT.business.Description},
            { "sTitle": MESSAGETXT.business.Qty},
            { "sTitle": MESSAGETXT.business.Price, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Supplier},
            { "sTitle": MESSAGETXT.business.Delete}
        ];
    $("#order-log-list").dataTable(datatableopt);
    

    //========= Initialize Purchase Area ==============
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.ItemCode},
            { "sTitle": MESSAGETXT.business.Description},
            { "sTitle": MESSAGETXT.business.GuidedPrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.OrderQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.StockQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.PurchaseQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Supplier}
        ];
    $("#purchase-list").dataTable(datatableopt);
    
    $( "#purchase-query-from, #purchase-query-to" ).datepicker({
         dateFormat: "yy/mm/dd"
         ,showAnim: "slideDown"
     });
    
    //========= Initialize PurchaseLog Area ==============
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.AggregateTime},
            { "sTitle": MESSAGETXT.business.From},
            { "sTitle": MESSAGETXT.business.To},
            { "sTitle": MESSAGETXT.business.PurchasedTime},
            { "sTitle": MESSAGETXT.business.Status},
            { "sTitle": MESSAGETXT.business.EditShow}
        ];
    datatableopt["bPaginate"] = true;
    datatableopt["bAutoWidth"] = true;
    $("#purchase-log-list").dataTable(datatableopt);
    datatableopt["bPaginate"] = false;
    datatableopt["bAutoWidth"] = false;
    

    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.Type},
            { "sTitle": MESSAGETXT.business.ItemName},
            { "sTitle": MESSAGETXT.business.Supplier},
            { "sTitle": MESSAGETXT.business.GuidedPrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.PurchasePrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.StockQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.OrderQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.PurchaseQty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Comment}
        ];
    $("#purchase-detail-list").dataTable(datatableopt);
    
    //========= Initialize Stock Area ==============
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.Type},
            { "sTitle": MESSAGETXT.business.Description, "sClass" : "w400" },
            { "sTitle": MESSAGETXT.business.StockPrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.CurrentStock, "sClass" : "tr" },
            { "sTitle": MESSAGETXT.business.SafetyStock, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.NecessaryQTY, "sClass" : "tr"}
        ];
    $("#stock-list").dataTable(datatableopt);

    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.ID},
            { "sTitle": MESSAGETXT.business.Type},
            { "sTitle": MESSAGETXT.business.ItemID},
            { "sTitle": MESSAGETXT.business.Description, "sClass" : "w250" },
            { "sTitle": MESSAGETXT.business.Direction},
            { "sTitle": MESSAGETXT.business.StockInPrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Qty, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.CurrentStock, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Supplier},
            { "sTitle": MESSAGETXT.business.Delete}
        ];
    $("#stock-item-list").dataTable(datatableopt);
    
    //========= Initialize Distribute Area ==============
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.ID},
            { "sTitle": MESSAGETXT.business.AggregateTime },
            { "sTitle": MESSAGETXT.business.From},
            { "sTitle": MESSAGETXT.business.To},
            { "sTitle": MESSAGETXT.business.PurchasedTime},
            { "sTitle": MESSAGETXT.business.Status},
            { "sTitle": MESSAGETXT.common.Operation}
        ];
    datatableopt["bPaginate"] = true;
    $("#distribute-list").dataTable(datatableopt);
    datatableopt["bPaginate"] = false;


    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.ItemName},
            { "sTitle": MESSAGETXT.business.SalePrice , "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.TotalQty, "sClass" : "tr"}
        ];
    var branches01 = JSON.parse($("input[name='branches']").first().val());
    
    for (var i=0; i<branches01.length;i++) {
      datatableopt["aoColumns"].push({"sTitle": branches01[i].name, "sClass" : "tr"});
    }

    $("#distribute-detail").dataTable(datatableopt);
    
    //========= Initialize Item Management Area ==============
    $("#itemmgr-tabs").tabs();
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.ItemType},
            { "sTitle": MESSAGETXT.business.ItemCode},
            { "sTitle": MESSAGETXT.business.ItemName},
            { "sTitle": MESSAGETXT.business.Package},
            { "sTitle": MESSAGETXT.business.StockPrice, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.CurrentStock, "sClass" : "tr" },
            { "sTitle": MESSAGETXT.business.SafetyStock, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.StockPlace, "sClass" : "tr"},
            { "sTitle": MESSAGETXT.business.Supplier}
        ];
    $("#itemmgr-item-list").dataTable(datatableopt);  

    //========= Initialize Supplier Management Area ==========
    $("#suppmgr-tabs").tabs();
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.suppmgr.suppname},
            { "sTitle": MESSAGETXT.business.Email},
            { "sTitle": MESSAGETXT.business.Address},
            { "sTitle": MESSAGETXT.business.TelNo},
            { "sTitle": MESSAGETXT.business.FaxNo}
        ];
    $("#suppmgr-supplier-list").dataTable(datatableopt);  

    //========= Initialize Supplier Management Area ==========
    $("#admin-tabs").tabs();
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.admin.username},
            { "sTitle": MESSAGETXT.business.Email},
            { "sTitle": MESSAGETXT.business.Branch},
            { "sTitle": MESSAGETXT.common.Operation}
        ];
    $("#admin-user-list").dataTable(datatableopt);  
    
    datatableopt["aoColumns"] = [
            { "sTitle": MESSAGETXT.business.Branch},
            { "sTitle": MESSAGETXT.business.Address},
            { "sTitle": MESSAGETXT.business.TelNo},
            { "sTitle": MESSAGETXT.business.FaxNo},
            { "sTitle": MESSAGETXT.business.Email},
            { "sTitle": MESSAGETXT.business.Contact},
            { "sTitle": MESSAGETXT.common.Operation}
        ];
    $("#admin-branch-list").dataTable(datatableopt);  

    // Row selection and deletion
    var disTable = $('#distribute-list').dataTable();
    $('#distribute-list tbody').on( 'click', 'tr', function () {
        if ( $(this).hasClass('selected') ) {
            $(this).removeClass('selected');
        }
        else {
            disTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
        }
    } );
     
    //========= Initialize Button ==============
    $("button")
      .button()
      .click(function( event ) {
        event.preventDefault();
      });
  }
  
  //========= Init all types of controls in page  ==============
  function refreshNavi(menuitems, content) {  
  // Actually menuitems is a global viariable, 
  // it is for convenience to write it as a parameter 
  // NOTE: only handle two levels menu for the time being...
    log("Entering refreshNavi..." + content);
    
    var navi = new Array();
    
    // create a navi tree by using content
    for (var i=0; i<menuitems.length; i++) {
      var menuItem = menuitems[i];
      
      if (content == "#"+menuItem.para) {
        navi.push({para:menuItem.para, name:menuItem.name});
        break;
      }
      if (menuItem.subMenu) {
        for (var j=0; j<menuItem.subMenu.length; j++) {
          var subMenuItem = menuItem.subMenu[j];
          if (content == "#"+subMenuItem.para) {
            navi.push({para:menuItem.para, name:menuItem.name});
            navi.push({para:subMenuItem.para, name:subMenuItem.name});
            break;
          }
        }
      }
    }
    
    // creating navi bar (breadcrumbs)
    var bc = $("#breadcrumbs");
    bc.empty();
    for (var i = 0; i < navi.length; i++) {
      if (i > 0) {  // not the first level
        bc.append("&nbsp; » &nbsp;");
      }
      if (i == navi.length - 1) {  // The last one should not be a link
        bc.append(navi[i].name);
      } else {
        bc.append($("<a href='#"+navi[i].para+"'>"+navi[i].name+"</a>"));
      }
    }
    bc.find("a").each(function(){   // there are "a" tags in different level
      $(this).click(function(){
        hideAllContent();
        var content = $(this).attr("href");
        var disp = (content == "#stockin" || content == "#stockout")? "#stock" : content;
        $(""+disp).css("display","block");
        //Do something depend on different content user select
        showInfoDialog(MESSAGETXT.common.querymsg001, true);
        handle[disp](content);
      });
    });
    
  }
  //------------------------------------------------------
  //               Other Functions 
  //------------------------------------------------------
  function initFunctions() {
    // Overload String format function
    String.format = function(src){
        if (arguments.length == 0) return null;
        var args = Array.prototype.slice.call(arguments, 1);
        return src.replace(/\{(\d+)\}/g, function(m, i){
            return args[i];
        });
    };
  }
  
  function displayHomePage(msg) {
    log("Entering displayHomePage...");
    hideAllContent();
    
    $("#home").css("display","block");
    $("#home-message").text(msg).addClass("msg_success");
    
    //click home link
    $("#menu").find("a").each(function(){
      if ($(this).attr("href") == '#home') {
        $(this).click();
      }
    });    
  }
  
  function showOKDialog(msg) {
    log("Entering showOKDialog...");
    
    $("#dialog").html(msg);
    $("#dialog").dialog("option",  
      "buttons", [{
        text:"OK",
        click: function() {
          $(this).dialog("close" );
        }
      }]
    );     
    $("#dialog").dialog("option", "title", "Done:");
    $("#dialog").dialog("option", "dialogClass", "no-close info-dialog");
    $("#dialog").dialog("open");
  }

  function showErrorDialog(msg) {
    
    $("#dialog").html(msg);
    $("#dialog").dialog("option",  
      "buttons", [{
        text:"OK",
        click: function() {
          $(this).dialog("close" );
        }
      }]
    );       
    $("#dialog").dialog("option", "title", MESSAGETXT.common.errdiagTitle);
    $("#dialog").dialog("option", "dialogClass", "no-close error-dialog");
    $("#dialog").dialog("open");
  }
  
  function confirmDialog(msg) {
    log("Entering confirm dialog...")
    
    $("#confirm-dialog-message").text(msg);
    
    var def = $.Deferred();

    $("#confirm-dialog").dialog({
        dialogClass: "no-close",
        resizable: false,
        autoOpen: true,
        modal: true,
        buttons: {
            OK: function() {
                def.resolve();
                $(this).dialog("close" );
            },
            Cancel: function() {
                def.reject();
                $(this).dialog("close");
            }
        }
        /*,
        close: function() {$(this).remove();} */
        
    }); 
    return def.promise();
  }
      
  function showInfoDialog(msg, op) {  //op=true: show the window   and op=false: close
    log("Entering showInfoDialog... msg:" + msg + " op:" + op);
    if (op) {
      $("#dialog").html(msg);
      $("#dialog").dialog("option", "title", "Processing...");
      $("#dialog").dialog("option", "buttons", []);
      $("#dialog").dialog("option", "dialogClass", "no-close info-dialog");
      $("#dialog").dialog("open");
    }
    else {
      $("#dialog").html("");
      $("#dialog").dialog("close");
    }
  }

  function hideAllContent() {
    log("Entering hideAllContent...");
    $("#content").children().each(function(){
    	//alert($(this).prop("id"));
      if ($(this).prop("id") != "breadcrumbs") {    // Do not hide navigator bar
        $(this).css("display", "none");
      }
    });
  }
  

  function displayAll(objname, obj){
    var str = "The content of " +objname+" is:";
    for(var name in obj) str += name + "=" + obj[name] + "\n";
    log(str);
  }
  
  function log(msg){
	if (window["console"]){
		console.log(msg);
	}
  }  
  -->
  </script>", 
            "type": "html"
        }, 
        {
            "id": "3a684622-7186-4d8a-96f6-155a86721378", 
            "name": "test-FUNCTION", 
            "source": "function test_displayObject() {
  
  var obj = {};
  obj.key1 = 12;
  obj.key2 = "value2";
  obj.key3 = {inkey1:"invalue1", inkey2:"invalue2"};
  
  var obj1 = [1,"two", {key1:"value1"}];
  var obj2 = "This one is just a string";
  
  GLOBAL.Util.displayObject(obj);
  GLOBAL.Util.displayObject(obj1);
  GLOBAL.Util.displayObject(obj2);
  
}
//---------------------------------
// FOR TEST 
//---------------------------------

function test_status() {
  GLOBAL.Util.debugLog("the status of "+GLOBAL.Constants.STATUS.NEW.title+" is " + GLOBAL.Constants.STATUS.NEW.value);
  for (var s in GLOBAL.Constants.STATUS) {
    GLOBAL.Util.debugLog(s + " is " + GLOBAL.Constants.STATUS[s].title + " which value is " + GLOBAL.Constants.STATUS[s].value);
  }
}

function test_function() {
  //var condition = {};
  //condition.name = {"$regex":"supplier2", "$options" : "ig"};
  //GLOBAL.Util.displayObject(condition);
  var results =  GLOBAL.Security.createMenuItems();
  //GLOBAL.Util.debugLog("There are " + results.length + " data in results!");
  
  GLOBAL.Util.displayObject(results);
  //var testString = "鑫牌水饺（猪肉） 6包/箱";
  //for (var i=0;i<testString.length;i++) {
  //  GLOBAL.Util.debugLog("["+testString+"]:" + "["+GLOBAL.Util.trimString(testString,i*2)+"]");
  //}
  
  //GLOBAL.Util.debugLog("testing trim [" + GLOBAL.Lang.trim("  898  ") + "]");
}
", 
            "type": "server_js"
        }
    ]
}